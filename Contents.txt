//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Program.cs

﻿using System;
using MediatR;

namespace FMS.Application
{
    public class Program
    {
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ATGCommands\AlertRecordCommand\CreateAlertRecordCommand.cs

using  System;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using FMS.Application.Common;
using FMS.Application.ModelsDTOs.ATG;
using FMS.Application.ModelsDTOs.ATG.Common;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;

namespace FMS.Application.Command.DatabaseCommand.ATGCommands.AlertRecordCommand
{

    public class CreateAlertRecordCommand : IRequest<string>
    {
        public PtsRequestDto PtsRequestDto { get; set; }

    }

    public class CreateAlertRecordCommandHandler : IRequestHandler<CreateAlertRecordCommand, string>
    {

        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;


        public CreateAlertRecordCommandHandler( GpsdataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }
        

        /// <summary>
        /// Handles the creation of an alert record.
        /// </summary>
        /// <param name="request">The command request.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A task representing the asynchronous operation. The task result contains a string representing the result of the operation.</returns>
        public  async Task <string> Handle(CreateAlertRecordCommand request, CancellationToken cancellationToken)
        {
           int requetsid = 0;
            try
            {
                foreach(var packet in request.PtsRequestDto.Packets)
                {
                   
                        var alertrecorddata = packet.Data.ToObject<AlertRecordDTO>();
                        if (alertrecorddata == null) continue;

                        var alertrecord = _mapper.Map<Alertrecord>(alertrecorddata);
                        alertrecord.PacketId = packet.Id;
                        alertrecord.Ptsid = request.PtsRequestDto.PtsId;

                        _context.Alertrecords.Add(alertrecord);
                        requetsid = alertrecord.AlertId;
                   
                }
                await _context.SaveChangesAsync(cancellationToken);
                return  ConfirmationMessage.Success(requetsid, "UploadAlertRecord");
            }
            catch (Exception ex)
            {
                return ConfirmationMessage.Error(requetsid, "UploadAlertRecord",500, ex.Message);
            }

        }
    }
    
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ATGCommands\InTankDeliveryCommand\CreateInTankDeliveryCommand.cs

﻿using AutoMapper;
using FMS.Application.Common;
using FMS.Application.ModelsDTOs.ATG;
using FMS.Application.ModelsDTOs.ATG.Common;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Text;
using System.Threading;
using System.Threading.Tasks;


namespace FMS.Application.Command.DatabaseCommand.ATGCommands.InTankDeliveryCommand
{
    public class CreateInTankDeliveryCommand : IRequest<string>
    {
        public PtsRequestDto PtsRequestDto { get; set; }

    }

    public class InTankDeliveryCommandHandler : IRequestHandler<CreateInTankDeliveryCommand, string>
    {
        public readonly GpsdataContext _context;
        public readonly IMapper _mapper;

        public InTankDeliveryCommandHandler(GpsdataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<string> Handle(CreateInTankDeliveryCommand request, CancellationToken cancellationToken)
        {
            int requestid = 0;

            try
            {
                foreach(var packet in request.PtsRequestDto.Packets)
                {
                   
                    
                        var intankdeliverydata = packet.Data.ToObject<InTankDeliveryDTO>();
                        if (intankdeliverydata == null) continue;

                        
                           var intankdelivery = _mapper.Map<Intankdelivery>(intankdeliverydata) ;
                           intankdelivery.PacketId = packet.Id;
                           intankdelivery.Ptsid = request.PtsRequestDto.PtsId;

                            _context.Intankdeliveries.Add(intankdelivery);
                            requestid = intankdelivery.PacketId;


                    
                      
                    await _context.SaveChangesAsync(cancellationToken);


                }
           return ConfirmationMessage.Success(requestid, "InTankDelivery");


            }
            catch (Exception ex)
            {
                return ConfirmationMessage.Error(requestid, "InTankDelivery",500, ex.Message);

            }
            }
        }
    }







//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ATGCommands\PumpTransactoinCommand\CreatePumpTransactionCommand.cs

﻿using AutoMapper;
using FMS.Application.Common;
using FMS.Application.ModelsDTOs.ATG;
using FMS.Application.ModelsDTOs.ATG.Common;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ATGCommands.PumpTransactoinCommand
{
    public class CreatePumpTransactionCommand : IRequest<string>
    {
        public PtsRequestDto  PtsRequestDto { get; set; }
    }

    public class CreatePumpTransactionCommandHandler : IRequestHandler<CreatePumpTransactionCommand, string>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public CreatePumpTransactionCommandHandler(GpsdataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public  async Task<string> Handle(CreatePumpTransactionCommand request, CancellationToken cancellationToken)
        {
            int requestid = 0;  

            try
            {
                foreach(var packet in request.PtsRequestDto.Packets)
                {
                   
                        var pumpdata = packet.Data.ToObject<PumpTransactionDto>();
                        if (pumpdata == null) continue;

                        var pumptransactiondata = new Pumptransaction
                        {
                            PacketId = packet.Id,
                            PtsId = request.PtsRequestDto.PtsId,
                            DateTime = pumpdata.DateTime,
                            DateTimeStart = pumpdata.DateTimeStart,
                            FuelGradeId = pumpdata.FuelGradeId,
                            FuelGradeName = pumpdata.FuelGradeName,
                            Nozzle = pumpdata.Nozzle,
                            Price = pumpdata.Price,
                            Pump = pumpdata.Pump,
                            Tag = pumpdata.Tag,
                            Tcvolume = pumpdata.TCVolume,
                            TotalAmount = pumpdata.TotalAmount,
                            TotalVolume = pumpdata.TotalVolume,
                            Transaction = pumpdata.Transaction,
                            UserId = pumpdata.UserId,
                            Volume = pumpdata.Volume,
                            ConfigurationId = pumpdata.ConfigurationId
                        };

                        _context.Pumptransactions.Add(pumptransactiondata);  //Todo: Add PumpTransaction to database

                        requestid = pumptransactiondata.Id;


                    
                 await _context.SaveChangesAsync(cancellationToken);

                }
                return ConfirmationMessage.Success(requestid, "UploadPumpTransaction");

            }

            catch (Exception ex)
            {
                return ConfirmationMessage.Error(requestid, "UploadPumpTransaction", 500, ex.Message);

            }
        }

    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ATGCommands\TankMeasurementsCommand\CreateTankMeasurementCommand.cs

﻿using AutoMapper;
using AutoMapper.Configuration.Annotations;
using FMS.Application.Command.DatabaseCommand.ExpectedAVGCmd;
using FMS.Application.Common;
using FMS.Application.ModelsDTOs.ATG;
using FMS.Application.ModelsDTOs.ATG.Common;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Org.BouncyCastle.Asn1.Ocsp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ATGCommands.TankMeasurementsCommand
{
    public class CreateTankMeasurementCommand : IRequest<string>    
    {

        public PtsRequestDto PtsRequestDto { get; set; }
     
        
    }


    public class CreateTankMeasurementCommandHandler : IRequestHandler<CreateTankMeasurementCommand, string>
    {


        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public CreateTankMeasurementCommandHandler(GpsdataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<string> Handle(CreateTankMeasurementCommand request, CancellationToken cancellationToken)
        {
            var requestid =0;

            var tankMeasurements = new List<Tankmeasurement>();
            var allAlarmNames = request.PtsRequestDto.Packets
                               .SelectMany(p => p.Data.ToObject<TankMeasurementDto>()?.Alarms ?? new List<string>())
                               .Distinct();

            var alarms = await _context.Alarms
                              .Where(a => allAlarmNames.Contains(a.Name))
                              .ToListAsync(cancellationToken);


            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {


                    foreach (var packet in request.PtsRequestDto.Packets)
                    {
                        //deserialize the Json object to TankmeasurementDto
                        var tankdata = packet.Data.ToObject<TankMeasurementDto>();

                        if (tankdata == null) continue;

                        var tankmeasurementsdata = new Tankmeasurement
                        {
                            PacketId = packet.Id,
                            Tank = tankdata.Tank,
                            ProductUllage = tankdata.ProductUllage,
                            Ptsid = request.PtsRequestDto.PtsId,
                            DateTime = tankdata.DateTime,
                            FuelGradeId = tankdata.FuelGradeId,
                            ProductHeight = tankdata.ProductHeight,
                            WaterHeight = tankdata.WaterHeight,
                            Temperature = tankdata.Temperature,
                            ProductVolume = tankdata.ProductVolume,
                            WaterVolume = tankdata.WaterVolume,
                            ProductTcvolume = tankdata.ProductTcvolume,
                            ProductDensity = tankdata.ProductDensity,
                            ProductMass = tankdata.ProductMass,
                            TankFillingPercentage = tankdata.TankFillingPercentage,
                            ConfigurationId = tankdata.ConfigurationId,
                            Status = tankdata.Status,
                            Alarms = alarms.Where(a => tankdata.Alarms.Contains(a.Name)).ToList()
                        
                        };

                        tankMeasurements.Add(tankmeasurementsdata);
                        requestid = tankmeasurementsdata.PacketId;


                    }
                    _context.Tankmeasurements.AddRange(tankMeasurements);

                   

                    // _context.Tankmeasurements.Add(tankmeasurementsdata);
                    await _context.SaveChangesAsync(cancellationToken);
                    transaction.Commit();
                    return ConfirmationMessage.Success(requestid, "UploadTankMeasurement");

                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return ConfirmationMessage.Error(requestid, "UploadTankMeasurement", 500, ex.Message);
                }


            }
        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ConsumtionCmd\ConsumptionCreateCmd.cs

using System;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;

namespace FMS.Application.Command.DatabaseCommand.ConsumptionCmd;

public class ConsumptionCreateCmd : IRequest<Unit>

{

    public int VehicleId { get; set; }

    public decimal? TotalFuel { get; set; }

    public int? WorkingFuelAverage { get; set; }

    public int WorkingEmployee { get; set; }

    public DateTime Date { get; set; }


    public decimal? MaxSpeed { get; set; }

    public decimal? AvgSpeed { get; set; }


    public decimal? FuelLost { get; set; }

    public bool IsKmperhr { get; set; }
    public bool IsNightShift { get; set; }

    public int SiteID { get; set; }

    public decimal? TotalDistance { get; set; }

    public decimal? FlowMeterFuelUsed { get; set; }

    public decimal? FlowMeterFuelLost { get; set; }

    public decimal? FlowMeterEffiency { get; set; }

    public decimal? EngHours { get; set; }

    public decimal? FlowMeterEngineHrs { get; set; }

    public decimal? ExcessWorkingHrsCost { get; set; }


}


public class ConsumptionCmdCreateHandler : IRequestHandler<ConsumptionCreateCmd, Unit>

{

    private readonly GpsdataContext _context;
    private readonly IMapper _mapper;


    public ConsumptionCmdCreateHandler(GpsdataContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;

    }



    public async Task<Unit> Handle(ConsumptionCreateCmd request, CancellationToken cancellationToken)
    {
        var vehicleConsumption = new Vehicleconsumption
        {
            VehicleId = request.VehicleId,
            TotalFuel = request.TotalFuel,
            ExpectedConsumption = request.WorkingFuelAverage,
            EmployeeId = request.WorkingEmployee,
            Date = request.Date,
            MaxSpeed = request.MaxSpeed,
            AvgSpeed = request.AvgSpeed,
            FuelLost = request.FuelLost,
            IsKmperhr = request.IsKmperhr ? 1UL : 0UL,
            IsNightShift = request.IsNightShift ? 1UL : 0UL,
            SiteId = request.SiteID,
            TotalDistance = request.TotalDistance,
            FlowMeterFuelUsed = request.FlowMeterFuelUsed,
            FlowMeterFuelLost = request.FlowMeterFuelLost,
            FlowMeterEffiency = request.FlowMeterEffiency,
            EngHours = request.EngHours,
            FlowMeterEngineHrs = request.FlowMeterEngineHrs,
            ExcessWorkingHrsCost = request.ExcessWorkingHrsCost
        };

        _context.Vehicleconsumptions.Add(vehicleConsumption);
        await _context.SaveChangesAsync(cancellationToken);

        return Unit.Value;

    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ConsumtionCmd\Update\ComsumptionUpdate.cs

﻿using AutoMapper;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ConsumtionCmd.Update
{
    public class ComsumptionUpdateCmd : IRequest<Unit>
    {
        public int Id { get; set; }
        public int VehicleId { get; set; }
   
        public decimal? TotalFuel { get; set; }

        public int? WorkingFuelAverage { get; set; }

        public int WorkingEmployee { get; set; }

        public decimal? FuelEfficiency { get; set; }
        public DateTime Date { get; set; }
        public decimal? MaxSpeed { get; set; }
        public decimal? AvgSpeed { get; set; }
       public decimal? FuelLost { get; set; }

        public bool IsKmperhr { get; set; }

        public bool IsNightShift { get; set; }

        public int SiteID { get; set; }

        public decimal? TotalDistance { get; set; }

        public decimal? FlowMeterFuelUsed { get; set; }

        public decimal? FlowMeterFuelLost { get; set; }

        public decimal? FlowMeterEffiency { get; set; }

        public decimal? EngHours { get; set; }

        public decimal? FlowMeterEngineHrs { get; set; }

        public decimal? ExcessWorkingHrsCost { get; set; }
        public bool? isModified { get; set; }
    }


    public class ComsumptionUpdatebyKeyHandler : IRequestHandler<ComsumptionUpdateCmd,Unit>
    {


        private readonly GpsdataContext _gpsdataContext;
        private readonly IMapper _mapper;


        public ComsumptionUpdatebyKeyHandler(GpsdataContext gpsdataContext, IMapper mapper)
        {
            _gpsdataContext = gpsdataContext;
            _mapper = mapper;
        }


        public async  Task<Unit> Handle(ComsumptionUpdateCmd request, CancellationToken cancellationToken)
        {
            var comsumption = await _gpsdataContext.Vehicleconsumptions.FindAsync(request.Id);

            if(comsumption == null)
            {
                throw new Exception("Could not find the comsumption");
            }

            //map the request to the entity
            _mapper.Map(request, comsumption);

            //update the entity 
            await _gpsdataContext.SaveChangesAsync(cancellationToken);

            return Unit.Value;
 
      }

       
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\EmployeeCmd\EmployeeCreateCmd.cs

﻿using AutoMapper;
using FMS.Application.Models.Employee;
using FMS.Application.Models.Vehicle;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.EmployeeCmd
{
    public class EmployeeCreateCmd:IRequest<int>
    {
        public EmployeeDto EmployeeDto { get; set; } 
    }

    public class EmployeeCreateCmdHandler : IRequestHandler<EmployeeCreateCmd, int>
    {
        private readonly GpsdataContext context;
        private readonly IMapper _mapper;

        public EmployeeCreateCmdHandler(GpsdataContext context, IMapper mapper)
        {
            this.context = context;
            _mapper = mapper;
        }


        public Task<int> Handle(EmployeeCreateCmd request, CancellationToken cancellationToken)
        {
           var employee= _mapper.Map<Employee>(request.EmployeeDto);


            foreach (var vehicle in request.EmployeeDto.Vehicles)
            {
                var result = context.Vehicles.Find(vehicle.VehicleId);
                if (result != null)
                {
                    employee.Vehicles.Add(result);
                }
            }
            context.Employees.Add(employee);
            context.SaveChanges();
            return Task.FromResult(employee.Id);

        }
    }





}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\EmployeeCmd\EmployeeUpdateCmd.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using FMS.Application.Models.Employee;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace FMS.Application.Command.DatabaseCommand.EmployeeCmd
{
    public class EmployeeUpdateCmd : IRequest<bool>
    {
        public int ID { get; set; }
        public EmployeeDto EmployeeDto { get; set; }
    }
    public class EmployeeUpdateCmdHandler : IRequestHandler<EmployeeUpdateCmd, bool>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public EmployeeUpdateCmdHandler(GpsdataContext context,IMapper mapper)
        {
            _context = context;

            _mapper = mapper;
        }

        public async Task<bool> Handle(EmployeeUpdateCmd request, CancellationToken cancellationToken)
        {
            var employee = await _context.Employees.Include(e=>e.Vehicles)
                .FirstOrDefaultAsync(e=>e.Id == request.EmployeeDto.Id,cancellationToken);

            if (employee == null)
            {
                return false;
            }

            //use mapper fpr EmployeeDTo to Employee

            _mapper.Map(request.EmployeeDto,employee);



            employee.Vehicles.Clear();

            foreach(var vehicle in request.EmployeeDto.Vehicles)
            {
                var result = await _context.Vehicles.FindAsync(vehicle.VehicleId);
                if(result != null)
                {
                    employee.Vehicles.Add(result);
                }
            }

            _context.Employees.Update(employee);




            await _context.SaveChangesAsync(cancellationToken);

            return true;
            }
    }



}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ExpectedAVGCmd\ExpectedAVGCreateCmd.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ExpectedAVGCmd
{
    public class ExpectedAVGCreateCmd : IRequest<(List<ExpectedAVGDto> created, List<ExpectedAVGDto> duplicates)>
    {

        public List<ExpectedAVGDto> ExpectedAVGDto { get; set; }
    }

    public class ExpectedAVGCreateCmdHandler : IRequestHandler<ExpectedAVGCreateCmd, (List<ExpectedAVGDto> created, List<ExpectedAVGDto> duplicates)>
    {
        private readonly GpsdataContext context;

        private readonly IMapper _mapper;
        private readonly ILogger _logger;

        public ExpectedAVGCreateCmdHandler(GpsdataContext context, IMapper mapper , ILogger<ExpectedAVGCreateCmdHandler> logger )
        {
            this.context = context;
            _mapper = mapper;
            _logger = logger;
        }

        public async Task<(List<ExpectedAVGDto> created, List<ExpectedAVGDto> duplicates)> Handle(ExpectedAVGCreateCmd request, CancellationToken cancellationToken)
        {
            var createdExpectedAVGs = new List<ExpectedAVGDto>();
            var duplicates = new List<ExpectedAVGDto>();

            foreach(var dto in request.ExpectedAVGDto)
            {
                bool isDuplicate =await  context.Expectedaverages.AnyAsync(e => e.VehicleId == dto.VehicleId &&
                                                     e.SiteId == dto.SiteId &&
                                                      e.ExpectedAverageClassificationId == dto.ExpectedAverageClassificationId);


                if (!isDuplicate)
                {
                    var expectedAVG = new Expectedaverage
                    {
                        VehicleId = dto.VehicleId,
                        ExpectedAverageClassificationId = dto.ExpectedAverageClassificationId,
                        ExpectedAverageValue = dto.ExpectedAverageValue,
                        SiteId = dto.SiteId ?? 0

                    };
                    context.Expectedaverages.Add(expectedAVG);
                    try
                    {
                        await context.SaveChangesAsync(cancellationToken);
                        createdExpectedAVGs.Add(_mapper.Map<ExpectedAVGDto>(expectedAVG));

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error saving expected average: {ex.Message}");
                    }


                }
                else
                {
                    duplicates.Add(dto);
                }
         
    }


            return (createdExpectedAVGs, duplicates);
        }

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ExpectedAVGCmd\ExpectedAVGUpdateCmd.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ExpectedAVGCmd
{
    public class ExpectedAVGUpdateCmd : IRequest<bool>
    {
        public int Id { get; set; }

        public  ExpectedAVGDto ExpectedAVGDto { get; set; }
    }

    public class ExpectedAVGUpdateCmdHandler : IRequestHandler<ExpectedAVGUpdateCmd, bool>
    {

        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;
        

        public ExpectedAVGUpdateCmdHandler(GpsdataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<bool> Handle(ExpectedAVGUpdateCmd request, CancellationToken cancellationToken)
        {
            //find  exsisting record
            var results = await _context.Expectedaverages.FindAsync(request.Id,cancellationToken);
                
            if (results == null)
            {
                return false;
            }
                
            //user mapper for ExpectedAVGDto to ExpectedAVG
            _mapper.Map(request.ExpectedAVGDto, results);
            

            _context.Expectedaverages.Update(results);
            try
            {
                await _context.SaveChangesAsync(cancellationToken);
            }catch (DbUpdateException ex)
            {
                throw;
            }
            return true;
        }
    }
}




//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ExptAVGClassificationCmd\ExpectedAVGClassificationUpdateCmd.cs

﻿using AutoMapper;
using FMS.Application.Common;
using FMS.Application.Models;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ExptAVGClassification
{
    public class ExpectedAVGClassificationUpdateCmd :IRequest<int>
    {

        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;

    }

    public class ExpectedAVGClassificationUpdateCmdHandler : IRequestHandler<ExpectedAVGClassificationUpdateCmd, int>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public ExpectedAVGClassificationUpdateCmdHandler(GpsdataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<int> Handle(ExpectedAVGClassificationUpdateCmd request, CancellationToken cancellationToken)
        {
            var entity = await _context.Expectedaverageclassifications.FindAsync(request.Id, cancellationToken);

            if (entity == null)
            {
                throw new NotFoundException(nameof(Expectedaverageclassification), request.Id);
            }

            entity.Name = request.Name;
            entity.Description = request.Description;
            _context.Expectedaverageclassifications.Update(entity);
            await _context.SaveChangesAsync(cancellationToken);

            return entity.Id;
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\ExptAVGClassificationCmd\ExptAVGClassificationCreateCmd.cs

﻿using AutoMapper;
using FMS.Application.Models;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ExptAVGClassification
{
    public class ExptAVGClassificationCreateCmd : IRequest<ExpectedAVGClassficationDTO>
    {

        public ExpectedAVGClassficationDTO ExpctAVGClassficationDTO { get; set; }
    }

    public class ExptAVGClassificationCreateCmdHandler : IRequestHandler<ExptAVGClassificationCreateCmd, ExpectedAVGClassficationDTO>
    {
        private readonly GpsdataContext context;

        private readonly IMapper _mapper;
        public ExptAVGClassificationCreateCmdHandler(GpsdataContext context, IMapper mapper)
        {
            this.context = context;
            _mapper = mapper;
        }


        public async Task<ExpectedAVGClassficationDTO> Handle(ExptAVGClassificationCreateCmd request, CancellationToken cancellationToken)
        {
            var expectedAVGclassfication = _mapper.Map<Expectedaverageclassification>(request.ExpctAVGClassficationDTO);
            context.Expectedaverageclassifications.Add(expectedAVGclassfication);
            await context.SaveChangesAsync(cancellationToken);
            return _mapper.Map<ExpectedAVGClassficationDTO>(expectedAVGclassfication);
        }
    }
}
    


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\UpdateVehicle\UpdatevehicleCommand.cs

﻿using FMS.Domain.Entities;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.UpdateVehicle
{
    /// <summary>
    /// Upate vehicle Commmand
    /// </summary>
    public class UpdatevehicleCommand : IRequest<bool>
    {
        public int VehicleId { get; set; }
        public string HyoungNo { get; set; }
        public int? VehicleTypeId { get; set; }
        public int? VehicleModelId { get; set; }
        public int? VehicleManufacturerId { get; set; }
        public string Yom { get; set; }
        public decimal ExpectedAveraged { get; set; }
        public int? DefaultEmployeeId { get; set; }
        public int? WorkingSiteId { get; set; }
        public decimal? ExcessWorkingHrCost { get; set; }
        public bool AverageKmL { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\UpdateVehicle\UpdateVehicleCommandHandler.cs

﻿using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.UpdateVehicle
{
    public class UpdateVehicleCommandHandler : IRequestHandler<UpdatevehicleCommand, bool>
    {

        private readonly GpsdataContext _context;

        public UpdateVehicleCommandHandler(GpsdataContext context)
        {
            _context = context;
        }

        public async Task<bool> Handle(UpdatevehicleCommand request, CancellationToken cancellationToken)
        {
            //find the existing vehicle in the database
            var existingVehicle = await _context.Vehicles.FindAsync(request.VehicleId);


            if(existingVehicle ==null)
            {
                return false;
            }

               //update the properties of the vehicle using properties of the request
                existingVehicle.VehicleModelId = request.VehicleModelId;
               // existingVehicle.WorkingExpectedAverage = request.ExpectedAveraged;
                existingVehicle.WorkingSiteId = request.WorkingSiteId;
                existingVehicle.ExcessWorkingHrCost = request.ExcessWorkingHrCost;
                existingVehicle.DefaultEmployeeId = request.DefaultEmployeeId;  
                existingVehicle.VehicleManufacturerId = request.VehicleManufacturerId;
                existingVehicle.AverageKmL = request.AverageKmL;
                existingVehicle.VehicleTypeId = request.VehicleTypeId.Value;


            //save the changes
            _context.Vehicles.Update(existingVehicle);

            await _context.SaveChangesAsync(cancellationToken);


            return true;

        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\DatabaseCommand\VehicleModelCmd\CreateVehicleModelCommand.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.VehicleModelCmd
{
    public class CreateVehicleModelCommand : IRequest<int>
    {
        // Add properties for each required field in your vehicle model entity
        public string Name { get; set; }
        public int ManufacturerId { get; set; }
    }
    public class CreateVehicleModelCommandHandler : IRequestHandler<CreateVehicleModelCommand, int>
    {
        private readonly GpsdataContext _context;

        public CreateVehicleModelCommandHandler(GpsdataContext context)
        {
            _context = context;
        }

        public async Task<int> Handle(CreateVehicleModelCommand request, CancellationToken cancellationToken)
        {
            var vehicleModel = new Vehiclemodel
            {
                Name = request.Name,
                ManufacturerId = request.ManufacturerId,
                // Set other properties as needed
            };

            _context.Vehiclemodels.Add(vehicleModel);
            await _context.SaveChangesAsync(cancellationToken);

            return vehicleModel.Id;
        }
    }



}



//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Command\SignalCommand\UploadStatusCommandHandler.cs

﻿using FMS.Application.ModelsDTOs.ATG.Common;
using FMS.Domain.ATGStatus;
using FMS.Services.Helper;
using MediatR;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.SignalCommand
{

    public class UploadStatusCommand : IRequest<UploadStatus>
    {
        public JToken Data { get; set; }   
    }

    public class UploadStatusCommandHandler : IRequestHandler<UploadStatusCommand,UploadStatus>
    {
      public async Task<UploadStatus> Handle(UploadStatusCommand request, CancellationToken cancellationToken)
        {
            var atgStatusService = new ATGStatusService();
            return  atgStatusService.DeserializeUploadStatus(request.Data.ToString());
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Common\ConfirmationMessage.cs

﻿using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Common
{
         /// <summary>
        /// Provides methods to generate success and error confirmation messages in JSON format.
        /// </summary>
        public static class ConfirmationMessage
        {
            /// <summary>
            /// Generates a success confirmation message in JSON format.
            /// </summary>
            /// <param name="id">The ID of the message.</param>
            /// <param name="type">The type of the message.</param>
            /// <param name="message">The message content (optional, default value is "OK").</param>
            /// <returns>A JSON string representing the success confirmation message.</returns>
            public static string Success(int id ,string type, string message = "OK")
            {
                return JsonConvert.SerializeObject(new
                {
                    Protocol = "jsonPTS",
                    Packets = new[]
                    {
                        new {Id=id,Type = type,Message = "OK" }
                    }
                });
            }

            /// <summary>
            /// Generates an error message in JSON format.
            /// </summary>
            /// <param name="id">The ID of the error.</param>
            /// <param name="type">The type of the error.</param>
            /// <param name="code">The error code.</param>
            /// <param name="message">The error message.</param>
            /// <returns>A JSON string representing the error message.</returns>
            public static string Error(int id, string type, int code, string message)
            {
                return JsonConvert.SerializeObject(new
                {
                    Protocol = "jsonPTS",
                    Packets = new[]
                    {
                        new {Id=id,Type = type,Code =code,  Message = message }
                    }
                });
            }
        }
}




//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Common\NotFoundException.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Common
{
    public class NotFoundException:Exception
    {
        public NotFoundException(string name, object key)
            : base($"Entity \"{name}\" ({key}) was not found.")
        {

        }
    }
    

    }


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Common\Interface\ICommand.cs

﻿using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Application.Common.Interface
{
    public interface ICommand
    {
        
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Common\Interface\IQuery.cs

﻿using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Application.Common.Interface
{
    public interface IQuery <TResult>
    {
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Common\Interfacehandler\ICommandhandler.cs

﻿using FMS.Application.Common.Interface;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Common.Interfacehandler
{
    public interface ICommandHandler<TCommand> where TCommand : ICommand
    {
        Task HandleAsync(TCommand command);
    }

}



//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Common\Interfacehandler\IQueryHandler.cs

﻿using FMS.Application.Common.Interface;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Common.Interfacehandler
{
    public interface IQueryHandler<TQuery, TResult> where TQuery : IQuery<TResult>
    {
        Task<TResult> Handle(TQuery query);
    }
   
    }


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\CommonInterface\IGpsGateAccessDirectory.cs

﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.CommonInterface
{
    public interface IGpsGateAccessDirectory
    {

        public Task<string> LoginAsync(string userName, string password, int applicationID);

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\MappingProfile\ATGMappingProfile.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ATG;
using FMS.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.MappingProfile
{
    public class ATGMappingProfile:Profile
    {
        public ATGMappingProfile()
        {
            CreateMap<InTankDeliveryDTO,Intankdelivery>().ReverseMap();
            //CreateMap<Pumptransaction, PumpTransactionDto>().ReverseMap();
           CreateMap<AlertRecordDTO, Alertrecord>().ReverseMap();
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\MappingProfile\MappingProfile.cs

﻿using AutoMapper;
using FMS.Application.Command.DatabaseCommand.ConsumtionCmd.Update;
using FMS.Application.Models;
using FMS.Application.Models.Employee;
using FMS.Application.Models.Vehicle;
using FMS.Application.ModelsDTOs.ATG;
using FMS.Application.ModelsDTOs.Consumption;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Domain.Entities;
using FMS.Services.GPSServiceModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.MappingProfile
{
    public class MappingProfile:Profile
    {
        public MappingProfile() { 


           
    
        
        CreateMap<Vehicle,VehicleListDTO>().ReverseMap();
         CreateMap<Employee,EmployeeDto>()
                .ForMember(dest => dest.SiteId, opt => opt.MapFrom(src => src.SiteId))
                .ForMember(dest => dest.FullName, opt => opt.MapFrom(src => src.FullName))
                .ForMember(dest => dest.EmployeeWorkNo, opt => opt.MapFrom(src => src.EmployeeWorkNo))
               .ForMember(dest => dest.EmployeephoneNumber, opt => opt.MapFrom(src => src.EmployeephoneNumber))
                .ForMember(dest => dest.Employeestatus, opt => opt.MapFrom(src => src.Employeestatus))
                  .ForMember(dest => dest.NationalId, opt => opt.MapFrom(src => src.NationalId))         
                .ReverseMap();

            CreateMap<Vehicle, SimpleVehicleDto>()
                .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
                .ForMember(dest => dest.HyoungNo, opt => opt.MapFrom(src => src.HyoungNo)).ReverseMap();
            
         CreateMap<Vehiclemodel, VehicleModelDto>()
                       .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                       .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
                       .ForMember(dest => dest.ManufacturerId, opt => opt.MapFrom(src => src.ManufacturerId));

        CreateMap<VehicleModelDto, Vehiclemodel>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
                .ForMember(dest => dest.ManufacturerId, opt => opt.MapFrom(src => src.ManufacturerId));


            CreateMap <Expectedaverage,ExpectedAVGDto>()
                .ForMember(dest=>dest.Id,opt=>opt.MapFrom(src=>src.Id))
                .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
                .ForMember(dest => dest.ExpectedAverageValue, opt => opt.MapFrom(src => src.ExpectedAverageValue))
                .ForMember(dest => dest.ExpectedAverageClassificationId, opt => opt.MapFrom(src => src.ExpectedAverageClassificationId))       
                //.ForMember(dest => dest.ExpectedAverageclassificationName, opt => opt.MapFrom(src => src.ExpectedAverageClassification.Name))
                
                .ReverseMap();

            CreateMap<Expectedaverageclassification, ExpectedAVGClassficationDTO>().ReverseMap();


            CreateMap<Vehicleconsumption, HistoryConsumptionDTO>()
      .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
      .ForMember(dest => dest.TotalFuel, opt => opt.MapFrom(src => src.TotalFuel))
      .ForMember(dest => dest.ExpectedAveraged, opt => opt.MapFrom(src => src.ExpectedConsumption))
      .ForMember(dest => dest.Employee, opt => opt.MapFrom(src => src.Employee != null ? src.Employee.FullName : string.Empty))
      .ForMember(dest => dest.Site, opt => opt.MapFrom(src => src.Site.Name))
      .ForMember(dest => dest.ExcessWorkingHrCost, opt => opt.MapFrom(src => src.ExcessWorkingHrsCost))
      .ForMember(dest => dest.Date, opt => opt.MapFrom(src => src.Date))
      .ForMember(dest => dest.MaxSpeed, opt => opt.MapFrom(src => src.MaxSpeed))
      .ForMember(dest => dest.AvgSpeed, opt => opt.MapFrom(src => src.AvgSpeed))
      .ForMember(dest => dest.TotalDistance, opt => opt.MapFrom(src => src.TotalDistance))
      .ForMember(dest => dest.FlowMeterFuelUsed, opt => opt.MapFrom(src => src.FlowMeterFuelUsed))
      .ForMember(dest => dest.FlowMeterFuelLost, opt => opt.MapFrom(src => src.FlowMeterFuelLost))
      .ForMember(dest => dest.FlowMeterEngineHrs, opt => opt.MapFrom(src => src.FlowMeterEngineHrs))
      .ForMember(dest => dest.IsAverageKm, opt => opt.MapFrom(src => src.IsKmperhr))
      .ForMember(dest => dest.IsNightShift, opt => opt.MapFrom(src => src.IsNightShift))
            .ForMember(dest => dest.EngHours, opt => opt.MapFrom(src => src.EngHours))
                  .ForMember(dest => dest.Comments, opt => opt.MapFrom(src => src.Comments))
                        .ForMember(dest => dest.ExcessWorkingHrCost, opt => opt.MapFrom(src => src.ExcessWorkingHrsCost));


;




            CreateMap<ComsumptionUpdateCmd,Vehicleconsumption>()
     .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
    .ForMember(dest => dest.TotalFuel, opt => opt.MapFrom(src => src.TotalFuel))
    .ForMember(dest => dest.ExpectedConsumption, opt => opt.MapFrom(src => src.ExcessWorkingHrsCost)) //watch out for this one
    .ForMember(dest => dest.EmployeeId, opt => opt.MapFrom(src => src.WorkingEmployee))
    .ForMember(dest => dest.Date, opt => opt.MapFrom(src => src.Date))
    .ForMember(dest => dest.MaxSpeed, opt => opt.MapFrom(src => src.MaxSpeed))
    .ForMember(dest => dest.AvgSpeed, opt => opt.MapFrom(src => src.AvgSpeed))
    .ForMember(dest => dest.TotalDistance, opt => opt.MapFrom(src => src.TotalDistance))
    .ForMember(dest => dest.IsKmperhr, opt => opt.MapFrom(src => src.IsKmperhr))
    .ForMember(dest => dest.FuelLost, opt => opt.MapFrom(src => src.FuelLost))
    .ForMember(dest => dest.FlowMeterFuelUsed, opt => opt.MapFrom(src => src.FlowMeterFuelUsed))
    .ForMember(dest => dest.FlowMeterEffiency, opt => opt.MapFrom(src => src.FlowMeterEffiency))
     .ForMember(dest => dest.FuelEfficiency, opt => opt.MapFrom(src => src.FuelEfficiency))
    .ForMember(dest => dest.EngHours, opt => opt.MapFrom(src => src.EngHours))
    //.ForMember(dest => dest.IsModified, opt => opt.MapFrom(src => src.IsModified))

    .ForMember(dest => dest.FlowMeterEngineHrs, opt => opt.MapFrom(src => src.FlowMeterEngineHrs)).ReverseMap();




            CreateMap<Vehicleconsumption, VehicleConsumptionInfoDTO>()
    .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
    .ForMember(dest => dest.TotalFuel, opt => opt.MapFrom(src => src.TotalFuel))
    .ForMember(dest=> dest.HyoungNo,opt=>opt.MapFrom(src=>src.Vehicle.HyoungNo))
    //.ForMember(dest=>dest.WorkingExpectedAverage,opt=>opt.MapFrom(src=>src.Vehicle.WorkingExpectedAverage))
    .ForMember(dest => dest.VehicleType , opt => opt.MapFrom(src=>src.Vehicle.VehicleType.Abbvr))
    .ForMember(dest => dest.VehicleManufacturer, opt => opt.MapFrom(src => src.Vehicle.VehicleManufacturer.Name))
    .ForMember(dest => dest.VehicleModel, opt => opt.MapFrom(src => src.Vehicle.VehicleModel.Name))
    //.ForMember(dest=> dest.WorkingEmployeesID,opt=>opt.MapFrom(src=>src.EmployeeId))
    //ForMember(dest => dest.ExpectedAveraged, opt => opt.MapFrom(src => src.ExpectedAveraged))
    .ForMember(dest => dest.Date, opt => opt.MapFrom(src => src.Date))
    .ForMember(dest => dest.MaxSpeed, opt => opt.MapFrom(src => src.MaxSpeed))
    .ForMember(dest => dest.AvgSpeed, opt => opt.MapFrom(src => src.AvgSpeed))
    .ForMember(dest => dest.TotalDistance, opt => opt.MapFrom(src => src.TotalDistance))
    .ForMember(dest => dest.IsAverageKm, opt => opt.MapFrom(src => src.IsKmperhr))
    .ForMember(dest => dest.FuelLost, opt => opt.MapFrom(src => src.FuelLost))
    .ForMember(dest => dest.FlowMeterFuelUsed, opt => opt.MapFrom(src => src.FlowMeterFuelUsed))
    .ForMember(dest => dest.FlowMeterEffiency, opt => opt.MapFrom(src => src.FlowMeterEffiency))
    //ForMember(dest => dest.FuelEfficiency, opt => opt.MapFrom(src => src.FuelEfficiency))
    .ForMember(dest => dest.EngHours, opt => opt.MapFrom(src => src.EngHours))
    .ForMember(dest => dest.IsModified, opt => opt.MapFrom(src => src.IsModified))
    .ForMember(dest => dest.Site, opt => opt.MapFrom(src =>src.Site))
    .ForMember(dest => dest.FlowMeterEngineHrs, opt => opt.MapFrom(src => src.FlowMeterEngineHrs)).ReverseMap();
   



        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\ExpctAVGClassficationDTO.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.Models
{
    public class ExpectedAVGClassficationDTO
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("description")]
         public string Description { get; set; } = string.Empty;


    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\VehicleConsumptionInfoDTO.cs

﻿using FMS.Application.Models.Employee;
using FMS.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Models
{
    public class VehicleConsumptionInfoDTO
    {
              

          public int Id { get; set; }
            public int VehicleId { get; set; }


          
            public decimal? TotalFuel
              { get;set; }
            public string HyoungNo { get; set; }
            public String VehicleType { get; set; }
            public string VehicleModel { get; set; }
            public string VehicleManufacturer { get; set; }
            public decimal ExpectedAveraged { get; set; }
            public List<EmployeeDto> DefaultEmployees { get; set; }
            public string Site { get; set; }
            public decimal? ExcessWorkingHrCost { get; set; }
           public DateTime Date { get; set; }

           public decimal? MaxSpeed { get; set; }

           public decimal? AvgSpeed { get; set; }

           public decimal TotalDistance { get; set; }

          public decimal? FuelLost { get; set; }

        public bool IsAverageKm { get; set; }

        //if the vehicle is using averagekm or l/hrs


        public decimal? FlowMeterFuelUsed { get; set; }

        public decimal? FlowMeterFuelLost { get; set; }

        public decimal? FlowMeterEffiency { get;set; }
        public decimal? FuelEfficiency { get; set; }
        public decimal? EngHours { get; set; }

        public decimal? FlowMeterEngineHrs { get; set; }

        public bool IsNightShift { get; set; }

        public string Comments { get; set; }

        public bool IsModified { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\VehicleModelDTO.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.Models
{
    public class VehicleModelDto
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        public string Name { get; set; }
        public int ManufacturerId { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\ATG\AlertRecordDTO.cs

using System;
using System.Collections.Generic;

namespace FMS.Application.ModelsDTOs.ATG;

public partial class AlertRecordDTO
{
    public int AlertId { get; set; }

    public DateTime DateTime { get; set; }

    public string DeviceType { get; set; } = null!;

    public int DeviceNumber { get; set; }

    public string State { get; set; } = null!;

    public int Code { get; set; }

    public string ConfigurationId { get; set; }

    public string Ptsid { get; set; } = null!;

    public int PacketId { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\ATG\InTankDeliveryDTO.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.ModelsDTOs.ATG
{
    public class InTankDeliveryDTO
    {
        public int DeliveryId { get; set; }

        public int Tank { get; set; }

        public int FuelGradeId { get; set; }

        public string FuelGradeName { get; set; }

        public DateTime? StartDateTime { get; set; }

        public float? StartProductHeight { get; set; }

        public float? StartWaterHeight { get; set; }

        public float? StartTemperature { get; set; }

        public float? StartProductVolume { get; set; }

        public float? StartProductTcvolume { get; set; }

        public float? StartProductDensity { get; set; }

        public float? StartProductMass { get; set; }

        public DateTime? EndDateTime { get; set; }

        public float? EndProductHeight { get; set; }

        public float? EndWaterHeight { get; set; }

        public float? EndTemperature { get; set; }

        public float? EndProductVolume { get; set; }

        public float? EndProductTcvolume { get; set; }

        public float? EndProductDensity { get; set; }

        public float? EndProductMass { get; set; }

        public float? AbsoluteProductHeight { get; set; }

        public float? AbsoluteWaterHeight { get; set; }

        public float? AbsoluteTemperature { get; set; }

        public float? AbsoluteProductVolume { get; set; }

        public float? AbsoluteProductTcvolume { get; set; }

        public float? AbsoluteProductDensity { get; set; }

        public float? AbsoluteProductMass { get; set; }

        public float? PumpsDispensedVolume { get; set; }

        public string ConfigurationId { get; set; }
   
 
    }
}



//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\ATG\PumpTransactionDto.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.ModelsDTOs.ATG
{
    public class PumpTransactionDto
    {  
        public DateTime DateTimeStart { get; set; }
        public DateTime DateTime { get; set; }
        public int Pump { get; set; }
        public int Nozzle { get; set; }
        public int FuelGradeId { get; set; }
        public string FuelGradeName { get; set; }
        public int Transaction { get; set; }
        public decimal Volume { get; set; }
        public decimal TCVolume { get; set; }
        public decimal Price { get; set; }
        public decimal Amount { get; set; }
        public decimal TotalVolume { get; set; }
        public decimal TotalAmount { get; set; }
        public string Tag { get; set; }
        public int UserId { get; set; }
        public string ConfigurationId { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\ATG\TankMeasurementDto.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using FMS.Domain.Entities;
using Newtonsoft.Json;

namespace FMS.Application.ModelsDTOs.ATG
{
    public class TankMeasurementDto
    {

        [JsonProperty("DateTime")]
        public DateTime DateTime { get; set; }

        public int Tank { get; set; }
        public string Status { get; set; }
        public int FuelGradeId { get; set; }

        public double? ProductHeight { get; set; }
        public double? ProductUllage { get; set; }
        public double? ProductTcvolume { get; set; }

        public double? ProductDensity { get; set; }
        public double? ProductMass { get; set; }
        public double? ProductVolume { get; set; }

        public double? WaterHeight { get; set; }

        public double? Temperature { get; set; }

        public double? WaterVolume { get; set; }
               

        public int? TankFillingPercentage { get; set; }

        public string ConfigurationId { get; set; }

        public List<string> Alarms { get; set; }



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\ATG\Common\PtsRequestDto.cs

﻿using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.ModelsDTOs.ATG.Common
{
    public class PtsRequestDto
    {
        public string Protocol { get; set; }
        public string PtsId { get; set; }
        public List<PacketDto> Packets { get; set; }
    }

    public class PacketDto
    {
        public int Id { get; set; }
        public string Type { get; set; }
        public JObject Data { get; set; } // List of JObject
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\Consumption\HistoryConsumptionDTO.cs

﻿using FMS.Application.Models.Employee;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.ModelsDTOs.Consumption
{
    public class HistoryConsumptionDTO
    {
        public int Id { get; set; }
        public int VehicleId { get; set; }

        public decimal? TotalFuel
        { get; set; }
     
        public decimal ExpectedAveraged { get; set; }
        public string Employee { get; set; }
        public string Site { get; set; }
        public decimal? ExcessWorkingHrCost { get; set; }
        public DateTime Date { get; set; }

        public decimal? MaxSpeed { get; set; }

        public decimal? AvgSpeed { get; set; }

        public decimal TotalDistance { get; set; }

        public decimal? FuelLost { get; set; }

        public bool IsAverageKm { get; set; }

        public decimal? FlowMeterFuelUsed { get; set; }

        public decimal? FlowMeterFuelLost { get; set; }

        public decimal? FlowMeterEffiency { get; set; }
        public decimal? FuelEfficiency { get; set; }
        public decimal? EngHours { get; set; } = 0;

        public decimal? FlowMeterEngineHrs { get; set; }

        public bool IsNightShift { get; set; }

        public string Comments { get; set; }

        public bool IsModified { get; set; }


    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\Employee\EmployeeDTO.cs

﻿#nullable disable
using FMS.Application.Models.Vehicle;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.Models.Employee
{
    public class EmployeeDto
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("fullName")]
        public string FullName { get; set; }

        [JsonPropertyName("employeeWorkNo")]
        public string EmployeeWorkNo { get; set; } = string.Empty;

        [JsonPropertyName("employeephoneNumber")]
        public string EmployeephoneNumber { get; set; } = string.Empty;

        [JsonPropertyName("nationalId")]
        public long? NationalId { get; set; }

        [JsonPropertyName("employeestatus")]
        public string Employeestatus { get; set; } = "Active";

        [JsonPropertyName("siteId")]
        public int? SiteId { get; set; }

        //<todo> this is wrong: change from SimplevehicleDto to Vehicle
        //</todo>
        /// <summary>
        /// this is wrong
        /// </summary>
        [JsonPropertyName("vehicles")]
        public ICollection<SimpleVehicleDto> Vehicles { get; set; } = new List<SimpleVehicleDto>();
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\ExpectedAVG\ExpectedAVGDto.cs

﻿using FMS.Application.Models.Vehicle;
using FMS.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.ModelsDTOs.ExpectedAVG
{
    public class ExpectedAVGDto
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("ExpectedAverageValue")]
        public decimal ExpectedAverageValue { get; set; }

        [JsonPropertyName("ExpectedAverageclassificationName")]
        public string ExpectedAverageclassificationName { get; set; }

       [JsonPropertyName("combinedExpectedAverage")]
   
    public string CombinedExpectedAverage => $"{ExpectedAverageclassificationName} {ExpectedAverageValue}";

        [JsonPropertyName("SiteName")]
        public string SiteName { get; set; }
        
        [JsonPropertyName("expectedAverageClassificationId")]
        public int ExpectedAverageClassificationId { get; set; }

        [JsonPropertyName("vehicleId")]
        public int VehicleId { get; set; }

        [JsonPropertyName("site")]
        public int? SiteId { get; set; }



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\ExpectedAVG\ExpectedAVGVehicleDetailsDTO.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.ModelsDTOs.ExpectedAVG
{
    public class ExpectedAVGVehicleDetailsDTO
    {

        public int id { get; set; }
        public string HyoungNo { get; set; } = null!;

        public int? vehicleID { get; set; }

        public int? expectedAverageClassificationId { get; set; } 

        public string expectedAverageClassificationName { get; set; } = null!;

        public decimal expectedAveragevalue { get; set; }
        public int? siteId { get; set; }

        public string site { get; set; } = null!;

        public string vehicleModel { get; set; } = null!;

        public string vehicleManufacturer { get; set; } = null!;
        public string vehicleType { get; set; } =   null!;

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\Vehicle\SimpleVehicleDto.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.Models.Vehicle
{
    public class SimpleVehicleDto
    {
        [JsonPropertyName("vehicleId")]
        public int VehicleId { get; set; }

        [JsonPropertyName("hyoungNo")]
        public string HyoungNo { get; set; }

    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\ModelsDTOs\Vehicle\VehicleListDTO.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Models.Vehicle
{
    public class VehicleListDTO
    {
        public int VehicleId { get; set; }

        public string HyoungNo { get; set; } = null!;

        public int VehicleTypeId { get; set; }

        public int? VehicleModelId { get; set; }

        public int? VehicleManufacturerId { get; set; }

        //change to date
        /// <summary>
        /// year of manufacture ...change to date
        /// </summary>
        public string Yom { get; set; }

        public decimal ExpectedAveraged { get; set; }


        public int? DefaultEmployeeId { get; set; }

        public int? WorkingSiteId { get; set; }

        public decimal? ExcessWorkingHrCost { get; set; }

        /// <summary>
        /// Change if vehicle is using km/l or l/hr
        /// </summary>
        public bool AverageKmL { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\Consumption\GetConsumptionByVehicleQuery.cs

﻿using AutoMapper;
using FMS.Application.Models;
using FMS.Application.ModelsDTOs.Consumption;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.Consumption
{
    public class GetHistoryConsumptionByVehicleQuery : IRequest<List<HistoryConsumptionDTO>>
    {
        public int VehicleId { get; set; }
        public int Entry { get; set; } = 5;

        public DateTime startDate { get; set; }
    }

    public class GetCosumptionByVehicleQueryHandler : IRequestHandler<GetHistoryConsumptionByVehicleQuery, List<HistoryConsumptionDTO>>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;
        private readonly ILogger _logger;

        public GetCosumptionByVehicleQueryHandler(GpsdataContext gpsdataContext, IMapper mapper, ILogger<GetCosumptionByVehicleQueryHandler> logger)
        {
            _context = gpsdataContext;
            _mapper = mapper;
            _logger = logger;
        }

        public async Task<List<HistoryConsumptionDTO>> Handle(GetHistoryConsumptionByVehicleQuery request, CancellationToken cancellationToken)
        {
            try
            {

                var consumptiondata = await _context.Vehicleconsumptions.
                                        Include(x=>x.Site).
                                        Include(e=>e.Employee).
                                        Where (v => v.VehicleId == request.VehicleId && v.Date.Date <=request.startDate.Date  ).
                                     OrderByDescending(v => v.Date.Date).Take(request.Entry).ToListAsync(cancellationToken);
                return _mapper.Map<List<HistoryConsumptionDTO>>(consumptiondata);

            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw new Exception(ex.Message); // 
            }


        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\EmployeeQuery\GetEemployeeBySite.cs

using Autofac.Features.ResolveAnything;
using AutoMapper;
using FMS.Application.Models.Employee;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;


namespace FMS.Application.Queries.Database.EmployeeQuery
{

 public class GetEmployeeBySiteIdQuery : IRequest<List<EmployeeDto>>
 {
     public int SiteId { get; set; }
 }


public class GetEmployeeBySiteIdQueryHandler : IRequestHandler<GetEmployeeBySiteIdQuery, List<EmployeeDto>>
{
    private readonly GpsdataContext _context;
    private readonly IMapper _mapper;
    public GetEmployeeBySiteIdQueryHandler(GpsdataContext context, IMapper mapper)
    {
        _mapper = mapper;
        _context = context;
    }

    public async Task<List<EmployeeDto>> Handle(GetEmployeeBySiteIdQuery request, CancellationToken cancellationToken)
    {
        var employees = await _context.Employees
            .Include(e => e.Vehicles)
            .Where(e => e.SiteId == request.SiteId)
            .ToListAsync(cancellationToken);

        return _mapper.Map<List<EmployeeDto>>(employees);

    }
}

}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\EmployeeQuery\GetEmployee.cs

﻿using Autofac.Features.ResolveAnything;
using AutoMapper;
using FMS.Application.Models.Employee;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.EmployeeQuery
{
    public class GetEmployeeQuery:IRequest<List<EmployeeDto>>
    {

    }
    /// <summary>
    /// Get all active employees
    /// </summary>
    public class GetEmployeeHandler : IRequestHandler<GetEmployeeQuery, List<EmployeeDto>>
    {

        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;
        public GetEmployeeHandler(GpsdataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }

        /// <summary>
        /// Return all active employees
        /// </summary>
        /// <param name="request"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public async Task<List<EmployeeDto>> Handle(GetEmployeeQuery request, CancellationToken cancellationToken)
        {
            var employees= await _context.Employees
                .Include(e => e.Vehicles)
                .Where(e => e.Employeestatus == "Active")
                .ToListAsync(cancellationToken);

            return _mapper.Map<List<EmployeeDto>>(employees);

        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\EmployeeQuery\GetEmployeeByIdQuery.cs

﻿using AutoMapper;
using FMS.Application.Models.Employee;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.EmployeeQuery
{
    public class GetEmployeeByIdQuery :IRequest<EmployeeDto>

    {
        public int Id { get; set; }
    }

    public class GetEmployeeByIdQueryHandler : IRequestHandler<GetEmployeeByIdQuery, EmployeeDto>
    {
        private readonly IMapper _mapper;
        private readonly GpsdataContext _context;

        public GetEmployeeByIdQueryHandler(IMapper mapper, GpsdataContext context)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<EmployeeDto> Handle(GetEmployeeByIdQuery request, CancellationToken cancellationToken)
        {
            var result = await _context.Employees
                .Include(e=>e.Vehicles)
                .FirstOrDefaultAsync(e=>e.Id==request.Id,cancellationToken);


            if (result == null)
            {
                return null;
            }
            var employeeDto = _mapper.Map<EmployeeDto>(result);
            return employeeDto;
        }


    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\ExpectedAvg\GetExpectAVGClassificationlist.cs

﻿using AutoMapper;
using FMS.Application.Models;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.ExpectedAvg
{
    public class GetExpectAVGClassificationlist:IRequest<List<ExpectedAVGClassficationDTO>>
    {

    }

    public class GetExpectAVGClassificationlistHandler : IRequestHandler<GetExpectAVGClassificationlist, List<ExpectedAVGClassficationDTO>>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper; 

        public GetExpectAVGClassificationlistHandler(GpsdataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }


        public async Task<List<ExpectedAVGClassficationDTO>> Handle(GetExpectAVGClassificationlist request, CancellationToken cancellationToken)
        {

            var results = await _context.Expectedaverageclassifications.ToListAsync(cancellationToken);

            return _mapper.Map<List<ExpectedAVGClassficationDTO>>(results);
       
        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\ExpectedAvg\GetExpectedAverageByVehicleBySite.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.ExpectedAvg
{
    public class GetExpectedAverageByVehicleBySite :IRequest<List<ExpectedAVGDto>>
    {
        public int VehicleId { get; set; }
        public int SiteId { get; set; }
    }


    public class GetExpectedAverageByVehicleBySiteHandler : IRequestHandler<GetExpectedAverageByVehicleBySite, List<ExpectedAVGDto>>
    {
       
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public GetExpectedAverageByVehicleBySiteHandler(GpsdataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }
        public async Task < List<ExpectedAVGDto>> Handle(GetExpectedAverageByVehicleBySite request, CancellationToken cancellationToken)
        {
             //Todo: Add logic to check for nulls
             try{

         var result = await _context.Expectedaverages
                .Include(e => e.Vehicle).Include(e => e.Site).Include(e => e.ExpectedAverageClassification)
                .Where(e => e.VehicleId == request.VehicleId && e.SiteId == request.SiteId)
                .ToListAsync(cancellationToken);
            return _mapper.Map<List<ExpectedAVGDto>>(result);
             }
             catch(MySqlException ex)
             {
                 throw new Exception("Error getting expected average by vehicle by site", ex);
             }

        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\ExpectedAvg\GetExpectedAVGByIdQuery.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.ExpectedAvg
{
    public class GetExpectedAVGByIdQuery :IRequest<ExpectedAVGDto>
    {
        public  int  Id { get; set; }
    }

    public class GetExpectedAVGbyIdQueryHandler : IRequestHandler<GetExpectedAVGByIdQuery, ExpectedAVGDto>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;
        public GetExpectedAVGbyIdQueryHandler(GpsdataContext context , IMapper mapper)
        {
           _mapper= mapper;
            _context = context; 
        }
        public async Task<ExpectedAVGDto> Handle(GetExpectedAVGByIdQuery request, CancellationToken cancellationToken)
        {
            var result = await _context.Expectedaverages
                .Include(e=>e.Vehicle)
                .FirstOrDefaultAsync(e=>e.Id==request.Id,cancellationToken);
            return _mapper.Map<ExpectedAVGDto>(result);
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\ExpectedAvg\GetExpectedAVGQuery.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.ExpectedAvg
{
    public class GetExpectedAVGQuery : IRequest<List<ExpectedAVGVehicleDetailsDTO>>
    {
    }


    public class GetExpectedAVGQueryHandler : IRequestHandler<GetExpectedAVGQuery, List<ExpectedAVGVehicleDetailsDTO>>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;
        public GetExpectedAVGQueryHandler(GpsdataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }
        public async Task<List<ExpectedAVGVehicleDetailsDTO>> Handle(GetExpectedAVGQuery request, CancellationToken cancellationToken)
        {

            var result = await _context.Expectedaverages.
                                   Include(x => x.Vehicle).
                                   Include(x => x.Vehicle.VehicleManufacturer).
                                   Include(x => x.Vehicle.VehicleModel).
                                   Include(x => x.Vehicle.VehicleType).
                                   Include(x => x.Vehicle.WorkingSite).
                                   Select(item => new ExpectedAVGVehicleDetailsDTO
                                   {                                              
                                    id = item.Id,
                                    vehicleID = item.VehicleId,
                                    vehicleModel = item.Vehicle.VehicleModel.Name,
                                    vehicleManufacturer = item.Vehicle.VehicleManufacturer.Name,
                                    vehicleType = item.Vehicle.VehicleType.Name,
                                    HyoungNo = item.Vehicle.HyoungNo,
                                    expectedAverageClassificationId = item.ExpectedAverageClassificationId,
                                    siteId= item.SiteId,
                                    site = item.Vehicle.WorkingSite.Name,
                                    expectedAverageClassificationName = item.ExpectedAverageClassification.Name,
                                    expectedAveragevalue = item.ExpectedAverageValue
                                    
                                    }).
                                   ToListAsync(cancellationToken);
       return result;

          
        }
}
   
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\SiteQuery\GetSiteQuery.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.SiteQuery
{
    public class GetSiteQuery : IRequest<List<Site>>

    {
     
    }

    public class GetSiteQueryHandler : IRequestHandler<GetSiteQuery, List<Site>>
    {


        private readonly GpsdataContext _context;

        public GetSiteQueryHandler(GpsdataContext context)
        {
            _context = context;
        }


        public async Task<List<Site>> Handle(GetSiteQuery request, CancellationToken cancellationToken)
        {
            return await _context.Sites.ToListAsync(cancellationToken);
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\VehicleManufacturer\GetVehicleManufacturer.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleManufacturer
{
    public class GetVehicleManufacturerQuery:IRequest<List<Vehiclemanufacturer>>
    {
    }

    public class GetVehicleManufacturerHandler:IRequestHandler<GetVehicleManufacturerQuery, List<Vehiclemanufacturer>>
    {
        private readonly GpsdataContext _context;
        public GetVehicleManufacturerHandler(GpsdataContext context)
        {
            _context = context;
        }
        public async Task<List<Vehiclemanufacturer>> Handle(GetVehicleManufacturerQuery request, CancellationToken cancellationToken)
        {
            return await _context.Vehiclemanufacturers.ToListAsync(cancellationToken);
        }
    }

    
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\VehicleModelQuery\GetVehicleModelQuery.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleModelQuery
{
    public class GetVehicleModelQuery:IRequest<List<Vehiclemodel>>
    {
    }


    public class GetVehicleModelQueryHandler:IRequestHandler<GetVehicleModelQuery, List<Vehiclemodel>>
    {
        private readonly GpsdataContext _context;
        public GetVehicleModelQueryHandler(GpsdataContext context)
        {
            _context = context;
        }
        public async Task<List<Vehiclemodel>> Handle(GetVehicleModelQuery request, CancellationToken cancellationToken)
        {
            return await _context.Vehiclemodels.ToListAsync(cancellationToken);
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\VehicleModelQuery\GetVehicleModelsByManufacturerIdQuery.cs

﻿using AutoMapper;
using FMS.Application.Models;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleModelQuery
{
    public class GetVehicleModelsByManufacturerIdQuery : IRequest<List<VehicleModelDto>>
    {
        public int ManufacturerId { get; set; }
    }

    public class GetVehicleModelsByManufacturerIdQueryHandler : IRequestHandler<GetVehicleModelsByManufacturerIdQuery, List<VehicleModelDto>>
    {
        private readonly IMapper _mapper;
        private readonly GpsdataContext _context;

        public GetVehicleModelsByManufacturerIdQueryHandler(IMapper mapper, GpsdataContext context)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<List<VehicleModelDto>> Handle(GetVehicleModelsByManufacturerIdQuery request, CancellationToken cancellationToken)
        {
            var vehicleModels = await _context.Vehiclemodels
                .Where(vm => vm.ManufacturerId == request.ManufacturerId)
                .ToListAsync(cancellationToken);

            return _mapper.Map<List<VehicleModelDto>>(vehicleModels);
        }
    }









}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\VehicleQuery\GetSimpleVehicleQuery.cs

﻿using AutoMapper;
using FMS.Application.Models.Vehicle;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleQuery
{
    public class GetSimpleVehicleQuery: IRequest<List<SimpleVehicleDto>>
    {

    }

    public class GetSimpleVehicleQueryHandler : IRequestHandler<GetSimpleVehicleQuery, List<SimpleVehicleDto>>
    {
        private readonly IMapper _mapper;
        private readonly GpsdataContext _context;

        public GetSimpleVehicleQueryHandler(IMapper mapper, GpsdataContext context)
        {
            _mapper = mapper;
            _context = context;
        }



        public async Task<List<SimpleVehicleDto>> Handle(GetSimpleVehicleQuery request, CancellationToken cancellationToken)
        {
            var results = await _context.Vehicles.ToListAsync(cancellationToken);

            return _mapper.Map<List<SimpleVehicleDto>>(results);

        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\VehicleQuery\GetVehicleQuery.cs

﻿using FMS.Application.Models.Vehicle;
using FMS.Domain.Entities;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleQuery
{
    public class GetVehicleQuery:IRequest<List<VehicleListDTO>>
    {
            
      
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\VehicleQuery\GetVehicleQueryHandler.cs

﻿using AutoMapper;
using AutoMapper.QueryableExtensions;
using FMS.Application.Models.Vehicle;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleQuery
{

    public class GetVehicleQueryHandler: IRequestHandler<GetVehicleQuery, List<VehicleListDTO>>
    {

        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public GetVehicleQueryHandler(GpsdataContext context,IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<List<VehicleListDTO>> Handle(GetVehicleQuery request, CancellationToken cancellationToken)
        {
            return await  _context.Vehicles.ProjectTo<VehicleListDTO>(_mapper.ConfigurationProvider).ToListAsync(cancellationToken);
          
        }

   
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\Database\VehicleTypeQuery\GetVehicleTypeQuery.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleTypeQuery
{
    public class GetVehicleTypeQuery:IRequest<List<Vehicletype>>
    {

    }

    public class GetVehicleTypeQueryHandler:IRequestHandler<GetVehicleTypeQuery, List<Vehicletype>>
    {
        private readonly GpsdataContext _context;
        public GetVehicleTypeQueryHandler(GpsdataContext context)
        {
            _context = context;
        }
        public async Task<List<Vehicletype>> Handle(GetVehicleTypeQuery request, CancellationToken cancellationToken)
        {
            return await _context.Vehicletypes.ToListAsync(cancellationToken);
        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\GPSGATEServer\GetconsumptionReport\GetConsumptionReportQuery.cs

﻿using FMS.Application.Models;
using FMS.Domain.Entities;
using FMS.Domain.Entities.Auth;
using MediatR;
using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Application.Queries.GPSGATEServer.GetconsumptionReport
{
    public class GetConsumptionReportQuery : IRequest<List<VehicleConsumptionInfoDTO>>
    {
        public GetConsumptionReportQuery(GPSGateConections conn, int fuelConsumptionReportId, DateTime from, DateTime to)
        {
            this.conn = conn;
            FuelConsumptionReportId = fuelConsumptionReportId;
            From = from;
            To = to;
        }

        public GPSGateConections conn { get; set; }

        public int? FuelConsumptionReportId { get; set; }


        public DateTime From { get; set; }

        public DateTime To { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\GPSGATEServer\GetconsumptionReport\GetConsumptionReportQueryHandler.cs

﻿using AutoMapper;
using AutoMapper.Configuration.Annotations;
using FMS.Application.Models;
using FMS.Application.Models.Employee;
using FMS.Domain.Entities;
using FMS.Domain.Entities.Common;
using FMS.Infrastructure.DependancyInjection;
using FMS.Infrastructure.Webservice;
using FMS.Persistence.DataAccess;
using FMS.Services.GPSServiceModels;
//using FMS.Services.Model;
using MediatR;
using Microsoft.AspNetCore.Server.IIS.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;


namespace FMS.Application.Queries.GPSGATEServer.GetconsumptionReport;

    public class GetConsumptionReportQueryHandler : IRequestHandler<GetConsumptionReportQuery, List<VehicleConsumptionInfoDTO>>
    {

        private readonly IGPSGateDirectoryWebservice _gpsGateDirectoryWebservice;
        private readonly GpsdataContext _Context;
        private readonly IMapper _mapper;

        private readonly ILogger _logger;

        public GetConsumptionReportQueryHandler(IGPSGateDirectoryWebservice gPSGateDirectoryWebservice, GpsdataContext gpsdataContext,IMapper mapper, ILogger<GetConsumptionReportQueryHandler> logger)
        {
            _gpsGateDirectoryWebservice = gPSGateDirectoryWebservice;
            _Context = gpsdataContext;
            _mapper = mapper;
            _logger = logger;
        }

    /// <summary>
    /// Fa
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task<List<VehicleConsumptionInfoDTO>> Handle(GetConsumptionReportQuery request, CancellationToken cancellationToken)
    {
        //get the consumption report from GPSGate server
        var (consumptionReport,vehicles) = await FetchDataAsync(request);

        //process the data to be saved in the database
        var VehicleconsumptionBatch  = ProcessData(consumptionReport, vehicles);

        //save the data to the database
        await SaveData(VehicleconsumptionBatch, request, cancellationToken);

        return await ReturnResults(request);


    }

    /// <summary>
    /// Get or fetch consumption report from GPSGate server
    /// </summary>
    /// <param name="request"></param>
    /// <returns> A list of Vehicle Consumption </returns>
    /// <exception cref="ArgumentNullException"></exception>
    private async Task<(IEnumerable<VehicleConsumptionServiceModel>, List<Vehicle>)> FetchDataAsync(GetConsumptionReportQuery request)
    {
       var consumptionReport = await _gpsGateDirectoryWebservice.GetFuelConsumptionReportAsync(request.conn, request.FuelConsumptionReportId.Value, request.From, request.To);
       

        if(consumptionReport == null) throw new ArgumentNullException(nameof(consumptionReport));
     
        var vehicleIds = consumptionReport.Select(x => x.VehicleId).ToList();
        var vehicles = await _Context.Vehicles.Where(x => vehicleIds.Contains(x.VehicleId)).ToListAsync();
        if (vehicles == null) throw new ArgumentNullException(nameof(vehicles));

        return (consumptionReport,vehicles);

    }
    /// <summary>
    /// Convert the consumption report from GPSGate server to Vehicle Consumption to be saved in the database
    /// </summary>
    /// <param name="VCconsumptionReports">Processed  data from vehicle consumption Service model . Any changes to be doone here  </param>
    /// <param name="vehicles"></param>
    /// <returns></returns>
    private List<Vehicleconsumption> ProcessData(IEnumerable<VehicleConsumptionServiceModel> VCconsumptionReports ,List<Vehicle> vehicles)
    {

       


        var vehicleConsumptionBatch = new List<Vehicleconsumption>();

        foreach (var VCserviceModel in VCconsumptionReports)
        {

             var vehicle = vehicles.FirstOrDefault(v => v.VehicleId == VCserviceModel.VehicleId);



            if(vehicle != null)
            {
                //int? siteID = getSiteIDbyVehicleID(vehicle.VehicleId);
                Vehicle vehicleinfo = getvehicleInfo(vehicle.VehicleId).Result; //check if vehicle is null or no result 

                var savedConsumption = new Vehicleconsumption
                {
                    VehicleId = vehicle.VehicleId, ///check if vehicle is null or no result
                    SiteId = vehicleinfo.WorkingSiteId??1 ,
                    Date = VCserviceModel.Date,
                    MaxSpeed = VCserviceModel.MaxSpeed,
                    AvgSpeed = VCserviceModel.AvgSpeed,
                    ExpectedConsumption = 0,
                    TotalDistance = VCserviceModel.TotalDistance,
                    EmployeeId = vehicleinfo.DefaultEmployeeId??28459,
                    Comments = "Unmodified",
                    FuelLost = VCserviceModel.FuelLost,
                    FuelEfficiency = 0,
                    TotalFuel = VCserviceModel.TotalFuel,
                    FlowMeterFuelUsed = VCserviceModel.FlowMeterFuelUsed,
                    FlowMeterFuelLost = 0,
                    FlowMeterEffiency = 0,
                    EngHours = VCserviceModel.EngHours,
                    FlowMeterEngineHrs = VCserviceModel.FlowMeterEngineHrs,
                    ExcessWorkingHrsCost = 0,
                    IsNightShift = 0,
                    IsKmperhr = vehicle.AverageKmL ? 1UL : 0UL,
                    ModifiedBy = 1, //getCurrentUserID
                    ModifiedDate = DateTime.Now,
                    IsModified = 0
                };

                //check if there is duplicate from the data fetched from GPSGate server : highly unlikely but just in case
                var duplicateInBatch = vehicleConsumptionBatch.FirstOrDefault(vc =>
                       vc.VehicleId == savedConsumption.VehicleId && vc.Date.Date == savedConsumption.Date.Date);

                if (duplicateInBatch == null)
                {
                    vehicleConsumptionBatch.Add(savedConsumption);
                }
            }


        }

        return vehicleConsumptionBatch;

    }



    private async Task<Vehicle> getvehicleInfo(int vehicleId)
    {
        var vehicle = await  _Context.Vehicles.FirstOrDefaultAsync(x=>x.VehicleId  == vehicleId);

        return vehicle;
    }

    /// <summary>
    ///  Save the data to the database and check for duplicates
    /// </summary>
    /// <param name="vehicleConsumptionBatch">Vehicle batch from GPSGate </param>
    /// <param name="results">User Parameter</param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    private async Task SaveData(List<Vehicleconsumption> vehicleConsumptionBatch , GetConsumptionReportQuery results , CancellationToken cancellationToken)
    {
         //use Try 

         try{
        var relevantData = await _Context.Vehicleconsumptions.Where(v => v.Date.Date >= results.From.Date && v.Date.Date <= results.To.Date).ToListAsync(cancellationToken);

        //check for duplicates
        foreach(var consumption in vehicleConsumptionBatch)
        {
            var isAlreadySaved = relevantData.Any(v => v.VehicleId == consumption.VehicleId && v.Date.Date == consumption.Date.Date && v.IsNightShift == consumption.IsNightShift);

            if(!isAlreadySaved)
            {
                _Context.Vehicleconsumptions.Add(consumption);

                await _Context.SaveChangesAsync(cancellationToken);

            }
        }
         }
         catch(MySqlException ex)
         {

                _logger.LogError(ex.Message);
             throw new Exception(ex.Message);
         }
      }

    /// <summary>
    /// Return the Requested Consumption result to the user
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    /// <exception cref="ArgumentNullException"></exception>
     private async Task<List<VehicleConsumptionInfoDTO>> ReturnResults (GetConsumptionReportQuery request)
    {

        var vehicleConsumptionData = await _Context.Vehicleconsumptions
                                      .Include(v => v.Vehicle)
                                      .Include(v=>v.Vehicle.VehicleManufacturer)
                                      .Include(v=>v.Vehicle.VehicleModel)
                                      .Include(v=>v.Vehicle.VehicleType)
                                      .Include(v=>v.Site)
                                      .Include(v=>v.Employee)
                                     .Where(v => v.Date.Date >= request.From.Date && v.Date.Date <= request.To.Date && v.IsModified == 0).ToListAsync();

        if(vehicleConsumptionData.Count == 0) throw new ArgumentNullException(nameof(vehicleConsumptionData));

        return vehicleConsumptionData.Select(v=> _mapper.Map<VehicleConsumptionInfoDTO>(v)).ToList();
    }


    }





    





//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Application\Queries\GPSGATEServer\LoginQuery\LoginQuery.cs

﻿using FMS.Domain.Entities.Auth;
using FMS.Infrastructure.DependancyInjection;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.GPSGATEServer.LoginQuery
{
    /// <summary>
    /// To login in to the GPSGate server
    /// </summary>
    public  class LoginQuery : IRequest<GPSGateConections>
    {

   public GPSGateConections GPSGateConections { get; set; }

    }

    /// <summary>
    /// Login Query Handler 
    /// </summary>
    public class LoqinQuery: IRequestHandler<LoginQuery, GPSGateConections>
    {

        private readonly IGPSGateDirectoryWebservice _gpsGateDirectoryWebservice;

        public LoqinQuery(IGPSGateDirectoryWebservice gPSGateDirectoryWebservice)
        {
            _gpsGateDirectoryWebservice = gPSGateDirectoryWebservice;
        }

        /// <summary>
        /// To login in to the GPSGate server
        /// </summary>
        /// <param name="request"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>GPSConnections information conns</returns>
             public async Task<GPSGateConections> Handle(LoginQuery request, CancellationToken cancellationToken)
        {
            var conn = request.GPSGateConections;
            var sessionId = await _gpsGateDirectoryWebservice.LoginAsyn(conn);

            conn.SessionID = sessionId;
            return conn;
        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\UploadStatus.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.NetworkInformation;
using System.Reflection.Metadata.Ecma335;
using System.Text;
using System.Threading.Tasks;
using FMS.Domain.ATGStatus.FuelGradeStatus;
using FMS.Domain.ATGStatus.ProbeStatus;
using FMS.Domain.ATGStatus.PumpStatus;

namespace FMS.Domain.ATGStatus
{
    public class UploadStatus
    {
        public string? ConfigurationId { get; set; }
        public DateTime DateTime { get; set; }

        public  DateTime FirmwareDateTime { get; set; }

        public int StartupSeconds { get; set; }

        public int BatteryVoltage { get; set; }
        public int CpuTemperature { get; set; }
        public bool PtsPowerDownDetected { get; set; }
        public bool SdMounted { get; set; }

        public PumpStatus.PumpStatus? Pumps { get; set; }
        public  ProbeStatus.ProbeStatus? Probes { get; set; }

        //public PriceBoardStatus PriceBoards { get; set; }

        public ReaderStatus.ReaderStatus? Readers { get; set; }
      //  public GpsStatus Gps { get; set; }
        public List<FuelGradeStatus.FuelGradeStatus>? FuelGrades { get; set; }


    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\FuelGradeStatus\FuelGradeStatus.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Domain.ATGStatus.FuelGradeStatus
{
    /// <summary>
    /// Class representing the configuration of fuel grades.
    /// </summary>
    public class FuelGradeStatus
    {
        /// <summary>
        /// Gets or sets the identifier of the fuel grade.
        /// </summary>
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the fuel grade.
        /// </summary>
        public string? Name { get; set; }

        /// <summary>
        /// Gets or sets the price of the fuel grade.
        /// </summary>
        public float? Price { get; set; }

        /// <summary>
        /// Gets or sets the thermal coefficient of expansion at 15 °C for the fuel grade.
        /// </summary>
        public float? ExpansionCoefficient { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the first tank for blended fuel grade.
        /// </summary>
        public int? BlendTank1Id { get; set; }

        /// <summary>
        /// Gets or sets the blend percentage from the first tank for blended fuel grade.
        /// </summary>
        public int? BlendTank1Percentage { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the second tank for blended fuel grade.
        /// </summary>
        public int? BlendTank2Id { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\ProbeStatus\OfflineStatus.cs

﻿namespace FMS.Domain.ATGStatus.ProbeStatus
{
    /// <summary>
    /// Class for offline status of probes.
    /// </summary>
    public class OfflineStatus
    {

        /// <summary>
       /// Gets or sets the probe identifiers having offline status.
        /// </summary>
      public List<int?>? Ids { get; set; }
                             
  
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\ProbeStatus\OnlineStatus.cs

﻿namespace FMS.Domain.ATGStatus.ProbeStatus
{
     /// <summary>
    /// Class representing the online status for probes.
      /// </summary>
    public class OnlineStatus
    {
        /// <summary>
        /// Gets or sets the probe identifiers having online status.
        /// </summary>
        public List<int?>? Ids { get; set; }

        /// <summary>
        /// Gets or sets the identifiers of probes with critical high product alarms for tank.
        /// </summary>
        public List<int?>? CriticalHighProductAlarms { get; set; }

        /// <summary>
        /// Gets or sets the identifiers of probes with high product alarms for tank.
        /// </summary>
        public List<int?>? HighProductAlarms { get; set; }

        /// <summary>
        /// Gets or sets the identifiers of probes with low product alarms for tank.
        /// </summary>
        public List<int?>? LowProductAlarms { get; set; }

        /// <summary>
        /// Gets or sets the identifiers of probes with critical low product alarms for tank.
        /// </summary>
        public List<int?>? CriticalLowProductAlarms { get; set; }

        /// <summary>
        /// Gets or sets the identifiers of probes with high water alarms for tank.
        /// </summary>
        public List<int?>? HighWaterAlarms { get; set; }

        /// <summary>
        /// Gets or sets the identifiers of probes with leakage alarms for tank.
        /// </summary>
        public List<int?>? TankLeakageAlarms { get; set; }

        /// <summary>
        /// Gets or sets the identifiers of probes with errors.
        /// </summary>
        public List<int?>? Errors { get; set; }

        /// <summary>
        /// Gets or sets the measurements of probes.
        /// </summary>
        public List<ProbeMeasurement>? Measurements { get; set; }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\ProbeStatus\ProbeMeasurement.cs

﻿namespace FMS.Domain.ATGStatus.ProbeStatus
{
    public class ProbeMeasurement
    {
        public int ProbeNumber { get; set; }
        public float? ProductHeight { get; set; }
        public float? WaterHeight { get; set; }
        public float? Temperature { get; set; }
        public float? ProductVolume { get; set; }
        public float? WaterVolume { get; set; }
        public float? ProductUllage { get; set; }
        public float? ProductTemperatureCompensatedVolume { get; set; }
        public float? ProductDensity { get; set; }
        public float? ProductMass { get; set; }
        public int? TankFillingPercentage { get; set; }


        public ProbeMeasurement(float[] measurements)
        {
            if (measurements.Length >= 11)
            {
                ProbeNumber = (int)measurements[0];
                ProductHeight = measurements[1];
                WaterHeight = measurements[2];
                Temperature = measurements[3];
                ProductVolume = measurements[4];
                WaterVolume = measurements[5];
                ProductUllage = measurements[6];
                ProductTemperatureCompensatedVolume = measurements[7];
                ProductDensity = measurements[8];
                ProductMass = measurements[9];
                TankFillingPercentage = (int)measurements[10];
            }
        }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\ProbeStatus\ProbeStatus.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Domain.ATGStatus.ProbeStatus
{
    public class ProbeStatus
    {
        public OnlineStatus? OnlineStatus { get; set; }
        public OfflineStatus? OfflineStatus { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\PumpStatus\EndOfTransactionStatus.cs

﻿namespace FMS.Domain.ATGStatus.PumpStatus
{// <summary>
    /// Class representing the end of transaction status for pumps.
    /// </summary>
    public class EndOfTransactionStatus
    {
        /// <summary>
        /// Gets or sets the pump identifiers having filling status.
        /// </summary>
        public List<int>? Ids { get; set; }

        /// <summary>
        /// Gets or sets the active nozzle numbers of the pumps.
        /// </summary>
        public List<int>? Nozzles { get; set; }

        /// <summary>
        /// Gets or sets the identifiers of the active nozzles' fuel grade.
        /// </summary>
        public List<int>? FuelGradeIds { get; set; }

        /// <summary>
        /// Gets or sets the names of the active nozzles' fuel grade.
        /// </summary>
        public List<string>? FuelGradeNames { get; set; }

        /// <summary>
        /// Gets or sets the active transaction numbers of the pumps.
        /// </summary>
        public List<int>? Transactions { get; set; }

        /// <summary>
        /// Gets or sets the dispensed volumes of the pumps.
        /// </summary>
        public List<float>? Volumes { get; set; }

        /// <summary>
        /// Gets or sets the dispensed amounts of the pumps.
        /// </summary>
        public List<float>? Amounts { get; set; }

        /// <summary>
        /// Gets or sets the active product prices of the pumps.
        /// </summary>
        public List<float>? Prices { get; set; }

        /// <summary>
        /// Gets or sets the tag identifiers used to authorize the pump.
        /// </summary>
        public List<string>? Tags { get; set; }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\PumpStatus\FillingStatus.cs

﻿namespace FMS.Domain.ATGStatus.PumpStatus
{
    public class FillingStatus
    {
        public List<int>? Ids { get; set; }
        public List<int>? Nozzles { get; set; }
        public List<int>? FuelGradeIds { get; set; }
        public List<string>? FuelGradeNames { get; set; }
        public List<int>? Transactions { get; set; }
        public List<float>? Volumes { get; set; }
        public List<float>?  Amounts { get; set; }
        public List<float>? Prices { get; set; }
        public List<string>? Tags { get; set; }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\PumpStatus\IdleStatus.cs

﻿namespace FMS.Domain.ATGStatus.PumpStatus
{
    public class IdleStatus
    {
        public List<int>? Ids { get; set; }
        public List<int>? NozzlesUp { get; set; }

        public List<int>? LastNozzles { get; set; }

        public List<int>? LastTransactions { get; set; }

        public List<int>? LastVolumes { get; set; }

        public List<int>? LastAmounts { get; set; }

        public List<int>? LastPrices { get; set; }


        /// <summary>
        /// array of strings, which mean tag identifiers currently brought to pump reader 
        /// </summary>
        public List<int>? Tags { get; set; }

        /// <summary>
        /// array of strings, which mean presently executed requests on pumps
        /// </summary>
        public List<int>? Requests { get; set; }



    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\PumpStatus\OfflineStatus.cs

﻿namespace FMS.Domain.ATGStatus.PumpStatus
{
    /// <summary>
    /// Class representing the offline status for pumps.
    /// </summary>
    public class OfflineStatus
    {
        /// <summary>
        /// Gets or sets the pump identifiers having offline status.
        /// </summary>
        public List<int?>? Ids { get; set; }

        /// <summary>
        /// Gets or sets the users currently executing a request on pumps.
        /// </summary>
        public List<string>? Users { get; set; }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\PumpStatus\PumpStatus.cs

﻿namespace FMS.Domain.ATGStatus.PumpStatus
{
    /// <summary>
    /// Class representing the status of the pumps.
    /// </summary>
    public class PumpStatus
    {
        /// <summary>
        ///  idle status of the pumps
        /// </summary>
        public IdleStatus? IdleStatus { get; set; }
        /// <summary>
        /// Filling status of the pumps.
        /// </summary>
        public FillingStatus? FillingStatus { get; set; }
        /// <summary>
        /// End of transaction status of the pumps.
        /// </summary>
        public EndOfTransactionStatus? EndOfTransactionStatus { get; set; }
        /// <summary>
        /// Offline status of the pumps.
        /// </summary>
        public OfflineStatus? OfflineStatus { get; set; }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\ReaderStatus\OfflineStatus.cs

﻿namespace FMS.Domain.ATGStatus.ReaderStatus
{
    /// <summary>
    /// Class representing the offline status for readers.
    /// </summary>
    public class OfflineStatus
    {
        /// <summary>
        /// Gets or sets the reader identifiers having offline status.
        /// </summary>
        public List<int?>? Ids { get; set; }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\ReaderStatus\OnlineStatus.cs

﻿namespace FMS.Domain.ATGStatus.ReaderStatus
{

    /// <summary>
    /// Class representing the online status of the readers.
    /// </summary>
    public class OnlineStatus
    {/// <summary>
     /// Gets or sets the reader identifiers having online status.
     /// </summary>
        public List<int?>? Ids { get; set; }

        /// <summary>
        /// Gets or sets the IDs of the readers' tags.
        /// </summary>
        public List<string>? Tags { get; set; }

        /// <summary>
        /// Gets or sets the identifiers of readers having error status.
        /// </summary>
        public List<int?>? Errors { get; set; }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\ATGStatus\ReaderStatus\ReaderStatus.cs

﻿
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Domain.ATGStatus.ReaderStatus
{
    public class ReaderStatus
    {
        public OnlineStatus? OnlineStatus { get; set; }
        public OfflineStatus? OfflineStatus { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Alarm.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Alarm
{
    public int Id { get; set; }

    public string Name { get; set; } = null!;

    public string Priority { get; set; } = null!;

    public string? Description { get; set; }
                                                
    public virtual ICollection<Tankmeasurement> TankMeasurements { get; set; } = new List<Tankmeasurement>();

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Alertrecord.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Alertrecord
{
    public int AlertId { get; set; }

    public DateTime DateTime { get; set; }

    public string DeviceType { get; set; } = null!;

    public int DeviceNumber { get; set; }

    public string State { get; set; } = null!;

    public int Code { get; set; }

    public string? ConfigurationId { get; set; }

    public string Ptsid { get; set; } = null!;

    public int PacketId { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Assest.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Assest
{
    public DateTime? Purchaseon { get; set; }

    public string AssestId { get; set; } = null!;

    public string? HyoungNo { get; set; }

    public sbyte IsInstalled { get; set; }

    public int? VehicleType { get; set; }

    public int? Vehiclemodel { get; set; }

    public int? VehicleManufacturer { get; set; }

    public virtual Vehiclemanufacturer? VehicleManufacturerNavigation { get; set; }

    public virtual Vehicletype? VehicleTypeNavigation { get; set; }

    public virtual Vehiclemodel? VehiclemodelNavigation { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Asset.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Asset
{
    public string AssetId { get; set; } = null!;

    public int? VehicleModelId { get; set; }

    public int? VehicleManufacturerId { get; set; }

    public int? VehicleTypeId { get; set; }

    public string? SiteId { get; set; }

    public virtual Vehiclemanufacturer? VehicleManufacturer { get; set; }

    public virtual Vehiclemodel? VehicleModel { get; set; }

    public virtual Vehicletype? VehicleType { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Calibrationdatum.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Calibrationdatum
{
    public int Id { get; set; }

    public string? VehicleId { get; set; }

    public DateTime? CalibrationDate { get; set; }

    public string? CalibrationData { get; set; }

    public virtual Vehicle? Vehicle { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Configuration.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Configuration
{
    public int Id { get; set; }

    public string? ConfigurationId { get; set; }

    public string Configuration1 { get; set; } = null!;

    public int PacketId { get; set; }

    public string Ptsid { get; set; } = null!;
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Deduction.cs

﻿using FMS.Domain.Entities.Common;
using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Domain.Entities
{

    public class Deduction : Entity

    {

        public decimal Amount { get; set; }

        public DeductionType  DeductionType {get;set;}
    }

    public enum DeductionType
    {
        BasedOnFuelEfficiency,
        Over8hrsDeductions,
        TireUsage
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Device.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Device
{
    public int DeviceImei { get; set; }

    public int DeviceMakerId { get; set; }

    public int DevicePhoneNumber { get; set; }

    public virtual ICollection<Vehicle> Vehicles { get; set; } = new List<Vehicle>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Devicemanufacturer.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Devicemanufacturer
{
    public int Id { get; set; }

    public string? Name { get; set; }

    public virtual ICollection<Devicemodel> Devicemodels { get; set; } = new List<Devicemodel>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Devicemodel.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Devicemodel
{
    public int Id { get; set; }

    public string Name { get; set; } = null!;

    public int DevicemanufacturerId { get; set; }

    public virtual Devicemanufacturer Devicemanufacturer { get; set; } = null!;
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Drivers.cs

﻿using FMS.Domain.Entities.Common;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace FMS.Domain.Entities
{
    public partial class Driver:Entity
    {
            
        public int UserId { get; set; }

        public string? Name { get; set; }

        public string? EmpNo { get; set; }
        public double? PhoneNumber { get; set; }
        public virtual ICollection<Vehicle>? DrivenVehicles { get;private set; }


        public Vehicle? DefaultVehicle { get; set; }



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Employee.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Employee
{
    public int Id { get; set; }

    public string FullName { get; set; } = null!;

    public string? EmployeeWorkNo { get; set; }

    public string? EmployeephoneNumber { get; set; }

    public long? NationalId { get; set; }

    public string? Employeestatus { get; set; }

    public int? SiteId { get; set; }

    public virtual Site? Site { get; set; }

    public virtual ICollection<Vehicleconsumption> Vehicleconsumptions { get; set; } = new List<Vehicleconsumption>();

    public virtual ICollection<Vehicle> VehiclesNavigation { get; set; } = new List<Vehicle>();

    public virtual ICollection<Vehicle> Vehicles { get; set; } = new List<Vehicle>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Expectedaverage.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Expectedaverage
{
    public int Id { get; set; }

    public int VehicleId { get; set; }

    public int ExpectedAverageClassificationId { get; set; }

    public decimal ExpectedAverageValue { get; set; }

    public int SiteId { get; set; }

    public virtual Expectedaverageclassification ExpectedAverageClassification { get; set; } = null!;

    public virtual Site Site { get; set; } = null!;

    public virtual Vehicle Vehicle { get; set; } = null!;
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Expectedaverageclassification.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Expectedaverageclassification
{
    public int Id { get; set; }

    public string Name { get; set; } = null!;

    public string? Description { get; set; }

    public virtual ICollection<Expectedaverage> Expectedaverages { get; set; } = new List<Expectedaverage>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Fuelrefil.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Fuelrefil
{
    public int Id { get; set; }

    public int VehicleId { get; set; }

    public decimal? GpsfuelRefil { get; set; }

    public decimal? ManualGpsfuelrefil { get; set; }

    public decimal? Duration { get; set; }

    public DateTime Date { get; set; }

    public DateTime? Time { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Intankdelivery.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Intankdelivery
{
    public int DeliveryId { get; set; }

    public int Tank { get; set; }

    public int FuelGradeId { get; set; }

    public string? FuelGradeName { get; set; }

    public DateTime? StartDateTime { get; set; }

    public float? StartProductHeight { get; set; }

    public float? StartWaterHeight { get; set; }

    public float? StartTemperature { get; set; }

    public float? StartProductVolume { get; set; }

    public float? StartProductTcvolume { get; set; }

    public float? StartProductDensity { get; set; }

    public float? StartProductMass { get; set; }

    public DateTime? EndDateTime { get; set; }

    public float? EndProductHeight { get; set; }

    public float? EndWaterHeight { get; set; }

    public float? EndTemperature { get; set; }

    public float? EndProductVolume { get; set; }

    public float? EndProductTcvolume { get; set; }

    public float? EndProductDensity { get; set; }

    public float? EndProductMass { get; set; }

    public float? AbsoluteProductHeight { get; set; }

    public float? AbsoluteWaterHeight { get; set; }

    public float? AbsoluteTemperature { get; set; }

    public float? AbsoluteProductVolume { get; set; }

    public float? AbsoluteProductTcvolume { get; set; }

    public float? AbsoluteProductDensity { get; set; }

    public float? AbsoluteProductMass { get; set; }

    public float? PumpsDispensedVolume { get; set; }

    public string? ConfigurationId { get; set; }

    public string Ptsid { get; set; } = null!;

    public int PacketId { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Issuecategory.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Issuecategory
{
    public int Id { get; set; }

    public string? Name { get; set; }

    public string? Description { get; set; }

    public virtual ICollection<Issuetracker> Issuetrackers { get; set; } = new List<Issuetracker>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Issuepriority.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Issuepriority
{
    public int Int { get; set; }

    public string? Name { get; set; }

    public virtual ICollection<Issuetracker> Issuetrackers { get; set; } = new List<Issuetracker>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Issuestatus.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

/// <summary>
/// 		
/// </summary>
public partial class Issuestatus
{
    public int Id { get; set; }

    public string? Status { get; set; }

    public virtual ICollection<Issuetracker> Issuetrackers { get; set; } = new List<Issuetracker>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Issuetracker.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

/// <summary>
/// 		
/// </summary>
public partial class Issuetracker
{
    public int Id { get; set; }

    public int IssueCategoryId { get; set; }

    public int SiteId { get; set; }

    public int Openby { get; set; }

    public int AssignTo { get; set; }

    public int? RelatedIssue { get; set; }

    public string ProblemDescription { get; set; } = null!;

    public string ProblemTitlte { get; set; } = null!;

    public int? Status { get; set; }

    public int? Priority { get; set; }

    public DateTime? DueDate { get; set; }

    public DateTime? OpenDate { get; set; }

    public DateTime? ClosingDate { get; set; }

    public DateTime? LastModfield { get; set; }

    public string HyoungNo { get; set; } = null!;

    public virtual User AssignToNavigation { get; set; } = null!;

    public virtual Vehicle HyoungNoNavigation { get; set; } = null!;

    public virtual Issuecategory IssueCategory { get; set; } = null!;

    public virtual User OpenbyNavigation { get; set; } = null!;

    public virtual Issuepriority? PriorityNavigation { get; set; }

    public virtual Site Site { get; set; } = null!;

    public virtual Issuestatus? StatusNavigation { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Pts.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Pts
{
    public int Id { get; set; }

    public string PtsserialNo { get; set; } = null!;

    public int SiteId { get; set; }
    public virtual Site Site { get; set; } = null!;
    public virtual ICollection<Tank> Tanks { get; set; } = new List<Tank>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Pumptransaction.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Pumptransaction
{
    public int Id { get; set; }

    public string PtsId { get; set; } = null!;

    public int PacketId { get; set; }

    public DateTime? DateTimeStart { get; set; }

    public DateTime DateTime { get; set; }

    public int? Pump { get; set; }

    public int? Nozzle { get; set; }

    public int? FuelGradeId { get; set; }

    public string? FuelGradeName { get; set; }

    public int? Transaction { get; set; }

    public decimal? Volume { get; set; }

    public decimal? Tcvolume { get; set; }

    public decimal? Price { get; set; }

    public decimal? Amount { get; set; }

    public decimal? TotalVolume { get; set; }

    public decimal? TotalAmount { get; set; }

    public string? Tag { get; set; }

    public int? UserId { get; set; }

    public string? ConfigurationId { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Site.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

/// <summary>
/// 			
/// </summary>
public partial class Site
{
    public int Id { get; set; }

    public string Name { get; set; } = null!;

    public virtual ICollection<Employee> Employees { get; set; } = new List<Employee>();

    public virtual ICollection<Expectedaverage> Expectedaverages { get; set; } = new List<Expectedaverage>();

    public virtual ICollection<Issuetracker> Issuetrackers { get; set; } = new List<Issuetracker>();

    public virtual ICollection<Pts> Pts { get; set; } = new List<Pts>();

    public virtual ICollection<Vehicleconsumption> Vehicleconsumptions { get; set; } = new List<Vehicleconsumption>();

    public virtual ICollection<Vehicle> Vehicles { get; set; } = new List<Vehicle>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Systemusers.cs

﻿using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities
{
    public partial class SystemUsers : IdentityUser
    {
         public string? FirstName { get; set; }
        public string? LastName { get; set; }
    
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Tag.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Tag
{
    public int Id { get; set; }

    public string? Name { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\TagGroup.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class TagGroup
{
    public int Id { get; set; }

    public string VehicleId { get; set; } = null!;

    public int TagId { get; set; }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Tank.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Tank
{
    public int Id { get; set; }

    public string Name { get; set; } = null!;

    public decimal TankVolume { get; set; }

    public decimal TankHeight { get; set; }

    public int PtsId { get; set; }

    //Todo: Check if this is truly required = new pts();
    public virtual Pts Pts { get; set; } = new Pts();

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Tankmeasurement.cs

﻿using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace FMS.Domain.Entities;

public partial class Tankmeasurement
{
    public int Id { get; set; }

    public DateTime DateTime { get; set; }

    public int FuelGradeId { get; set; }

    public string Ptsid { get; set; } = null!;

    public double? ProductHeight { get; set; }

    public double? WaterHeight { get; set; }

    public double? Temperature { get; set; }

    public double? ProductVolume { get; set; }

    public double? WaterVolume { get; set; }

    public double? ProductTcvolume { get; set; }

    public double? ProductDensity { get; set; }

    public double? ProductMass { get; set; }

    public int? TankFillingPercentage { get; set; }

    public string? ConfigurationId { get; set; }

    public int PacketId { get; set; }

    public double? ProductUllage { get; set; }

    public string? Status { get; set; }

    public int Tank { get; set; }

    public virtual ICollection<Alarm> Alarms { get; set; } = new List<Alarm>();


}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\User.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

/// <summary>
/// 	
/// </summary>
public partial class User
{
    public int Id { get; set; }

    public string? FullName { get; set; }

    public string? Email { get; set; }

    public int? UserType { get; set; }

    public string? Password { get; set; }

    public virtual ICollection<Issuetracker> IssuetrackerAssignToNavigations { get; set; } = new List<Issuetracker>();

    public virtual ICollection<Issuetracker> IssuetrackerOpenbyNavigations { get; set; } = new List<Issuetracker>();

    public virtual Usertype? UserTypeNavigation { get; set; }

    public virtual ICollection<Vehicleconsumption> Vehicleconsumptions { get; set; } = new List<Vehicleconsumption>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Usertype.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

/// <summary>
/// 			
/// </summary>
public partial class Usertype
{
    public int Id { get; set; }

    public string? Type { get; set; }

    public virtual ICollection<User> Users { get; set; } = new List<User>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Vehicle.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Vehicle
{
    public string HyoungNo { get; set; } = null!;

    public int VehicleId { get; set; }

    public int VehicleTypeId { get; set; }

    public int? VehicleModelId { get; set; }

    public int? VehicleManufacturerId { get; set; }

    public string? Yom { get; set; }

    public int? DeviceId { get; set; }

    public int? DefaultEmployeeId { get; set; }

    public int? WorkingSiteId { get; set; }

    public decimal? ExcessWorkingHrCost { get; set; }

    public string? NumberPlate { get; set; }

    public bool AverageKmL { get; set; }

    public string? Capacity { get; set; }

    public string? CurrentPhysicalReading { get; set; }

    public sbyte? GpsgategeneratedId { get; set; }

    public virtual ICollection<Calibrationdatum> Calibrationdata { get; set; } = new List<Calibrationdatum>();

    public virtual Employee? DefaultEmployee { get; set; }

    public virtual Device? Device { get; set; }

    public virtual ICollection<Expectedaverage> Expectedaverages { get; set; } = new List<Expectedaverage>();

    public virtual ICollection<Issuetracker> Issuetrackers { get; set; } = new List<Issuetracker>();

    public virtual Vehiclemanufacturer? VehicleManufacturer { get; set; }

    public virtual Vehiclemodel? VehicleModel { get; set; }

    public virtual Vehicletype VehicleType { get; set; } = null!;

    public virtual ICollection<Vehicleconsumption> Vehicleconsumptions { get; set; } = new List<Vehicleconsumption>();

    public virtual Site? WorkingSite { get; set; }

    public virtual ICollection<Employee> Employees { get; set; } = new List<Employee>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Vehicleconsumption.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Vehicleconsumption
{
    public int Id { get; set; }

    public int VehicleId { get; set; }

    public int SiteId { get; set; }

    public DateTime Date { get; set; }

    public decimal? MaxSpeed { get; set; }

    public decimal? AvgSpeed { get; set; }

    public decimal? ExpectedConsumption { get; set; }

    public decimal? TotalDistance { get; set; }

    public int? EmployeeId { get; set; }

    public string? Comments { get; set; }

    public decimal? FuelLost { get; set; }

    public decimal? FuelEfficiency { get; set; }

    public decimal? TotalFuel { get; set; }

    public decimal? FlowMeterFuelUsed { get; set; }

    public decimal? FlowMeterFuelLost { get; set; }

    public decimal? FlowMeterEffiency { get; set; }

    public decimal? EngHours { get; set; }

    public decimal? FlowMeterEngineHrs { get; set; }

    public decimal? ExcessWorkingHrsCost { get; set; }

    public ulong IsNightShift { get; set; }

    public ulong IsKmperhr { get; set; }

    public int? ModifiedBy { get; set; }

    public DateTime? ModifiedDate { get; set; }

    public sbyte? IsModified { get; set; }

    public virtual Employee? Employee { get; set; }

    public virtual User? ModifiedByNavigation { get; set; }

    public virtual Site Site { get; set; } = null!;

    public virtual Vehicle Vehicle { get; set; } = null!;
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Vehiclemanufacturer.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Vehiclemanufacturer
{
    public int Id { get; set; }

    public string? Name { get; set; }

    public virtual ICollection<Asset> Assets { get; set; } = new List<Asset>();

    public virtual ICollection<Vehicle> Vehicles { get; set; } = new List<Vehicle>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Vehiclemodel.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

public partial class Vehiclemodel
{
    public int Id { get; set; }

    public string? Name { get; set; }

    public int? ManufacturerId { get; set; }

    public virtual ICollection<Asset> Assets { get; set; } = new List<Asset>();

    public virtual ICollection<Vehicle> Vehicles { get; set; } = new List<Vehicle>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\VehiclesCustomField.cs

﻿using FMS.Domain.Entities.Common;
using System;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Text;

namespace FMS.Domain.Entities
{
    public class VehiclesCustomField : Entity
    {
        public string? FieldName { get; set; }
    }


    public class VehiclesCustomFieldValue :Entity
    {
        public VehiclesCustomField? VehicleField { get; set; }

        public string? Value { get; set; }

        public ICollection<Vehicle>? Vehicles { get; private set; }

    }


        public enum CustomFieldID
    {

    }


}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Vehicletype.cs

﻿using System;
using System.Collections.Generic;

namespace FMS.Domain.Entities;

/// <summary>
/// 			
/// </summary>
public partial class Vehicletype
{
    public int Id { get; set; }

    public string Name { get; set; } = null!;

    public string? Abbvr { get; set; }

    public string? Nothinghere { get; set; }

    public virtual ICollection<Asset> Assets { get; set; } = new List<Asset>();

    public virtual ICollection<Vehicle> Vehicles { get; set; } = new List<Vehicle>();
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Auth\ApplicationUser.cs

﻿using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Domain.Entities.Auth
{
   public  class ApplicationUser:IdentityUser
    {

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Auth\GPSGateConections.cs

﻿using System;
using System.Collections.Generic;
using System.Text;



namespace FMS.Domain.Entities.Auth
{
    ///Gps Connection 

    
    public class GPSGateConections
    {
        public int ApplicationID { get ; set ; }
        public string? SessionID { get ; set ; }
        public int HandleID { get ; set ; }
        public GPSGateUser? GPSGateUser { get ; set ; }

        #region GPSGATE webservice SOAP link 
        public string? DirectoryServiceReferenceLink { get; set; }
        public static string? ReportServiceReferenceLink { get; set; }

        public static string? TrackServiceReferenceLink { get; set; }

        public static string? GeocorderReferenceLink { get; set; }

        #endregion


    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Auth\GPSGateUser.cs

﻿
using Microsoft.AspNetCore.Identity;

namespace FMS.Domain.Entities.Auth
{
    public class GPSGateUser:IdentityUser
    {
        public string? Password { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Common\Entity.cs

﻿namespace FMS.Domain.Entities.Common
{
    public class Entity
    {
                public virtual int ID { get; set; }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Domain\Entities\Settings\ApplicationSettings.cs

﻿using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Domain.Entities.Settings
{
   public  class ApplicationSettings
    {

        public int SettingsID { get; set; }

        public int ApplicationID { get; set; }

        public int ConsumptionReportID { get; set; }

        public int FuelReportID { get; set; }

        public int VehicleDisconnectionID { get; set; }

        public int VehicleWithNoFuelID { get; set; }

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\Class1.cs

﻿using System;

namespace FMS.Infrastructure
{
    public class Class1
    {
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\Common\JsonSerialConvertors\AlarmConverter.cs

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using FMS.Services.Models.ATGModels;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace FMS.Infrastructure.JsonSerialConvertors{
public class AlarmConverter:JsonConverter
{
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(Alarm);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {

      if(reader.TokenType == JsonToken.StartObject)
            {
                //if its an object, consumeme it and possibliy extract the data
                //
                JObject alarmObj = JObject.Load(reader);

                //extract data from the object and create a list <string> of alarms

                List<string> alarms = new List<string>();

                foreach(var prop in alarmObj.Properties())
                {
                    if((bool)prop.Value)
                    {
                        alarms.Add(prop.Name);
                    }
                }

                return new Alarm(alarms);

            }
      else if(reader.TokenType == JsonToken.StartArray)
            {
                //if its an array, consume it and extract the data
                //
                JArray alarmArray = JArray.Load(reader);

                var alarms = alarmArray.ToObject<List<string>>();

                return new Alarm(alarms);
            }
      else
            {
                //if its neither an object nor an array, throw an exception
                //
                throw new JsonSerializationException("Unexpected token type for Alarms:: " + reader.TokenType.ToString());
            }

    }

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
          Alarm alarm = (Alarm)value;
            serializer.Serialize(writer, alarm.Alarms);
    }
}
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\Common\JsonSerialConvertors\JsonConverter.cs

﻿using FMS.Infrastructure.JsonSerialConvertors;
using FMS.Services.Common.Interfaces;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Infrastructure.Common.JsonSerialConvertors
{
    public class CustomJsonConverter : IJsonConvertor
    {

        private readonly JsonSerializerSettings _settings;


        public CustomJsonConverter()
        {
            _settings = new JsonSerializerSettings
            {
                Converters = new List<JsonConverter> { new AlarmConverter() },
            };

        }

        public T Deserialize<T>(string json)
        {

            return JsonConvert.DeserializeObject<T>(json, _settings);
        }

        public string Serialize(object obj)
        {
            return JsonConvert.SerializeObject(obj, _settings);
        }
    }

}



//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\Connected Services\DirectoryServiceReference1\Reference.cs

﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DirectoryServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://gpsgate.com/services/", ConfigurationName="DirectoryServiceReference1.DirectorySoap")]
    public interface DirectorySoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> LoginAsync(string strUsername, string strPassword, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetLicenseStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetLicenseStatusAsync(string strSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetGateMessagesByTrackInfoId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetGateMessagesByTrackInfoIdAsync(string strSessionID, int iApplicationID, int iTrackInfoID, System.DateTime dtStart, System.DateTime dtEnd, int iStartIndex, int iStopIndex, bool bFilterNoneValid, string[] arrFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetLatestGateRecords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetLatestGateRecordsAsync(string strSessionID, int iApplicationID, int iUserID, bool bFilterNotUsed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUpdatedUsersInGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetUpdatedUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iStartIndex, int iStopIndex, int iViewID, System.DateTime dtSince);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUsersInGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iViewID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUsersInUserTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetUsersInUserTagAsync(string strSessionID, int iApplicationID, string strTagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUsersInUserTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetUsersInUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetCurrentApplications", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetCurrentApplicationsAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SetUserMarkerColor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SetUserMarkerColorAsync(string strSessionID, int iApplicationID, int iUserID, string strMarkerColor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SetUserExpectedFuelConsumption", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SetUserExpectedFuelConsumptionAsync(string strSessionID, int iApplicationID, int iUserID, double dExpectedFuelConsumption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/RemoveUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> RemoveUserAsync(string strSessionID, int iApplicationID, int iUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SetUserPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SetUserPasswordAsync(string strSessionID, int iApplicationID, int iUserID, string strNewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetViews", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetViewsAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetTagsInApplication", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetTagsInApplicationAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SaveTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SaveTagAsync(string strSessionID, int iApplicationID, int iTagID, string strName, string strDescription, int[] arrUserIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetDevicesByUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetDevicesByUserAsync(string strSessionID, int iApplicationID, int iUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetDeviceCommandStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetDeviceCommandStatusAsync(string strSessionID, int iApplicationID, int iDeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ResetCommandQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> ResetCommandQueueAsync(string strSessionID, int iApplicationID, int iDeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetManageableDeviceDefinitions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapDeviceDefinition[]> GetManageableDeviceDefinitionsAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUserTemplates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapUserTemplate[]> GetUserTemplatesAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/AddUserWithUserTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<int> AddUserWithUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID, string strUsername, string strName, string strPassword, string strDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/AddDevice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AddDeviceAsync(
                    string strSessionID, 
                    int iApplicationID, 
                    int iOwnerID, 
                    string strDeviceName, 
                    string strIMEI, 
                    string strMSISDN, 
                    string strEmail, 
                    string strIP, 
                    string strPort, 
                    string strAPN, 
                    string strGPRSUsername, 
                    string strGPRSPassword, 
                    int iDeviceDefinitionID, 
                    int iMobileNetworkID, 
                    string strDevicePassword, 
                    DirectoryServiceReference1.OneWireBag[] lstOneWireVariables);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeUsername", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeUsernameAsync(string strSessionID, int iApplicationID, int iUserID, string strUsername, string strName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeUserDescription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeUserDescriptionAsync(string strSessionID, int iApplicationID, int iUserID, string strDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeUserSurname", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeUserSurnameAsync(string strSessionID, int iApplicationID, int iUserID, string strSurname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeDriverID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeDriverIDAsync(string strSessionID, int iApplicationID, int iUserID, string strDriverID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeEmailAsync(string strSessionID, int iApplicationID, int iUserID, string strEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetAccumulator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulator> GetAccumulatorAsync(string strSessionID, int iApplicationID, int iUserID, string strName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetAccumulators", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetAccumulatorsAsync(string strSessionID, int iApplicationID, int iUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetAccumulatorValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulatorData> GetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, System.DateTime dtTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetLatestAccumulatorValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulatorData> GetLatestAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SetAccumulatorValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task SetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, double dblValue, System.DateTime dtTimeOfValue);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapDeviceDefinition
    {
        
        private int idField;
        
        private string nameField;
        
        private string protocolIDField;
        
        private string namespaceNameField;
        
        private string descriptionField;
        
        private string deviceIdentifierLabelField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ProtocolID
        {
            get
            {
                return this.protocolIDField;
            }
            set
            {
                this.protocolIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string NamespaceName
        {
            get
            {
                return this.namespaceNameField;
            }
            set
            {
                this.namespaceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string DeviceIdentifierLabel
        {
            get
            {
                return this.deviceIdentifierLabelField;
            }
            set
            {
                this.deviceIdentifierLabelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapAccumulatorData
    {
        
        private int accumulatorIDField;
        
        private string accumulatorNameField;
        
        private double valueField;
        
        private System.DateTime timeStampField;
        
        private string measureKeyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int AccumulatorID
        {
            get
            {
                return this.accumulatorIDField;
            }
            set
            {
                this.accumulatorIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AccumulatorName
        {
            get
            {
                return this.accumulatorNameField;
            }
            set
            {
                this.accumulatorNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public double Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime TimeStamp
        {
            get
            {
                return this.timeStampField;
            }
            set
            {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string MeasureKey
        {
            get
            {
                return this.measureKeyField;
            }
            set
            {
                this.measureKeyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapAccumulator
    {
        
        private int idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OneWireBag))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public abstract partial class ViewBag
    {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class OneWireBag : ViewBag
    {
        
        private int deviceIDField;
        
        private int deviceDefinitionIDField;
        
        private string variableNameField;
        
        private string oneWireIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int DeviceID
        {
            get
            {
                return this.deviceIDField;
            }
            set
            {
                this.deviceIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int DeviceDefinitionID
        {
            get
            {
                return this.deviceDefinitionIDField;
            }
            set
            {
                this.deviceDefinitionIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string VariableName
        {
            get
            {
                return this.variableNameField;
            }
            set
            {
                this.variableNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string OneWireID
        {
            get
            {
                return this.oneWireIDField;
            }
            set
            {
                this.oneWireIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapUserTemplateItem
    {
        
        private string fieldIDField;
        
        private bool requiredField;
        
        private bool visibleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string FieldID
        {
            get
            {
                return this.fieldIDField;
            }
            set
            {
                this.fieldIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Required
        {
            get
            {
                return this.requiredField;
            }
            set
            {
                this.requiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool Visible
        {
            get
            {
                return this.visibleField;
            }
            set
            {
                this.visibleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapUserTemplate
    {
        
        private int idField;
        
        private string nameField;
        
        private SoapUserTemplateItem[] itemsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public SoapUserTemplateItem[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface DirectorySoapChannel : DirectoryServiceReference1.DirectorySoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class DirectorySoapClient : System.ServiceModel.ClientBase<DirectoryServiceReference1.DirectorySoap>, DirectoryServiceReference1.DirectorySoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DirectorySoapClient(EndpointConfiguration endpointConfiguration) : 
                base(DirectorySoapClient.GetBindingForEndpoint(endpointConfiguration), DirectorySoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DirectorySoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DirectorySoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DirectorySoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DirectorySoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DirectorySoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> LoginAsync(string strUsername, string strPassword, int iApplicationID)
        {
            return base.Channel.LoginAsync(strUsername, strPassword, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetLicenseStatusAsync(string strSessionID)
        {
            return base.Channel.GetLicenseStatusAsync(strSessionID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetGateMessagesByTrackInfoIdAsync(string strSessionID, int iApplicationID, int iTrackInfoID, System.DateTime dtStart, System.DateTime dtEnd, int iStartIndex, int iStopIndex, bool bFilterNoneValid, string[] arrFields)
        {
            return base.Channel.GetGateMessagesByTrackInfoIdAsync(strSessionID, iApplicationID, iTrackInfoID, dtStart, dtEnd, iStartIndex, iStopIndex, bFilterNoneValid, arrFields);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetLatestGateRecordsAsync(string strSessionID, int iApplicationID, int iUserID, bool bFilterNotUsed)
        {
            return base.Channel.GetLatestGateRecordsAsync(strSessionID, iApplicationID, iUserID, bFilterNotUsed);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetUpdatedUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iStartIndex, int iStopIndex, int iViewID, System.DateTime dtSince)
        {
            return base.Channel.GetUpdatedUsersInGroupAsync(strSessionID, iApplicationID, strGroupName, iStartIndex, iStopIndex, iViewID, dtSince);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iViewID)
        {
            return base.Channel.GetUsersInGroupAsync(strSessionID, iApplicationID, strGroupName, iViewID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetUsersInUserTagAsync(string strSessionID, int iApplicationID, string strTagName)
        {
            return base.Channel.GetUsersInUserTagAsync(strSessionID, iApplicationID, strTagName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetUsersInUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID)
        {
            return base.Channel.GetUsersInUserTemplateAsync(strSessionID, iApplicationID, iUserTemplateID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetCurrentApplicationsAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetCurrentApplicationsAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SetUserMarkerColorAsync(string strSessionID, int iApplicationID, int iUserID, string strMarkerColor)
        {
            return base.Channel.SetUserMarkerColorAsync(strSessionID, iApplicationID, iUserID, strMarkerColor);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SetUserExpectedFuelConsumptionAsync(string strSessionID, int iApplicationID, int iUserID, double dExpectedFuelConsumption)
        {
            return base.Channel.SetUserExpectedFuelConsumptionAsync(strSessionID, iApplicationID, iUserID, dExpectedFuelConsumption);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> RemoveUserAsync(string strSessionID, int iApplicationID, int iUserID)
        {
            return base.Channel.RemoveUserAsync(strSessionID, iApplicationID, iUserID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SetUserPasswordAsync(string strSessionID, int iApplicationID, int iUserID, string strNewPassword)
        {
            return base.Channel.SetUserPasswordAsync(strSessionID, iApplicationID, iUserID, strNewPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetViewsAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetViewsAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetTagsInApplicationAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetTagsInApplicationAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SaveTagAsync(string strSessionID, int iApplicationID, int iTagID, string strName, string strDescription, int[] arrUserIDs)
        {
            return base.Channel.SaveTagAsync(strSessionID, iApplicationID, iTagID, strName, strDescription, arrUserIDs);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetDevicesByUserAsync(string strSessionID, int iApplicationID, int iUserID)
        {
            return base.Channel.GetDevicesByUserAsync(strSessionID, iApplicationID, iUserID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetDeviceCommandStatusAsync(string strSessionID, int iApplicationID, int iDeviceID)
        {
            return base.Channel.GetDeviceCommandStatusAsync(strSessionID, iApplicationID, iDeviceID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> ResetCommandQueueAsync(string strSessionID, int iApplicationID, int iDeviceID)
        {
            return base.Channel.ResetCommandQueueAsync(strSessionID, iApplicationID, iDeviceID);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapDeviceDefinition[]> GetManageableDeviceDefinitionsAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetManageableDeviceDefinitionsAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapUserTemplate[]> GetUserTemplatesAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetUserTemplatesAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<int> AddUserWithUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID, string strUsername, string strName, string strPassword, string strDescription)
        {
            return base.Channel.AddUserWithUserTemplateAsync(strSessionID, iApplicationID, iUserTemplateID, strUsername, strName, strPassword, strDescription);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AddDeviceAsync(
                    string strSessionID, 
                    int iApplicationID, 
                    int iOwnerID, 
                    string strDeviceName, 
                    string strIMEI, 
                    string strMSISDN, 
                    string strEmail, 
                    string strIP, 
                    string strPort, 
                    string strAPN, 
                    string strGPRSUsername, 
                    string strGPRSPassword, 
                    int iDeviceDefinitionID, 
                    int iMobileNetworkID, 
                    string strDevicePassword, 
                    DirectoryServiceReference1.OneWireBag[] lstOneWireVariables)
        {
            return base.Channel.AddDeviceAsync(strSessionID, iApplicationID, iOwnerID, strDeviceName, strIMEI, strMSISDN, strEmail, strIP, strPort, strAPN, strGPRSUsername, strGPRSPassword, iDeviceDefinitionID, iMobileNetworkID, strDevicePassword, lstOneWireVariables);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeUsernameAsync(string strSessionID, int iApplicationID, int iUserID, string strUsername, string strName)
        {
            return base.Channel.ChangeUsernameAsync(strSessionID, iApplicationID, iUserID, strUsername, strName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeUserDescriptionAsync(string strSessionID, int iApplicationID, int iUserID, string strDescription)
        {
            return base.Channel.ChangeUserDescriptionAsync(strSessionID, iApplicationID, iUserID, strDescription);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeUserSurnameAsync(string strSessionID, int iApplicationID, int iUserID, string strSurname)
        {
            return base.Channel.ChangeUserSurnameAsync(strSessionID, iApplicationID, iUserID, strSurname);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeDriverIDAsync(string strSessionID, int iApplicationID, int iUserID, string strDriverID)
        {
            return base.Channel.ChangeDriverIDAsync(strSessionID, iApplicationID, iUserID, strDriverID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> ChangeEmailAsync(string strSessionID, int iApplicationID, int iUserID, string strEmail)
        {
            return base.Channel.ChangeEmailAsync(strSessionID, iApplicationID, iUserID, strEmail);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulator> GetAccumulatorAsync(string strSessionID, int iApplicationID, int iUserID, string strName)
        {
            return base.Channel.GetAccumulatorAsync(strSessionID, iApplicationID, iUserID, strName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetAccumulatorsAsync(string strSessionID, int iApplicationID, int iUserID)
        {
            return base.Channel.GetAccumulatorsAsync(strSessionID, iApplicationID, iUserID);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulatorData> GetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, System.DateTime dtTime)
        {
            return base.Channel.GetAccumulatorValueAsync(strSessionID, iApplicationID, iAccumulatorID, dtTime);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulatorData> GetLatestAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID)
        {
            return base.Channel.GetLatestAccumulatorValueAsync(strSessionID, iApplicationID, iAccumulatorID);
        }
        
        public System.Threading.Tasks.Task SetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, double dblValue, System.DateTime dtTimeOfValue)
        {
            return base.Channel.SetAccumulatorValueAsync(strSessionID, iApplicationID, iAccumulatorID, dblValue, dtTimeOfValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DirectorySoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.DirectorySoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DirectorySoap))
            {
                return new System.ServiceModel.EndpointAddress("http://10.0.10.150/GpsGateServer/Services/directory.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.DirectorySoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://10.0.10.150/GpsGateServer/Services/directory.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            DirectorySoap,
            
            DirectorySoap12,
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\Connected Services\ReportingServiceReference\Reference.cs

﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Xml;

namespace ReportingServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://gpsgate.com/services/", ConfigurationName="ReportingServiceReference.ReportingSoap")]
    public interface ReportingSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetReports", ReplyAction="*")]
        System.Threading.Tasks.Task<ReportingServiceReference.GetReportsResponse> GetReportsAsync(ReportingServiceReference.GetReportsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GenerateReport", ReplyAction="*")]
        System.Threading.Tasks.Task<ReportingServiceReference.GenerateReportResponse> GenerateReportAsync(ReportingServiceReference.GenerateReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/FetchReport", ReplyAction="*")]
        System.Threading.Tasks.Task<ReportingServiceReference.FetchReportResponse> FetchReportAsync(ReportingServiceReference.FetchReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetReportStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<ReportingServiceReference.GetReportStatusResponse> GetReportStatusAsync(ReportingServiceReference.GetReportStatusRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/CancelReport", ReplyAction="*")]
        System.Threading.Tasks.Task<ReportingServiceReference.CancelReportResponse> CancelReportAsync(ReportingServiceReference.CancelReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetProcessingReports", ReplyAction="*")]
        System.Threading.Tasks.Task<ReportingServiceReference.GetProcessingReportsResponse> GetProcessingReportsAsync(ReportingServiceReference.GetProcessingReportsRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetReportsRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetReports", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.GetReportsRequestBody Body;
        
        public GetReportsRequest()
        {
        }
        
        public GetReportsRequest(ReportingServiceReference.GetReportsRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class GetReportsRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string strSessionID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int iApplicationID;
        
        public GetReportsRequestBody()
        {
        }
        
        public GetReportsRequestBody(string strSessionID, int iApplicationID)
        {
            this.strSessionID = strSessionID;
            this.iApplicationID = iApplicationID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetReportsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetReportsResponse", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.GetReportsResponseBody Body;
        
        public GetReportsResponse()
        {
        }
        
        public GetReportsResponse(ReportingServiceReference.GetReportsResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class GetReportsResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Xml.XmlElement GetReportsResult;
        
        public GetReportsResponseBody()
        {
        }
        
        public GetReportsResponseBody(System.Xml.XmlElement GetReportsResult)
        {
            this.GetReportsResult = GetReportsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GenerateReportRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GenerateReport", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.GenerateReportRequestBody Body;
        
        public GenerateReportRequest()
        {
        }
        
        public GenerateReportRequest(ReportingServiceReference.GenerateReportRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class GenerateReportRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string strSessionID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int iReportID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.DateTime startDate;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.DateTime endDate;
        
        public GenerateReportRequestBody()
        {
        }
        
        public GenerateReportRequestBody(string strSessionID, int iReportID, System.DateTime startDate, System.DateTime endDate)
        {
            this.strSessionID = strSessionID;
            this.iReportID = iReportID;
            this.startDate = startDate;
            this.endDate = endDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GenerateReportResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GenerateReportResponse", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.GenerateReportResponseBody Body;
        public XmlDocument GenerateReportResult;

        public GenerateReportResponse()
        {
        }
        
        public GenerateReportResponse(ReportingServiceReference.GenerateReportResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class GenerateReportResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Xml.XmlElement GenerateReportResult;
        
        public GenerateReportResponseBody()
        {
        }
        
        public GenerateReportResponseBody(System.Xml.XmlElement GenerateReportResult)
        {
            this.GenerateReportResult = GenerateReportResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class FetchReportRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="FetchReport", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.FetchReportRequestBody Body;
        
        public FetchReportRequest()
        {
        }
        
        public FetchReportRequest(ReportingServiceReference.FetchReportRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class FetchReportRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string strSessionID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int iHandleID;
        
        public FetchReportRequestBody()
        {
        }
        
        public FetchReportRequestBody(string strSessionID, int iHandleID)
        {
            this.strSessionID = strSessionID;
            this.iHandleID = iHandleID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class FetchReportResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="FetchReportResponse", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.FetchReportResponseBody Body;
        
        public FetchReportResponse()
        {
        }
        
        public FetchReportResponse(ReportingServiceReference.FetchReportResponseBody Body)
        {
            this.Body = Body;
        }

        public XmlDocument FetchReportResult { get; set; }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class FetchReportResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Xml.XmlElement FetchReportResult;
        
        public FetchReportResponseBody()
        {
        }
        
        public FetchReportResponseBody(System.Xml.XmlElement FetchReportResult)
        {
            this.FetchReportResult = FetchReportResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetReportStatusRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetReportStatus", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.GetReportStatusRequestBody Body;
        
        public GetReportStatusRequest()
        {
        }
        
        public GetReportStatusRequest(ReportingServiceReference.GetReportStatusRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class GetReportStatusRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string strSessionID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int iHandleID;
        
        public GetReportStatusRequestBody()
        {
        }
        
        public GetReportStatusRequestBody(string strSessionID, int iHandleID)
        {
            this.strSessionID = strSessionID;
            this.iHandleID = iHandleID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetReportStatusResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetReportStatusResponse", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.GetReportStatusResponseBody Body;
        
        public GetReportStatusResponse()
        {
        }
        
        public GetReportStatusResponse(ReportingServiceReference.GetReportStatusResponseBody Body)
        {
            this.Body = Body;
        }

        public XmlDocument GetReportStatusResult { get; set; }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class GetReportStatusResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Xml.XmlElement GetReportStatusResult;
        
        public GetReportStatusResponseBody()
        {
        }
        
        public GetReportStatusResponseBody(System.Xml.XmlElement GetReportStatusResult)
        {
            this.GetReportStatusResult = GetReportStatusResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CancelReportRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CancelReport", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.CancelReportRequestBody Body;
        
        public CancelReportRequest()
        {
        }
        
        public CancelReportRequest(ReportingServiceReference.CancelReportRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class CancelReportRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string strSessionID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int iHandleID;
        
        public CancelReportRequestBody()
        {
        }
        
        public CancelReportRequestBody(string strSessionID, int iHandleID)
        {
            this.strSessionID = strSessionID;
            this.iHandleID = iHandleID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CancelReportResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CancelReportResponse", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.CancelReportResponseBody Body;
        
        public CancelReportResponse()
        {
        }
        
        public CancelReportResponse(ReportingServiceReference.CancelReportResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class CancelReportResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Xml.XmlElement CancelReportResult;
        
        public CancelReportResponseBody()
        {
        }
        
        public CancelReportResponseBody(System.Xml.XmlElement CancelReportResult)
        {
            this.CancelReportResult = CancelReportResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetProcessingReportsRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetProcessingReports", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.GetProcessingReportsRequestBody Body;
        
        public GetProcessingReportsRequest()
        {
        }
        
        public GetProcessingReportsRequest(ReportingServiceReference.GetProcessingReportsRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class GetProcessingReportsRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string strSessionID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int iAppplicationID;
        
        public GetProcessingReportsRequestBody()
        {
        }
        
        public GetProcessingReportsRequestBody(string strSessionID, int iAppplicationID)
        {
            this.strSessionID = strSessionID;
            this.iAppplicationID = iAppplicationID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetProcessingReportsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetProcessingReportsResponse", Namespace="http://gpsgate.com/services/", Order=0)]
        public ReportingServiceReference.GetProcessingReportsResponseBody Body;
        
        public GetProcessingReportsResponse()
        {
        }
        
        public GetProcessingReportsResponse(ReportingServiceReference.GetProcessingReportsResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class GetProcessingReportsResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Xml.XmlElement GetProcessingReportsResult;
        
        public GetProcessingReportsResponseBody()
        {
        }
        
        public GetProcessingReportsResponseBody(System.Xml.XmlElement GetProcessingReportsResult)
        {
            this.GetProcessingReportsResult = GetProcessingReportsResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ReportingSoapChannel : ReportingServiceReference.ReportingSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ReportingSoapClient : System.ServiceModel.ClientBase<ReportingServiceReference.ReportingSoap>, ReportingServiceReference.ReportingSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ReportingSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ReportingSoapClient.GetBindingForEndpoint(endpointConfiguration), ReportingSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportingSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ReportingSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportingSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ReportingSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportingSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ReportingServiceReference.GetReportsResponse> ReportingServiceReference.ReportingSoap.GetReportsAsync(ReportingServiceReference.GetReportsRequest request)
        {
            return base.Channel.GetReportsAsync(request);
        }
        
        public System.Threading.Tasks.Task<ReportingServiceReference.GetReportsResponse> GetReportsAsync(string strSessionID, int iApplicationID)
        {
            ReportingServiceReference.GetReportsRequest inValue = new ReportingServiceReference.GetReportsRequest();
            inValue.Body = new ReportingServiceReference.GetReportsRequestBody();
            inValue.Body.strSessionID = strSessionID;
            inValue.Body.iApplicationID = iApplicationID;
            return ((ReportingServiceReference.ReportingSoap)(this)).GetReportsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ReportingServiceReference.GenerateReportResponse> ReportingServiceReference.ReportingSoap.GenerateReportAsync(ReportingServiceReference.GenerateReportRequest request)
        {
            return base.Channel.GenerateReportAsync(request);
        }
        
        public System.Threading.Tasks.Task<ReportingServiceReference.GenerateReportResponse> GenerateReportAsync(string strSessionID, int iReportID, System.DateTime startDate, System.DateTime endDate)
        {
            ReportingServiceReference.GenerateReportRequest inValue = new ReportingServiceReference.GenerateReportRequest();
            inValue.Body = new ReportingServiceReference.GenerateReportRequestBody();
            inValue.Body.strSessionID = strSessionID;
            inValue.Body.iReportID = iReportID;
            inValue.Body.startDate = startDate;
            inValue.Body.endDate = endDate;
            return ((ReportingServiceReference.ReportingSoap)(this)).GenerateReportAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ReportingServiceReference.FetchReportResponse> ReportingServiceReference.ReportingSoap.FetchReportAsync(ReportingServiceReference.FetchReportRequest request)
        {
            return base.Channel.FetchReportAsync(request);
        }
        
        public System.Threading.Tasks.Task<ReportingServiceReference.FetchReportResponse> FetchReportAsync(string strSessionID, int iHandleID)
        {
            ReportingServiceReference.FetchReportRequest inValue = new ReportingServiceReference.FetchReportRequest();
            inValue.Body = new ReportingServiceReference.FetchReportRequestBody();
            inValue.Body.strSessionID = strSessionID;
            inValue.Body.iHandleID = iHandleID;
            return ((ReportingServiceReference.ReportingSoap)(this)).FetchReportAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ReportingServiceReference.GetReportStatusResponse> ReportingServiceReference.ReportingSoap.GetReportStatusAsync(ReportingServiceReference.GetReportStatusRequest request)
        {
            return base.Channel.GetReportStatusAsync(request);
        }
        
        public System.Threading.Tasks.Task<ReportingServiceReference.GetReportStatusResponse> GetReportStatusAsync(string strSessionID, int iHandleID)
        {
            ReportingServiceReference.GetReportStatusRequest inValue = new ReportingServiceReference.GetReportStatusRequest();
            inValue.Body = new ReportingServiceReference.GetReportStatusRequestBody();
            inValue.Body.strSessionID = strSessionID;
            inValue.Body.iHandleID = iHandleID;
            return ((ReportingServiceReference.ReportingSoap)(this)).GetReportStatusAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ReportingServiceReference.CancelReportResponse> ReportingServiceReference.ReportingSoap.CancelReportAsync(ReportingServiceReference.CancelReportRequest request)
        {
            return base.Channel.CancelReportAsync(request);
        }
        
        public System.Threading.Tasks.Task<ReportingServiceReference.CancelReportResponse> CancelReportAsync(string strSessionID, int iHandleID)
        {
            ReportingServiceReference.CancelReportRequest inValue = new ReportingServiceReference.CancelReportRequest();
            inValue.Body = new ReportingServiceReference.CancelReportRequestBody();
            inValue.Body.strSessionID = strSessionID;
            inValue.Body.iHandleID = iHandleID;
            return ((ReportingServiceReference.ReportingSoap)(this)).CancelReportAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ReportingServiceReference.GetProcessingReportsResponse> ReportingServiceReference.ReportingSoap.GetProcessingReportsAsync(ReportingServiceReference.GetProcessingReportsRequest request)
        {
            return base.Channel.GetProcessingReportsAsync(request);
        }
        
        public System.Threading.Tasks.Task<ReportingServiceReference.GetProcessingReportsResponse> GetProcessingReportsAsync(string strSessionID, int iAppplicationID)
        {
            ReportingServiceReference.GetProcessingReportsRequest inValue = new ReportingServiceReference.GetProcessingReportsRequest();
            inValue.Body = new ReportingServiceReference.GetProcessingReportsRequestBody();
            inValue.Body.strSessionID = strSessionID;
            inValue.Body.iAppplicationID = iAppplicationID;
            return ((ReportingServiceReference.ReportingSoap)(this)).GetProcessingReportsAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ReportingSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ReportingSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ReportingSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://10.0.10.150/GpsGateServer/Services/reporting.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ReportingSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://10.0.10.150/GpsGateServer/Services/reporting.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ReportingSoap,
            
            ReportingSoap12,
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\DependancyInjection\GpsgateAccessModule.cs

﻿using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Infrastructure.DependancyInjection
{
    public class GpsgateAccessModule 
    {



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\DependancyInjection\IGPSGateDirectoryWebservice.cs

﻿using FMS.Domain.Entities;
using FMS.Domain.Entities.Auth;
using FMS.Services.GPSServiceModels;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Infrastructure.DependancyInjection
{
  public interface IGPSGateDirectoryWebservice
    {

        Task<string> LoginAsyn(GPSGateConections user);
        Task<List<VehicleConsumptionServiceModel>> GetFuelConsumptionReportAsync(GPSGateConections conn, int FuelConsumptionReportID, DateTime from, DateTime to);

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\DependancyInjection\ATG\IATGCommunitcationService.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//using FMS.Services.ATGServiceModels;
using FMS.Services.Models.ATGModels.Probe;

namespace FMS.Infrastructure.DependancyInjection.ATG
{
    public interface IATGCommunitcationService
    {     

        Task<ProbeMeasurementsResponse> GetTankLevelAsync(int probeId);
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\Webservice\GPSGateDirectoryWebservice.cs

﻿using FMS.Domain.Entities;
using FMS.Domain.Entities.Auth;
using FMS.Infrastructure.DependancyInjection;
using FMS.Services.GPSServiceModels;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace FMS.Infrastructure.Webservice
{

    /// <summary>
    /// Provides services to interact with GPSGate.
    /// </summary>
    public class GPSGateDirectoryWebservice : IGPSGateDirectoryWebservice
    {
        private readonly DirectoryServiceReference1.DirectorySoapClient _DirectorySoapClient;
        private readonly ReportingServiceReference.ReportingSoapClient _ReportSoapClient;



        public GPSGateDirectoryWebservice()
        {
            _DirectorySoapClient = new DirectoryServiceReference1.DirectorySoapClient(DirectoryServiceReference1.DirectorySoapClient.EndpointConfiguration.DirectorySoap12);
            _ReportSoapClient = new ReportingServiceReference.ReportingSoapClient(ReportingServiceReference.ReportingSoapClient.EndpointConfiguration.ReportingSoap12);
        }


        /// <summary>
        /// Retrieves the fuel consumption report from GPSGate.
        /// </summary>
        /// <param name="conn">The GPSGate connection.</param>
        /// <param name="FuelConsumptionReportID">The ID of the fuel consumption report.</param>
        /// <param name="from">The start date of the report.</param>
        /// <param name="to">The end date of the report.</param>
        /// <returns>A list of VehicleConsumptionModel objects representing the fuel consumption report.</returns>
        public async Task<List<VehicleConsumptionServiceModel>> GetFuelConsumptionReportAsync(GPSGateConections conn, int FuelConsumptionReportID, DateTime from, DateTime to)
        {
            string fromdatestr = from.ToString("o", CultureInfo.InvariantCulture);
            string todatestr = to.ToString("o", CultureInfo.InvariantCulture);


            var results = await _ReportSoapClient.GenerateReportAsync(conn.SessionID, FuelConsumptionReportID, DateTime.Parse(fromdatestr), DateTime.Parse(todatestr));

            try
            {
                CheckError(results.Body.GenerateReportResult);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }

            // Parse the report data into an XDocument object
            var reportXml = XDocument.Load(new StringReader(results.Body.GenerateReportResult.OuterXml));

            //state can be Done or Processing

            // Retrieve the handleid and state data
            var handleId = reportXml.Descendants("handleid").FirstOrDefault()?.Value;
            var state = reportXml.Descendants("state").FirstOrDefault()?.Value;


            // Change handleid to int
            int.TryParse(handleId, out int handleIdInt);

            // Check if report is ready
            while (state == "Processing")
            {
                // If not ready, wait 1 second and check again
                await Task.Delay(1000);
                await GetReportStatus(conn, handleIdInt);

                var reportstatus = await _ReportSoapClient.GetReportStatusAsync(conn.SessionID, handleIdInt);

                state = reportstatus.Body.GetReportStatusResult.ToString();
            }


            // If "Done", get the report



            var report = await _ReportSoapClient.FetchReportAsync(conn.SessionID, handleIdInt);

            // Parse the report data into an XDocument object
            var reportXmls = XDocument.Load(new StringReader(report.Body.FetchReportResult.OuterXml));

            //remove namespace from xml 

            reportXmls.Descendants().Attributes().Where(a => a.IsNamespaceDeclaration).Remove();


            var headerRow = reportXmls.Descendants("{http://gpsgate.com/xml/}Row").FirstOrDefault(r => r.Attribute("kind")?.Value == "h");
            var dataRows = reportXmls.Descendants("{http://gpsgate.com/xml/}Row").Where(r => r.Attribute("kind")?.Value == "i").ToList();


            if (headerRow == null || !dataRows.Any())
            {
                throw new ArgumentException("Invalid report format");
            }

            var headcell = headerRow.Descendants("{http://gpsgate.com/xml/}Cell").ToList();

            var result = new List<VehicleConsumptionServiceModel>();


            foreach (var dataRow in dataRows)
            {

                var consumption = ParseVehicleConsumption(dataRow);
                result.Add(consumption);
            }


            return result;


        }

        // <summary>
        /// Parses the VehicleConsumption data from the XML row.
        /// </summary>
        /// <param name="dataRow">The XML row containing the VehicleConsumption data.</param>
        /// <returns>A VehicleConsumptionModel object.</returns>
        public VehicleConsumptionServiceModel ParseVehicleConsumption(XElement dataRow)
        {

            var consumption = new VehicleConsumptionServiceModel();

            foreach (var datacell in dataRow.Descendants("{http://gpsgate.com/xml/}Cell"))
            {
                var refValue = datacell.Attribute("ref")?.Value;

                if (refValue == null)
                {
                    throw new ArgumentException("Wrong report format");
                }

                //reportformat 
                //< Cell ref= "i_0_0_0" > vehicleID </ Cell >
                //  < Cell ref= "i_0_0_1" > EngHrsIgnitionHrs </ Cell >
                //  < Cell ref= "i_0_0_2" > TotalFuelfromFuelProbe </ Cell >
                //  < Cell ref= "i_0_0_3" > EnginehrsFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_4" > TotalFuelFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_5" > GPSLastLocation </ Cell >
                //  < Cell ref= "i_0_0_6" > TotalDistance </ Cell >
                //  < Cell ref= "i_0_0_7" > Avgspeed </ Cell >
                //  < Cell ref= "i_0_0_8" > MaxSpeed </ Cell >
                //  < Cell ref= "i_0_0_9" > TotalFuelNormalFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_10" > TotalFuelIdleFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_11" > TotalEngHrsNormalFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_12" > TotalEnghrsIdleFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_13" > Date </ Cell >
                //get property 

                switch (refValue)
                {
                    case "i_0_0_0":
                        consumption.VehicleId = int.Parse(datacell.Value);
                        break;
                    case "i_0_0_1":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.EngHours = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_2":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.TotalFuel = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_3":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.FlowMeterEngineHrs = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_4":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.FlowMeterFuelUsed = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_5":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.Site.Name = datacell.Value;
                        }
                        break;
                    case "i_0_0_6":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.TotalDistance = decimal.Parse(datacell.Value, NumberStyles.Float, CultureInfo.InvariantCulture);
                        }
                        break;

                    case "i_0_0_7":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.AvgSpeed = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_8":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.MaxSpeed = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_13":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.Date = DateTime.Parse(datacell.Value);
                        }
                        break;
                    default:
                        // Ignore unknown properties
                        break;


                }
            }

            return consumption;

        }



        /// <summary>
        /// Logs into the GPSGate service.
        /// </summary>
        /// <param name="conn">The GPSGate connection.</param>
        /// <returns>A Task representing the asynchronous operation.</returns>
        public async Task<string> LoginAsyn(GPSGateConections conn)
        {
            var results = await _DirectorySoapClient.LoginAsync(conn.GPSGateUser.UserName, conn.GPSGateUser.Password, conn.ApplicationID);

            try
            {
                CheckError(results);
            }
            catch (Exception e)
            {
                return e.Message;
            }

            var xmlDoc = new XmlDocument();

            xmlDoc.LoadXml(results.OuterXml);

            var sessionIDNode = xmlDoc.SelectSingleNode("//sessionId");



            return results.InnerText;
        }
    

    /// <summary>
    /// Retrieves the status of the report from GPSGate.
    /// </summary>
    /// <param name="conn">The GPSGate connection.</param>
    /// <param name="handleId">The handle ID of the report.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task<string> GetReportStatus(GPSGateConections conn, int handleId)
    {
        try
        {
            //check on GPSGATE API 

            var reportStatus = await _ReportSoapClient.GetReportStatusAsync(conn.SessionID, handleId);


            //Ensure that the result is not null or empty 
            var resultXml = "<reportHandler>" + reportStatus.Body.GetReportStatusResult?.InnerXml + "</reportHandler>";

            if (string.IsNullOrWhiteSpace(resultXml))
            {
                throw new InvalidOperationException("Received empty or null Responce for report status");
            }



            // Deserialize the report data into a ReportHandler object

            var serializer = new XmlSerializer(typeof(ReportHandler));
            //retrieve the handleid and state data

            var reportHandler = (ReportHandler)serializer.Deserialize(new XmlTextReader(reportStatus.Body.GetReportStatusResult.ToString()));

            //retrieve the handleid and state data

            var state = reportHandler.State;
            var handleID = reportHandler.HandleId;

            //return the status 

            return state;
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }

    }


    public void CheckError(XmlNode element)
    {
        if (element != null && element.FirstChild != null && element.FirstChild.Name == "exception")
        {
            throw new Exception(element.SelectSingleNode("//exception/message").InnerText);
        }




    }


}  


        [XmlRoot(ElementName = "reportHandler")]
        public class ReportHandler
        {
            [XmlElement(ElementName = "handleid")]
            public int HandleId { get; set; }

            [XmlElement(ElementName = "state")]
            public string State { get; set; }

            public static implicit operator XmlDocument(ReportHandler v)
            {
                throw new NotImplementedException();
            }
        }

    


}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\Webservice\ATGService\ATGCommunicationService.cs

﻿using FMS.Infrastructure.Common.JsonSerialConvertors;
using FMS.Infrastructure.DependancyInjection.ATG;
//using FMS.Services.ATGServiceModels;
using FMS.Services.Models.ATGModels.Probe;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Infrastructure.Webservice.ATGService
{
    /// <summary>
    ///  Handles communication with the ATG system
    /// </summary>
    public class ATGCommunicationService : IATGCommunitcationService
    {

        private readonly HttpClient _httpClient;

        private readonly ATGServiceConfig _config;


        public ATGCommunicationService(HttpClient httpClient, ATGServiceConfig config)
        {
            _httpClient = httpClient;
            _config = config;

            //Set up the HTTPclient Authorization header for basic authentication
            var byteArray = Encoding.ASCII.GetBytes($"{_config.Username}:{_config.Password}");
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));


        }

        public async Task<ProbeMeasurementsResponse> GetTankLevelAsync(int probeId)
        {
           
            
            //construct the request object and serialize it to json
            var requestModel = new ProbeGetMeasurementsRequest(probeId);

            var jsonRequest = JsonConvert.SerializeObject(requestModel);


            //send the Request to the ATG system and get the response
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync($"{_config.BaseUrl}/getProbeMeasurements", content);

            if(response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();

                var jsonConverter = new CustomJsonConverter();

                return jsonConverter.Deserialize<ProbeMeasurementsResponse>(jsonResponse);
            }
            else
            {
                //handler errors unauthorized, bad request etc

                var errorResponse = await response.Content.ReadAsStringAsync();

                throw new HttpRequestException(($"Error fetching probe measurements: {response.StatusCode}, Content: {response.Content}"));

            }
 }

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\Webservice\ATGService\ATGServiceConfig.cs

using System;


namespace FMS.Infrastructure.Webservice.ATGService;


public class ATGServiceConfig
{
    public string BaseUrl { get; set; } = null!;

    public string Username { get; set; }

    public string Password { get; set; }   


}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Infrastructure\Webservice\GPSService\GPSGateDirectoryWebservice.cs

﻿using FMS.Domain.Entities;
using FMS.Domain.Entities.Auth;
using FMS.Infrastructure.DependancyInjection;
using FMS.Services.GPSServiceModels;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace FMS.Infrastructure.Webservice.GPSService
{

    /// <summary>
    /// Provides services to interact with GPSGate.
    /// </summary>
    public class GPSGateDirectoryWebservice : IGPSGateDirectoryWebservice
    {
        private readonly DirectoryServiceReference1.DirectorySoapClient _DirectorySoapClient;
        private readonly ReportingServiceReference.ReportingSoapClient _ReportSoapClient;



        public GPSGateDirectoryWebservice()
        {
            _DirectorySoapClient = new DirectoryServiceReference1.DirectorySoapClient(DirectoryServiceReference1.DirectorySoapClient.EndpointConfiguration.DirectorySoap12);
            _ReportSoapClient = new ReportingServiceReference.ReportingSoapClient(ReportingServiceReference.ReportingSoapClient.EndpointConfiguration.ReportingSoap12);
        }







        /// <summary>
        /// Retrieves the fuel consumption report from GPSGate.
        /// </summary>
        /// <param name="conn">The GPSGate connection.</param>
        /// <param name="FuelConsumptionReportID">The ID of the fuel consumption report.</param>
        /// <param name="from">The start date of the report.</param>
        /// <param name="to">The end date of the report.</param>
        /// <returns>A list of VehicleConsumptionModel objects representing the fuel consumption report.</returns>
        public async Task<List<VehicleConsumptionServiceModel>> GetFuelConsumptionReportAsync(GPSGateConections conn, int FuelConsumptionReportID, DateTime from, DateTime to)
        {
            string fromdatestr = from.ToString("o", CultureInfo.InvariantCulture);
            string todatestr = to.ToString("o", CultureInfo.InvariantCulture);


            var results = await _ReportSoapClient.GenerateReportAsync(conn.SessionID, FuelConsumptionReportID, DateTime.Parse(fromdatestr), DateTime.Parse(todatestr));

            try
            {
                CheckError(results.Body.GenerateReportResult);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }

            // Parse the report data into an XDocument object
            var reportXml = XDocument.Load(new StringReader(results.Body.GenerateReportResult.OuterXml));

            //state can be Done or Processing

            // Retrieve the handleid and state data
            var handleId = reportXml.Descendants("handleid").FirstOrDefault()?.Value;
            var state = reportXml.Descendants("state").FirstOrDefault()?.Value;


            // Change handleid to int
            int.TryParse(handleId, out int handleIdInt);

            // Check if report is ready
            while (state == "Processing")
            {
                // If not ready, wait 1 second and check again
                await Task.Delay(1000);

                state = await GetReportStatus(conn, handleIdInt);

            }


            // If "Done", get the report



            var report = await _ReportSoapClient.FetchReportAsync(conn.SessionID, handleIdInt);

            // Parse the report data into an XDocument object
            var reportXmls = XDocument.Load(new StringReader(report.Body.FetchReportResult.OuterXml));

            //remove namespace from xml 

            reportXmls.Descendants().Attributes().Where(a => a.IsNamespaceDeclaration).Remove();


            var headerRow = reportXmls.Descendants("{http://gpsgate.com/xml/}Row").FirstOrDefault(r => r.Attribute("kind")?.Value == "h");
            var dataRows = reportXmls.Descendants("{http://gpsgate.com/xml/}Row").Where(r => r.Attribute("kind")?.Value == "i").ToList();


            if (headerRow == null || !dataRows.Any())
            {
                throw new ArgumentException("Invalid report format");
            }

            var headcell = headerRow.Descendants("{http://gpsgate.com/xml/}Cell").ToList();

            var result = new List<VehicleConsumptionServiceModel>();


            foreach (var dataRow in dataRows)
            {

                var consumption = ParseVehicleConsumption(dataRow);
                result.Add(consumption);
            }


            return result;


        }

        // <summary>
        /// Parses the VehicleConsumption data from the XML row.
        /// </summary>
        /// <param name="dataRow">The XML row containing the VehicleConsumption data.</param>
        /// <returns>A VehicleConsumptionModel object.</returns>
        public VehicleConsumptionServiceModel ParseVehicleConsumption(XElement dataRow)
        {

            var consumption = new VehicleConsumptionServiceModel();

            foreach (var datacell in dataRow.Descendants("{http://gpsgate.com/xml/}Cell"))
            {
                var refValue = datacell.Attribute("ref")?.Value;

                if (refValue == null)
                {
                    throw new ArgumentException("Wrong report format");
                }

                //reportformat 
                //< Cell ref= "i_0_0_0" > vehicleID </ Cell >
                //  < Cell ref= "i_0_0_1" > EngHrsIgnitionHrs </ Cell >
                //  < Cell ref= "i_0_0_2" > TotalFuelfromFuelProbe </ Cell >
                //  < Cell ref= "i_0_0_3" > EnginehrsFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_4" > TotalFuelFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_5" > GPSLastLocation </ Cell >
                //  < Cell ref= "i_0_0_6" > TotalDistance </ Cell >
                //  < Cell ref= "i_0_0_7" > Avgspeed </ Cell >
                //  < Cell ref= "i_0_0_8" > MaxSpeed </ Cell >
                //  < Cell ref= "i_0_0_9" > TotalFuelNormalFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_10" > TotalFuelIdleFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_11" > TotalEngHrsNormalFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_12" > TotalEnghrsIdleFlowmeter </ Cell >
                //  < Cell ref= "i_0_0_13" > Date </ Cell >
                //get property 

                switch (refValue)
                {
                    case "i_0_0_0":
                        consumption.VehicleId = int.Parse(datacell.Value);
                        break;
                    case "i_0_0_1":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.EngHours = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_2":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.TotalFuel = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_3":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.FlowMeterEngineHrs = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_4":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.FlowMeterFuelUsed = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_5":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.Site.Name = datacell.Value;
                        }
                        break;
                    case "i_0_0_6":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.TotalDistance = decimal.Parse(datacell.Value, NumberStyles.Float, CultureInfo.InvariantCulture);
                        }
                        break;

                    case "i_0_0_7":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.AvgSpeed = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_8":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.MaxSpeed = decimal.Parse(datacell.Value, CultureInfo.InvariantCulture);
                        }
                        break;
                    case "i_0_0_13":
                        if (!string.IsNullOrEmpty(datacell.Value))
                        {
                            consumption.Date = DateTime.Parse(datacell.Value);
                        }
                        break;
                    default:
                        // Ignore unknown properties
                        break;


                }
            }

            return consumption;

        }



        /// <summary>
        /// Logs into the GPSGate service.
        /// </summary>
        /// <param name="conn">The GPSGate connection.</param>
        /// <returns>A Task representing the asynchronous operation.</returns>
        public async Task<string> LoginAsyn(GPSGateConections conn)
        {
            var results = await _DirectorySoapClient.LoginAsync(conn.GPSGateUser.UserName, conn.GPSGateUser.Password, conn.ApplicationID);

            try
            {
                CheckError(results);
            }
            catch (Exception e)
            {
                return e.Message;
            }

            var xmlDoc = new XmlDocument();

            xmlDoc.LoadXml(results.OuterXml);

            var sessionIDNode = xmlDoc.SelectSingleNode("//sessionId");



            return results.InnerText;
        }


        /// <summary>
        /// Retrieves the status of the report from GPSGate.
        /// </summary>
        /// <param name="conn">The GPSGate connection.</param>
        /// <param name="handleId">The handle ID of the report.</param>
        /// <returns>A Task representing the asynchronous operation.</returns>
        private async Task<string> GetReportStatus(GPSGateConections conn, int handleId)
        {
            try
            {
                //check on GPSGATE API 

                var reportStatus = await _ReportSoapClient.GetReportStatusAsync(conn.SessionID, handleId);

                //Ensure that the result is not null or empty 
                var resultXml = "<reportHandler>" + reportStatus.Body.GetReportStatusResult?.InnerXml + "</reportHandler>";

                if (string.IsNullOrWhiteSpace(resultXml))
                {
                    throw new InvalidOperationException("Received empty or null Responce for report status");
                }

                var serializer = new XmlSerializer(typeof(ReportHandler));

                ReportHandler reportHandler;

                using (var reader = new StringReader(resultXml))
                {

                    reportHandler = (ReportHandler)serializer.Deserialize(reader);
                }
                //retrieve the handleid and state data
                var state = reportHandler.State;

                //return the status 

                return state;
            }
            catch (Exception e)
            {
                Console.WriteLine("Error in GetReportStatus: " + e.Message);
                throw;
            }


        }

        public void CheckError(XmlNode element)
        {
            if (element != null && element.FirstChild != null && element.FirstChild.Name == "exception")
            {
                throw new Exception(element.SelectSingleNode("//exception/message").InnerText);
            }




        }


    }


    [XmlRoot(ElementName = "reportHandler")]
    public class ReportHandler
    {
        [XmlElement(ElementName = "handleid")]
        public int HandleId { get; set; }

        [XmlElement(ElementName = "state")]
        public string State { get; set; }

        public static implicit operator XmlDocument(ReportHandler v)
        {
            throw new NotImplementedException();
        }
    }




}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Persistence\DataAccess\GpsdataContext.cs

﻿using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using FMS.Domain.Entities;

namespace FMS.Persistence.DataAccess;
public partial class GpsdataContext : DbContext
{
     public GpsdataContext()
    {
    }

    public GpsdataContext(DbContextOptions<GpsdataContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Alarm> Alarms { get; set; }

    public virtual DbSet<Alertrecord> Alertrecords { get; set; }

    public virtual DbSet<Asset> Assets { get; set; }

    public virtual DbSet<Calibrationdatum> Calibrationdata { get; set; }

    public virtual DbSet<Configuration> Configurations { get; set; }

    public virtual DbSet<Device> Devices { get; set; }

    public virtual DbSet<Devicemanufacturer> Devicemanufacturers { get; set; }

    public virtual DbSet<Devicemodel> Devicemodels { get; set; }


    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Expectedaverage> Expectedaverages { get; set; }

    public virtual DbSet<Expectedaverageclassification> Expectedaverageclassifications { get; set; }

    public virtual DbSet<Fuelrefil> Fuelrefils { get; set; }

    public virtual DbSet<Intankdelivery> Intankdeliveries { get; set; }

    public virtual DbSet<Issuecategory> Issuecategories { get; set; }

    public virtual DbSet<Issuepriority> Issuepriorities { get; set; }

    public virtual DbSet<Issuestatus> Issuestatuses { get; set; }

    public virtual DbSet<Issuetracker> Issuetrackers { get; set; }

    public virtual DbSet<Pts> Pts { get; set; }

    public virtual DbSet<Pumptransaction> Pumptransactions { get; set; }

    public virtual DbSet<Site> Sites { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<TagGroup> TagGroups { get; set; }

    public virtual DbSet<Tank> Tanks { get; set; }

    public virtual DbSet<Tankmeasurement> Tankmeasurements { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Usertype> Usertypes { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<Vehicleconsumption> Vehicleconsumptions { get; set; }

    public virtual DbSet<Vehiclemanufacturer> Vehiclemanufacturers { get; set; }

    public virtual DbSet<Vehiclemodel> Vehiclemodels { get; set; }

    public virtual DbSet<Vehicletype> Vehicletypes { get; set; }


    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
    //  => optionsBuilder.UseMySql("server=10.0.10.150;port=3306;database=gpsdata;user=root;password=Niwewenamimi1000;connection timeout=10000;command timeout=10000", Microsoft.EntityFrameworkCore.ServerVersion.Parse("5.5.61-mysql"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("latin1_swedish_ci")
            .HasCharSet("latin1");

        modelBuilder.Entity<Alarm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("alarm");

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("id");
            entity.Property(e => e.Description).HasMaxLength(300);
            entity.Property(e => e.Name).HasMaxLength(45);
            entity.Property(e => e.Priority).HasMaxLength(45);
        });

        modelBuilder.Entity<Alertrecord>(entity =>
        {
            entity.HasKey(e => e.AlertId).HasName("PRIMARY");

            entity.ToTable("alertrecord");

            entity.Property(e => e.AlertId).HasColumnType("int(11)");
            entity.Property(e => e.Code).HasColumnType("int(11)");
            entity.Property(e => e.ConfigurationId).HasMaxLength(8);
            entity.Property(e => e.DeviceNumber).HasColumnType("int(11)");
            entity.Property(e => e.DeviceType).HasMaxLength(20);
            entity.Property(e => e.PacketId)
                .HasColumnType("int(11)")
                .HasColumnName("PacketID");
            entity.Property(e => e.Ptsid)
                .HasMaxLength(23)
                .HasColumnName("PTSId");
            entity.Property(e => e.State).HasMaxLength(20);
        });

        modelBuilder.Entity<Asset>(entity =>
        {
            entity.HasKey(e => e.AssetId).HasName("PRIMARY");

            entity.ToTable("asset");

            entity.HasIndex(e => e.VehicleManufacturerId, "VehicleManufacturerID");

            entity.HasIndex(e => e.VehicleModelId, "VehicleModelID");

            entity.HasIndex(e => e.VehicleTypeId, "VehicleTypeID");

            entity.Property(e => e.AssetId)
                .HasMaxLength(255)
                .HasColumnName("AssetID");
            entity.Property(e => e.SiteId)
                .HasMaxLength(255)
                .HasColumnName("SiteID");
            entity.Property(e => e.VehicleManufacturerId)
                .HasColumnType("int(11)")
                .HasColumnName("VehicleManufacturerID");
            entity.Property(e => e.VehicleModelId)
                .HasColumnType("int(11)")
                .HasColumnName("VehicleModelID");
            entity.Property(e => e.VehicleTypeId)
                .HasColumnType("int(11)")
                .HasColumnName("VehicleTypeID");

            entity.HasOne(d => d.VehicleManufacturer).WithMany(p => p.Assets)
                .HasForeignKey(d => d.VehicleManufacturerId)
                .HasConstraintName("asset_ibfk_2");

            entity.HasOne(d => d.VehicleModel).WithMany(p => p.Assets)
                .HasForeignKey(d => d.VehicleModelId)
                .HasConstraintName("asset_ibfk_1");

            entity.HasOne(d => d.VehicleType).WithMany(p => p.Assets)
                .HasForeignKey(d => d.VehicleTypeId)
                .HasConstraintName("asset_ibfk_3");
        });

        modelBuilder.Entity<Calibrationdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("calibrationdata");

            entity.HasIndex(e => e.VehicleId, "calibrationDataRow_idx");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.CalibrationData).HasColumnType("text");
            entity.Property(e => e.CalibrationDate).HasColumnName("calibrationDate");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(45)
                .HasColumnName("VehicleID");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Calibrationdata)
                .HasPrincipalKey(p => p.HyoungNo)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("calibrationData_vehicle");
        });

        modelBuilder.Entity<Configuration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("configuration");

            entity.Property(e => e.Id).HasColumnType("int(11)");
            entity.Property(e => e.Configuration1).HasColumnName("Configuration");
            entity.Property(e => e.ConfigurationId).HasMaxLength(8);
            entity.Property(e => e.PacketId)
                .HasColumnType("int(11)")
                .HasColumnName("PacketID");
            entity.Property(e => e.Ptsid)
                .HasMaxLength(45)
                .HasColumnName("PTSId");
        });

        modelBuilder.Entity<Device>(entity =>
        {
            entity.HasKey(e => e.DeviceImei).HasName("PRIMARY");

            entity.ToTable("device");

            entity.Property(e => e.DeviceImei)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("DeviceIMEI");
            entity.Property(e => e.DeviceMakerId)
                .HasColumnType("int(11)")
                .HasColumnName("DeviceMakerID");
            entity.Property(e => e.DevicePhoneNumber).HasColumnType("int(11)");
        });

        modelBuilder.Entity<Devicemanufacturer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("devicemanufacturer");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.Name).HasMaxLength(45);
        });

        modelBuilder.Entity<Devicemodel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("devicemodel");

            entity.HasIndex(e => e.DevicemanufacturerId, "deviceModel_deviceManufaturer_idx");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.DevicemanufacturerId)
                .HasColumnType("int(11)")
                .HasColumnName("DevicemanufacturerID");
            entity.Property(e => e.Name)
                .HasMaxLength(45)
                .HasColumnName("name");

            entity.HasOne(d => d.Devicemanufacturer).WithMany(p => p.Devicemodels)
                .HasForeignKey(d => d.DevicemanufacturerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("deviceModel_deviceManufaturer");
        });


        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("employee");

            entity.HasIndex(e => e.SiteId, "Employee_site_idx");

            entity.HasIndex(e => e.NationalId, "NationalID_UNIQUE").IsUnique();

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("id");
            entity.Property(e => e.EmployeeWorkNo)
                .HasMaxLength(45)
                .HasDefaultValueSql("'New'");
            entity.Property(e => e.EmployeephoneNumber)
                .HasMaxLength(45)
                .HasDefaultValueSql("'0700000000'")
                .HasColumnName("employeephoneNumber");
            entity.Property(e => e.Employeestatus)
                .HasMaxLength(45)
                .HasColumnName("employeestatus");
            entity.Property(e => e.FullName)
                .HasMaxLength(45)
                .HasDefaultValueSql("'Employee Name'");
            entity.Property(e => e.NationalId)
                .HasColumnType("bigint(20)")
                .HasColumnName("NationalID");
            entity.Property(e => e.SiteId)
                .HasColumnType("int(11)")
                .HasColumnName("SiteID");

            entity.HasOne(d => d.Site).WithMany(p => p.Employees)
                .HasForeignKey(d => d.SiteId)
                .HasConstraintName("Employee_site");
        });

        modelBuilder.Entity<Expectedaverage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("expectedaverage");

            entity.HasIndex(e => e.ExpectedAverageClassificationId, "Expected_classification_idx");

            entity.HasIndex(e => e.VehicleId, "Expected_vehicle_idx");

            entity.HasIndex(e => e.SiteId, "Site_idx");

            entity.HasIndex(e => new { e.VehicleId, e.SiteId, e.ExpectedAverageClassificationId }, "UniqueRecord").IsUnique();

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.ExpectedAverageClassificationId)
                .HasColumnType("int(11)")
                .HasColumnName("ExpectedAverageClassificationID");
            entity.Property(e => e.ExpectedAverageValue).HasPrecision(5, 2);
            entity.Property(e => e.SiteId)
                .HasColumnType("int(11)")
                .HasColumnName("SiteID");
            entity.Property(e => e.VehicleId)
                .HasColumnType("int(11)")
                .HasColumnName("VehicleID");

            entity.HasOne(d => d.ExpectedAverageClassification).WithMany(p => p.Expectedaverages)
                .HasForeignKey(d => d.ExpectedAverageClassificationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Expected_classification");

            entity.HasOne(d => d.Site).WithMany(p => p.Expectedaverages)
                .HasForeignKey(d => d.SiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Expected_site");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Expectedaverages)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Expected_vehicle");
        });

        modelBuilder.Entity<Expectedaverageclassification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("expectedaverageclassification");

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Name).HasMaxLength(545);
        });

        modelBuilder.Entity<Fuelrefil>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("fuelrefil");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.Duration).HasPrecision(10);
            entity.Property(e => e.GpsfuelRefil)
                .HasPrecision(10)
                .HasColumnName("GPSFuelRefil");
            entity.Property(e => e.ManualGpsfuelrefil)
                .HasPrecision(10)
                .HasColumnName("ManualGPSFuelrefil");
            entity.Property(e => e.VehicleId)
                .HasColumnType("int(11)")
                .HasColumnName("vehicleID");
        });

        modelBuilder.Entity<Intankdelivery>(entity =>
        {
            entity.HasKey(e => e.DeliveryId).HasName("PRIMARY");

            entity.ToTable("intankdelivery");

            entity.Property(e => e.DeliveryId).HasColumnType("int(11)");
            entity.Property(e => e.AbsoluteProductTcvolume).HasColumnName("AbsoluteProductTCVolume");
            entity.Property(e => e.ConfigurationId).HasMaxLength(8);
            entity.Property(e => e.EndProductTcvolume).HasColumnName("EndProductTCVolume");
            entity.Property(e => e.FuelGradeId).HasColumnType("int(11)");
            entity.Property(e => e.FuelGradeName).HasMaxLength(20);
            entity.Property(e => e.PacketId)
                .HasColumnType("int(11)")
                .HasColumnName("PacketID");
            entity.Property(e => e.Ptsid)
                .HasMaxLength(23)
                .HasColumnName("PTSId");
            entity.Property(e => e.StartProductTcvolume).HasColumnName("StartProductTCVolume");
            entity.Property(e => e.Tank).HasColumnType("int(11)");
        });

        modelBuilder.Entity<Issuecategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("issuecategory");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.Description).HasMaxLength(945);
            entity.Property(e => e.Name).HasMaxLength(45);
        });

        modelBuilder.Entity<Issuepriority>(entity =>
        {
            entity.HasKey(e => e.Int).HasName("PRIMARY");

            entity.ToTable("issuepriority");

            entity.Property(e => e.Int)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("int");
            entity.Property(e => e.Name)
                .HasMaxLength(45)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Issuestatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("issuestatus", tb => tb.HasComment("		"));

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("id");
            entity.Property(e => e.Status)
                .HasMaxLength(45)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Issuetracker>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("issuetracker", tb => tb.HasComment("		"));

            entity.HasIndex(e => e.Priority, "Issuetracker_priority_idx");

            entity.HasIndex(e => e.Status, "Issuetracker_status_idx");

            entity.HasIndex(e => e.AssignTo, "Issuetracker_userAsssignedTo_idx");

            entity.HasIndex(e => e.Openby, "Issuetracker_user_idx");

            entity.HasIndex(e => e.IssueCategoryId, "issetracker_issueID_idx");

            entity.HasIndex(e => e.HyoungNo, "issue_vehicle_idx");

            entity.HasIndex(e => e.SiteId, "issuetracker_site_idx");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.AssignTo).HasColumnType("int(11)");
            entity.Property(e => e.ClosingDate).HasColumnName("closingDate");
            entity.Property(e => e.DueDate).HasColumnName("dueDate");
            entity.Property(e => e.HyoungNo)
                .HasMaxLength(45)
                .HasColumnName("hyoungNo");
            entity.Property(e => e.IssueCategoryId)
                .HasColumnType("int(11)")
                .HasColumnName("IssueCategoryID");
            entity.Property(e => e.OpenDate).HasColumnName("openDate");
            entity.Property(e => e.Openby)
                .HasColumnType("int(11)")
                .HasColumnName("openby");
            entity.Property(e => e.Priority)
                .HasColumnType("int(11)")
                .HasColumnName("priority");
            entity.Property(e => e.ProblemDescription)
                .HasMaxLength(945)
                .HasColumnName("problemDescription");
            entity.Property(e => e.ProblemTitlte)
                .HasMaxLength(45)
                .HasColumnName("problemTitlte");
            entity.Property(e => e.RelatedIssue)
                .HasColumnType("int(11)")
                .HasColumnName("relatedIssue");
            entity.Property(e => e.SiteId)
                .HasColumnType("int(11)")
                .HasColumnName("siteID");
            entity.Property(e => e.Status)
                .HasColumnType("int(11)")
                .HasColumnName("status");

            entity.HasOne(d => d.AssignToNavigation).WithMany(p => p.IssuetrackerAssignToNavigations)
                .HasForeignKey(d => d.AssignTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Issuetracker_userAsssignedTo");

            entity.HasOne(d => d.HyoungNoNavigation).WithMany(p => p.Issuetrackers)
                .HasPrincipalKey(p => p.HyoungNo)
                .HasForeignKey(d => d.HyoungNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("issue_vehicle");

            entity.HasOne(d => d.IssueCategory).WithMany(p => p.Issuetrackers)
                .HasForeignKey(d => d.IssueCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("issuetrcker_issuecategoryID");

            entity.HasOne(d => d.OpenbyNavigation).WithMany(p => p.IssuetrackerOpenbyNavigations)
                .HasForeignKey(d => d.Openby)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Issuetracker_useropenby");

            entity.HasOne(d => d.PriorityNavigation).WithMany(p => p.Issuetrackers)
                .HasForeignKey(d => d.Priority)
                .HasConstraintName("Issuetracker_priority");

            entity.HasOne(d => d.Site).WithMany(p => p.Issuetrackers)
                .HasForeignKey(d => d.SiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("issuetracker_site");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Issuetrackers)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("Issuetracker_status");
        });

        modelBuilder.Entity<Pts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("pts");

            entity.HasIndex(e => e.SiteId, "PTS_Site_idx");

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.PtsserialNo)
                .HasMaxLength(45)
                .HasColumnName("PTSSerialNo");
            entity.Property(e => e.SiteId).HasColumnType("int(11)");

            entity.HasOne(d => d.Site).WithMany(p => p.Pts)
                .HasForeignKey(d => d.SiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PTS_Site");
        });

        modelBuilder.Entity<Pumptransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("pumptransaction");

            entity.Property(e => e.Id).HasColumnType("int(11)");
            entity.Property(e => e.Amount).HasPrecision(10);
            entity.Property(e => e.ConfigurationId).HasMaxLength(45);
            entity.Property(e => e.FuelGradeId).HasColumnType("int(11)");
            entity.Property(e => e.FuelGradeName).HasMaxLength(45);
            entity.Property(e => e.Nozzle).HasColumnType("int(11)");
            entity.Property(e => e.PacketId).HasColumnType("int(11)");
            entity.Property(e => e.Price).HasPrecision(10);
            entity.Property(e => e.PtsId).HasMaxLength(45);
            entity.Property(e => e.Pump).HasColumnType("int(11)");
            entity.Property(e => e.Tag).HasMaxLength(45);
            entity.Property(e => e.Tcvolume)
                .HasPrecision(10)
                .HasColumnName("TCVolume");
            entity.Property(e => e.TotalAmount).HasPrecision(10);
            entity.Property(e => e.TotalVolume).HasPrecision(10);
            entity.Property(e => e.Transaction).HasColumnType("int(11)");
            entity.Property(e => e.UserId).HasColumnType("int(11)");
            entity.Property(e => e.Volume).HasPrecision(10);
        });

        modelBuilder.Entity<Site>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("site", tb => tb.HasComment("			"));

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(45)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tag");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("id");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<TagGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tag_group");

            entity.HasIndex(e => e.VehicleId, "Tag_Vehicle_idx");

            entity.HasIndex(e => e.TagId, "Taggroup_vehicle_idx");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("id");
            entity.Property(e => e.TagId)
                .HasColumnType("int(11)")
                .HasColumnName("tagID");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(45)
                .HasColumnName("vehicleID");
        });

        modelBuilder.Entity<Tank>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tank");

            entity.HasIndex(e => e.PtsId, "pts_tank_idx");

            entity.Property(e => e.Id).HasColumnType("int(11)");
            entity.Property(e => e.Name).HasMaxLength(45);
            entity.Property(e => e.PtsId)
                .HasColumnType("int(11)")
                .HasColumnName("ptsID");
            entity.Property(e => e.TankHeight).HasPrecision(10);
            entity.Property(e => e.TankVolume).HasPrecision(10);

            entity.HasOne(d => d.Pts).WithMany(p => p.Tanks)
                .HasForeignKey(d => d.PtsId)
                .HasConstraintName("pts_tank");
        });

        modelBuilder.Entity<Tankmeasurement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tankmeasurement");

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("id");
            entity.Property(e => e.ConfigurationId).HasMaxLength(45);
            entity.Property(e => e.FuelGradeId).HasColumnType("int(11)");
            entity.Property(e => e.PacketId).HasColumnType("int(11)");
            entity.Property(e => e.ProductTcvolume).HasColumnName("ProductTCVolume");
            entity.Property(e => e.Ptsid).HasColumnName("PTSId");
            entity.Property(e => e.Status).HasMaxLength(45);
            entity.Property(e => e.Tank).HasColumnType("int(11)");
            entity.Property(e => e.TankFillingPercentage).HasColumnType("int(11)");
            entity.Property(e => e.WaterHeight).HasColumnName("waterHeight");

            entity.HasMany(d => d.Alarms).WithMany(p => p.TankMeasurements)
                .UsingEntity<Dictionary<string, object>>(
                    "AlarmTankmeasurement",
                    r => r.HasOne<Alarm>().WithMany()
                        .HasForeignKey("AlarmId")
                        .HasConstraintName("alarmmeasurement_alarm"),
                    l => l.HasOne<Tankmeasurement>().WithMany()
                        .HasForeignKey("TankMeasurementId")
                        .HasConstraintName("alarmMeasurement_tankmeasurement"),
                    j =>
                    {
                        j.HasKey("TankMeasurementId", "AlarmId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("alarm_tankmeasurement");
                        j.HasIndex(new[] { "TankMeasurementId" }, "alarmMeasurement_tankmeasurement_idx");
                        j.HasIndex(new[] { "AlarmId" }, "alarmmeasurement_alarm_idx");
                        j.IndexerProperty<int>("TankMeasurementId")
                            .HasColumnType("int(11)")
                            .HasColumnName("tankMeasurementID");
                        j.IndexerProperty<int>("AlarmId")
                            .HasColumnType("int(11)")
                            .HasColumnName("alarmID");
                    });
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user", tb => tb.HasComment("	"));

            entity.HasIndex(e => e.UserType, "user_usertype_idx");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("id");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FullName)
                .HasMaxLength(45)
                .HasColumnName("Full Name");
            entity.Property(e => e.Password)
                .HasMaxLength(1045)
                .HasColumnName("password");
            entity.Property(e => e.UserType)
                .HasColumnType("int(11)")
                .HasColumnName("userType");

            entity.HasOne(d => d.UserTypeNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.UserType)
                .HasConstraintName("user_usertype");
        });

        modelBuilder.Entity<Usertype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("usertype", tb => tb.HasComment("			"));

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("id");
            entity.Property(e => e.Type)
                .HasMaxLength(45)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PRIMARY");

            entity.ToTable("vehicle");

            entity.HasIndex(e => e.HyoungNo, "HyoungNo_UNIQUE").IsUnique();

            entity.HasIndex(e => e.DeviceId, "Vehicle_Device_idx");

            entity.HasIndex(e => e.DefaultEmployeeId, "Vehicle_employee_idx");

            entity.HasIndex(e => e.VehicleManufacturerId, "vehicle_manufacturer_idx");

            entity.HasIndex(e => e.VehicleModelId, "vehicle_model_idx");

            entity.HasIndex(e => e.WorkingSiteId, "vehicle_site_idx");

            entity.HasIndex(e => e.VehicleTypeId, "vehicle_vehicleType_idx");

            entity.Property(e => e.VehicleId)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("vehicleID");
            entity.Property(e => e.AverageKmL).HasColumnName("Average_km_l");
            entity.Property(e => e.Capacity).HasMaxLength(45);
            entity.Property(e => e.CurrentPhysicalReading).HasMaxLength(45);
            entity.Property(e => e.DefaultEmployeeId)
                .HasColumnType("int(11)")
                .HasColumnName("DefaultEmployeeID");
            entity.Property(e => e.DeviceId)
                .HasColumnType("int(11)")
                .HasColumnName("DeviceID");
            entity.Property(e => e.ExcessWorkingHrCost).HasPrecision(10);
            entity.Property(e => e.GpsgategeneratedId)
                .HasColumnType("tinyint(4)")
                .HasColumnName("GPSGATEGeneratedID");
            entity.Property(e => e.HyoungNo).HasMaxLength(45);
            entity.Property(e => e.NumberPlate).HasMaxLength(45);
            entity.Property(e => e.VehicleManufacturerId)
                .HasColumnType("int(11)")
                .HasColumnName("VehicleManufacturerID");
            entity.Property(e => e.VehicleModelId)
                .HasColumnType("int(11)")
                .HasColumnName("VehicleModelID");
            entity.Property(e => e.VehicleTypeId)
                .HasDefaultValueSql("'1'")
                .HasColumnType("int(11)")
                .HasColumnName("VehicleTypeID");
            entity.Property(e => e.WorkingSiteId)
                .HasColumnType("int(11)")
                .HasColumnName("WorkingSiteID");
            entity.Property(e => e.Yom)
                .HasMaxLength(45)
                .HasColumnName("YOM");

            entity.HasOne(d => d.DefaultEmployee).WithMany(p => p.VehiclesNavigation)
                .HasForeignKey(d => d.DefaultEmployeeId)
                .HasConstraintName("Vehicle_employee");

            entity.HasOne(d => d.Device).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.DeviceId)
                .HasConstraintName("Vehicle_Device");

            entity.HasOne(d => d.VehicleManufacturer).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.VehicleManufacturerId)
                .HasConstraintName("vehicle_manufacturer");

            entity.HasOne(d => d.VehicleModel).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.VehicleModelId)
                .HasConstraintName("vehicle_model");

            entity.HasOne(d => d.VehicleType).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.VehicleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("vehicle_vehicleType");

            entity.HasOne(d => d.WorkingSite).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.WorkingSiteId)
                .HasConstraintName("vehicle_site");

            entity.HasMany(d => d.Employees).WithMany(p => p.Vehicles)
                .UsingEntity<Dictionary<string, object>>(
                    "Employeevehicle",
                    r => r.HasOne<Employee>().WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("EmployeeID"),
                    l => l.HasOne<Vehicle>().WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("VehicleID"),
                    j =>
                    {
                        j.HasKey("VehicleId", "EmployeeId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("employeevehicles");
                        j.HasIndex(new[] { "EmployeeId" }, "EmployeeID_idx");
                        j.IndexerProperty<int>("VehicleId")
                            .HasColumnType("int(11)")
                            .HasColumnName("VehicleID");
                        j.IndexerProperty<int>("EmployeeId")
                            .HasColumnType("int(11)")
                            .HasColumnName("EmployeeID");
                    });
        });

        modelBuilder.Entity<Vehicleconsumption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("vehicleconsumption");

            entity.HasIndex(e => new { e.VehicleId, e.Date, e.IsNightShift }, "vehicle_date_shift_unique").IsUnique();

            entity.HasIndex(e => e.EmployeeId, "vehicleconsumption_employee_idx");

            entity.HasIndex(e => e.SiteId, "vehicleconsumption_site_idx");

            entity.HasIndex(e => e.ModifiedBy, "vehicleconsumption_user_idx");

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.AvgSpeed).HasPrecision(10, 2);
            entity.Property(e => e.Comments).HasMaxLength(100);
            entity.Property(e => e.EmployeeId)
                .HasDefaultValueSql("'0'")
                .HasColumnType("int(11)")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EngHours).HasPrecision(10);
            entity.Property(e => e.ExcessWorkingHrsCost).HasPrecision(10);
            entity.Property(e => e.ExpectedConsumption).HasPrecision(10);
            entity.Property(e => e.FlowMeterEffiency).HasPrecision(10);
            entity.Property(e => e.FlowMeterEngineHrs).HasPrecision(10);
            entity.Property(e => e.FlowMeterFuelLost).HasPrecision(10);
            entity.Property(e => e.FlowMeterFuelUsed).HasPrecision(10);
            entity.Property(e => e.FuelEfficiency).HasPrecision(10, 2);
            entity.Property(e => e.FuelLost).HasPrecision(10);
            entity.Property(e => e.IsKmperhr)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.IsModified).HasColumnType("tinyint(4)");
            entity.Property(e => e.IsNightShift)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.MaxSpeed).HasPrecision(10, 2);
            entity.Property(e => e.ModifiedBy).HasColumnType("int(11)");
            entity.Property(e => e.SiteId)
                .HasColumnType("int(11)")
                .HasColumnName("SiteID");
            entity.Property(e => e.TotalDistance).HasPrecision(10);
            entity.Property(e => e.TotalFuel).HasPrecision(10);
            entity.Property(e => e.VehicleId)
                .HasColumnType("int(11)")
                .HasColumnName("VehicleID");

            entity.HasOne(d => d.Employee).WithMany(p => p.Vehicleconsumptions)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("vehicleconsumption_employee");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.Vehicleconsumptions)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("vehicleconsumption_user");

            entity.HasOne(d => d.Site).WithMany(p => p.Vehicleconsumptions)
                .HasForeignKey(d => d.SiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("vehicleconsumption_site");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Vehicleconsumptions)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("vehicleconsumption_vehicle");
        });

        modelBuilder.Entity<Vehiclemanufacturer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("vehiclemanufacturer");

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.Name).HasMaxLength(45);
        });

        modelBuilder.Entity<Vehiclemodel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("vehiclemodel");

            entity.Property(e => e.Id)
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.ManufacturerId)
                .HasColumnType("int(11)")
                .HasColumnName("ManufacturerID");
            entity.Property(e => e.Name).HasMaxLength(45);
        });

        modelBuilder.Entity<Vehicletype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("vehicletype", tb => tb.HasComment("			"));

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)")
                .HasColumnName("ID");
            entity.Property(e => e.Abbvr).HasMaxLength(45);
            entity.Property(e => e.Name).HasMaxLength(45);
            entity.Property(e => e.Nothinghere).HasMaxLength(45);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Persistence\Migrations\20231219071447_updatedTankMeaurementData.cs

﻿using System;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FMS.Persistence.Migrations
{
    /// <inheritdoc />
    public partial class updatedTankMeaurementData : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterDatabase()
                .Annotation("MySql:CharSet", "latin1");

                      

          

            


           

            migrationBuilder.CreateIndex(
                name: "IX_tankmeasurement_SiteId",
                table: "tankmeasurement",
                column: "SiteId");

            migrationBuilder.CreateIndex(
                name: "IX_tankmeasurement_TankId",
                table: "tankmeasurement",
                column: "TankId");

            migrationBuilder.CreateIndex(
                name: "tankmeasurement_alarm_idx",
                table: "tankmeasurement",
                column: "Alarm");


        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        { 

           
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Persistence\Migrations\20231219071447_updatedTankMeaurementData.Designer.cs

﻿// <auto-generated />
using System;
using FMS.Persistence.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Persistence.Migrations
{
    [DbContext(typeof(GpsdataContext))]
    [Migration("20231219071447_updatedTankMeaurementData")]
    partial class updatedTankMeaurementData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID");

                    b.HasKey("VehicleId", "EmployeeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID_idx");

                    b.ToTable("employeevehicles", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("alarm", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("AlarmId")
                        .HasColumnType("int(11)")
                        .HasColumnName("alarmID");

                    b.Property<int?>("TankMeausementId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tankMeausementID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TankMeausementId" }, "alarmMeasurement_tankmeasurement_idx");

                    b.HasIndex(new[] { "AlarmId" }, "alarmmeasurement_alarm_idx");

                    b.ToTable("alarm_tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.Property<string>("AssetId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AssetID");

                    b.Property<string>("SiteId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SiteID");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID");

                    b.HasKey("AssetId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "VehicleManufacturerID");

                    b.HasIndex(new[] { "VehicleModelId" }, "VehicleModelID");

                    b.HasIndex(new[] { "VehicleTypeId" }, "VehicleTypeID");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("CalibrationData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CalibrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("calibrationDate");

                    b.Property<string>("VehicleId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "calibrationDataRow_idx");

                    b.ToTable("calibrationdata", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Property<int>("DeviceImei")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceIMEI");

                    b.Property<int>("DeviceMakerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceMakerID");

                    b.Property<int>("DevicePhoneNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("DeviceImei")
                        .HasName("PRIMARY");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("devicemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DevicemanufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DevicemanufacturerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DevicemanufacturerId" }, "deviceModel_deviceManufaturer_idx");

                    b.ToTable("devicemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("EmployeeWorkNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'New'");

                    b.Property<string>("EmployeephoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeephoneNumber")
                        .HasDefaultValueSql("'0700000000'");

                    b.Property<string>("Employeestatus")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeestatus");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'Employee Name'");

                    b.Property<long?>("NationalId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("NationalID");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SiteId" }, "Employee_site_idx");

                    b.HasIndex(new[] { "NationalId" }, "NationalID_UNIQUE")
                        .IsUnique();

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal>("ExpectedAverage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("ExpectedAverage");

                    b.Property<int>("ExpectedAverageClassificationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ExpectedAverageClassificationID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExpectedAverageClassificationId" }, "Expected_classification_idx");

                    b.HasIndex(new[] { "VehicleId" }, "Expected_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "Site_idx");

                    b.HasIndex(new[] { "VehicleId", "SiteId", "ExpectedAverageClassificationId" }, "UniqueRecord")
                        .IsUnique();

                    b.ToTable("expectedaverage", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(545)
                        .HasColumnType("varchar(545)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("expectedaverageclassification", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Fuelrefil", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Duration")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("GpsfuelRefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("GPSFuelRefil");

                    b.Property<decimal?>("ManualGpsfuelrefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("ManualGPSFuelrefil");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("fuelrefil", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuecategory", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Property<int>("Int")
                        .HasColumnType("int(11)")
                        .HasColumnName("int");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Int")
                        .HasName("PRIMARY");

                    b.ToTable("issuepriority", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuestatus", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("AssignTo")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("closingDate");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dueDate");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("hyoungNo");

                    b.Property<int>("IssueCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("IssueCategoryID");

                    b.Property<DateTime?>("LastModfield")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("openDate");

                    b.Property<int>("Openby")
                        .HasColumnType("int(11)")
                        .HasColumnName("openby");

                    b.Property<int?>("Priority")
                        .HasColumnType("int(11)")
                        .HasColumnName("priority");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)")
                        .HasColumnName("problemDescription");

                    b.Property<string>("ProblemTitlte")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("problemTitlte");

                    b.Property<int?>("RelatedIssue")
                        .HasColumnType("int(11)")
                        .HasColumnName("relatedIssue");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("siteID");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Priority" }, "Issuetracker_priority_idx");

                    b.HasIndex(new[] { "Status" }, "Issuetracker_status_idx");

                    b.HasIndex(new[] { "AssignTo" }, "Issuetracker_userAsssignedTo_idx");

                    b.HasIndex(new[] { "Openby" }, "Issuetracker_user_idx");

                    b.HasIndex(new[] { "IssueCategoryId" }, "issetracker_issueID_idx");

                    b.HasIndex(new[] { "HyoungNo" }, "issue_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "issuetracker_site_idx");

                    b.ToTable("issuetracker", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("PtsserialNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("PTSSerialNo");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SiteId" }, "PTS_Site_idx");

                    b.HasIndex(new[] { "TankId" }, "PTs_tank_idx");

                    b.ToTable("pts", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("site", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.TagGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("TagId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tagID");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "Tag_Vehicle_idx");

                    b.HasIndex(new[] { "TagId" }, "Taggroup_vehicle_idx");

                    b.ToTable("tag_group", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<decimal>("TankHeight")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal>("TankVolume")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tank", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("Alarm")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConfigurationId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("FuelGradeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("PTSId")
                        .HasColumnType("longtext");

                    b.Property<double?>("ProductDensity")
                        .HasColumnType("double");

                    b.Property<double?>("ProductHeight")
                        .HasColumnType("double");

                    b.Property<double?>("ProductMass")
                        .HasColumnType("double");

                    b.Property<double?>("ProductTcvolume")
                        .HasColumnType("double")
                        .HasColumnName("ProductTCVolume");

                    b.Property<double?>("ProductVolume")
                        .HasColumnType("double");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankFillingPercentage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double");

                    b.Property<double?>("WaterHeight")
                        .HasColumnType("double")
                        .HasColumnName("waterHeight");

                    b.Property<double?>("WaterVolume")
                        .HasColumnType("double");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SiteId");

                    b.HasIndex("TankId");

                    b.HasIndex(new[] { "Alarm" }, "tankmeasurement_alarm_idx");

                    b.ToTable("tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Full Name");

                    b.Property<string>("Password")
                        .HasMaxLength(1045)
                        .HasColumnType("varchar(1045)")
                        .HasColumnName("password");

                    b.Property<int?>("UserType")
                        .HasColumnType("int(11)")
                        .HasColumnName("userType");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserType" }, "user_usertype_idx");

                    b.ToTable("user", null, t =>
                        {
                            t.HasComment("	");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("usertype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.Property<bool>("AverageKmL")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Average_km_l");

                    b.Property<string>("Capacity")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("CurrentPhysicalReading")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("DefaultEmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DefaultEmployeeID");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceID");

                    b.Property<decimal?>("ExcessWorkingHrCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("NumberPlate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("WorkingExpectedAverage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("WorkingSiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("WorkingSiteID");

                    b.Property<string>("Yom")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("YOM");

                    b.HasKey("VehicleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HyoungNo" }, "HyoungNo_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "DeviceId" }, "Vehicle_Device_idx");

                    b.HasIndex(new[] { "DefaultEmployeeId" }, "Vehicle_employee_idx");

                    b.HasIndex(new[] { "WorkingExpectedAverage" }, "vehicleExpectedAverage_idx");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "vehicle_manufacturer_idx");

                    b.HasIndex(new[] { "VehicleModelId" }, "vehicle_model_idx");

                    b.HasIndex(new[] { "WorkingSiteId" }, "vehicle_site_idx");

                    b.HasIndex(new[] { "VehicleTypeId" }, "vehicle_vehicleType_idx");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal?>("AvgSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID")
                        .HasDefaultValueSql("'0'");

                    b.Property<decimal?>("EngHours")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExcessWorkingHrsCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExpectedConsumption")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEffiency")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEngineHrs")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelUsed")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FuelEfficiency")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("FuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<ulong>("IsKmperhr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<sbyte?>("IsModified")
                        .HasColumnType("tinyint(4)");

                    b.Property<ulong>("IsNightShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<decimal?>("MaxSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<decimal?>("TotalDistance")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("TotalFuel")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId", "Date", "IsNightShift" }, "vehicle_date_shift_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "EmployeeId" }, "vehicleconsumption_employee_idx");

                    b.HasIndex(new[] { "SiteId" }, "vehicleconsumption_site_idx");

                    b.HasIndex(new[] { "ModifiedBy" }, "vehicleconsumption_user_idx");

                    b.ToTable("vehicleconsumption", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Abbvr")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Nothinghere")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehicletype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeID");

                    b.HasOne("FMS.Domain.Entities.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("VehicleID");
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "Alarm")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("AlarmId")
                        .HasConstraintName("alarmmeasurement_alarm");

                    b.HasOne("FMS.Domain.Entities.Tankmeasurement", "TankMeausement")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("TankMeausementId")
                        .HasConstraintName("alarmMeasurement_tankmeasurement");

                    b.Navigation("Alarm");

                    b.Navigation("TankMeausement");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("asset_ibfk_2");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("asset_ibfk_1");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("asset_ibfk_3");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Calibrationdata")
                        .HasForeignKey("VehicleId")
                        .HasPrincipalKey("HyoungNo")
                        .HasConstraintName("calibrationData_vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Devicemanufacturer", "Devicemanufacturer")
                        .WithMany("Devicemodels")
                        .HasForeignKey("DevicemanufacturerId")
                        .IsRequired()
                        .HasConstraintName("deviceModel_deviceManufaturer");

                    b.Navigation("Devicemanufacturer");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Employees")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("Employee_site");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Expectedaverageclassification", "ExpectedAverageClassification")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("ExpectedAverageClassificationId")
                        .IsRequired()
                        .HasConstraintName("Expected_classification");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("Expected_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("Expected_vehicle");

                    b.Navigation("ExpectedAverageClassification");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.HasOne("FMS.Domain.Entities.User", "AssignToNavigation")
                        .WithMany("IssuetrackerAssignToNavigations")
                        .HasForeignKey("AssignTo")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_userAsssignedTo");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "HyoungNoNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("HyoungNo")
                        .HasPrincipalKey("HyoungNo")
                        .IsRequired()
                        .HasConstraintName("issue_vehicle");

                    b.HasOne("FMS.Domain.Entities.Issuecategory", "IssueCategory")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("IssueCategoryId")
                        .IsRequired()
                        .HasConstraintName("issuetrcker_issuecategoryID");

                    b.HasOne("FMS.Domain.Entities.User", "OpenbyNavigation")
                        .WithMany("IssuetrackerOpenbyNavigations")
                        .HasForeignKey("Openby")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_useropenby");

                    b.HasOne("FMS.Domain.Entities.Issuepriority", "PriorityNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Priority")
                        .HasConstraintName("Issuetracker_priority");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("issuetracker_site");

                    b.HasOne("FMS.Domain.Entities.Issuestatus", "StatusNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Status")
                        .HasConstraintName("Issuetracker_status");

                    b.Navigation("AssignToNavigation");

                    b.Navigation("HyoungNoNavigation");

                    b.Navigation("IssueCategory");

                    b.Navigation("OpenbyNavigation");

                    b.Navigation("PriorityNavigation");

                    b.Navigation("Site");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Pts")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("PTS_Site");

                    b.HasOne("FMS.Domain.Entities.Tank", "Tank")
                        .WithMany("Pts")
                        .HasForeignKey("TankId")
                        .HasConstraintName("PTs_tank");

                    b.Navigation("Site");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "AlarmNavigation")
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("Alarm")
                        .HasConstraintName("tankmeasurement_alarm");

                    b.HasOne("FMS.Domain.Entities.Site", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("SiteId");

                    b.HasOne("FMS.Domain.Entities.Tank", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("TankId");

                    b.Navigation("AlarmNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Usertype", "UserTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserType")
                        .HasConstraintName("user_usertype");

                    b.Navigation("UserTypeNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "DefaultEmployee")
                        .WithMany("VehiclesNavigation")
                        .HasForeignKey("DefaultEmployeeId")
                        .HasConstraintName("Vehicle_employee");

                    b.HasOne("FMS.Domain.Entities.Device", "Device")
                        .WithMany("Vehicles")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("Vehicle_Device");

                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("vehicle_manufacturer");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("vehicle_model");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .IsRequired()
                        .HasConstraintName("vehicle_vehicleType");

                    b.HasOne("FMS.Domain.Entities.Expectedaverage", "WorkingExpectedAverageNavigation")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingExpectedAverage")
                        .HasConstraintName("vehicleExpectedAverage");

                    b.HasOne("FMS.Domain.Entities.Site", "WorkingSite")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingSiteId")
                        .HasConstraintName("vehicle_site");

                    b.Navigation("DefaultEmployee");

                    b.Navigation("Device");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");

                    b.Navigation("WorkingExpectedAverageNavigation");

                    b.Navigation("WorkingSite");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("vehicleconsumption_employee");

                    b.HasOne("FMS.Domain.Entities.User", "ModifiedByNavigation")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("vehicleconsumption_user");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_vehicle");

                    b.Navigation("Employee");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Navigation("AlarmTankmeasurements");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Navigation("Devicemodels");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("VehiclesNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Navigation("Expectedaverages");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Pts");

                    b.Navigation("Tankmeasurements");

                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Navigation("Pts");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Navigation("AlarmTankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Navigation("IssuetrackerAssignToNavigations");

                    b.Navigation("IssuetrackerOpenbyNavigations");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Calibrationdata");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Persistence\Migrations\20231220131649_updatedalarmmeasurementdata.cs

﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FMS.Persistence.Migrations
{
    /// <inheritdoc />
    public partial class updatedalarmmeasurementdata : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "alarmMeasurement_tankmeasurement",
                table: "alarm_tankmeasurement");

            migrationBuilder.DropForeignKey(
                name: "alarmmeasurement_alarm",
                table: "alarm_tankmeasurement");

            migrationBuilder.DropPrimaryKey(
                name: "PRIMARY",
                table: "alarm_tankmeasurement");

            migrationBuilder.RenameColumn(
                name: "id",
                table: "alarm_tankmeasurement",
                newName: "Id");

            migrationBuilder.AlterColumn<decimal>(
                name: "TotalFuel",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "TotalDistance",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FuelLost",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterFuelUsed",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterFuelLost",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterEngineHrs",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterEffiency",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "ExpectedConsumption",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "ExcessWorkingHrsCost",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "EngHours",
                table: "vehicleconsumption",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "ExcessWorkingHrCost",
                table: "vehicle",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "TankVolume",
                table: "tank",
                type: "decimal(10)",
                precision: 10,
                nullable: false,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10);

            migrationBuilder.AlterColumn<decimal>(
                name: "TankHeight",
                table: "tank",
                type: "decimal(10)",
                precision: 10,
                nullable: false,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10);

            migrationBuilder.AlterColumn<decimal>(
                name: "ManualGPSFuelrefil",
                table: "fuelrefil",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "GPSFuelRefil",
                table: "fuelrefil",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "Duration",
                table: "fuelrefil",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<int>(
                name: "tankMeausementID",
                table: "alarm_tankmeasurement",
                type: "int(11)",
                nullable: false,
                defaultValue: 0,
                oldClrType: typeof(int),
                oldType: "int(11)",
                oldNullable: true);

            migrationBuilder.AlterColumn<int>(
                name: "alarmID",
                table: "alarm_tankmeasurement",
                type: "int(11)",
                nullable: false,
                defaultValue: 0,
                oldClrType: typeof(int),
                oldType: "int(11)",
                oldNullable: true);

            migrationBuilder.AlterColumn<int>(
                name: "Id",
                table: "alarm_tankmeasurement",
                type: "int",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)");

            migrationBuilder.AddPrimaryKey(
                name: "PK_alarm_tankmeasurement",
                table: "alarm_tankmeasurement",
                columns: new[] { "tankMeausementID", "alarmID" });

            migrationBuilder.AddForeignKey(
                name: "alarmMeasurement_tankmeasurement",
                table: "alarm_tankmeasurement",
                column: "tankMeausementID",
                principalTable: "tankmeasurement",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "alarmmeasurement_alarm",
                table: "alarm_tankmeasurement",
                column: "alarmID",
                principalTable: "alarm",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "alarmMeasurement_tankmeasurement",
                table: "alarm_tankmeasurement");

            migrationBuilder.DropForeignKey(
                name: "alarmmeasurement_alarm",
                table: "alarm_tankmeasurement");

            migrationBuilder.DropPrimaryKey(
                name: "PK_alarm_tankmeasurement",
                table: "alarm_tankmeasurement");

            migrationBuilder.RenameColumn(
                name: "Id",
                table: "alarm_tankmeasurement",
                newName: "id");

            migrationBuilder.AlterColumn<decimal>(
                name: "TotalFuel",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "TotalDistance",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FuelLost",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterFuelUsed",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterFuelLost",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterEngineHrs",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterEffiency",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "ExpectedConsumption",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "ExcessWorkingHrsCost",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "EngHours",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "ExcessWorkingHrCost",
                table: "vehicle",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "TankVolume",
                table: "tank",
                type: "decimal(10,30)",
                precision: 10,
                nullable: false,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10);

            migrationBuilder.AlterColumn<decimal>(
                name: "TankHeight",
                table: "tank",
                type: "decimal(10,30)",
                precision: 10,
                nullable: false,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10);

            migrationBuilder.AlterColumn<decimal>(
                name: "ManualGPSFuelrefil",
                table: "fuelrefil",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "GPSFuelRefil",
                table: "fuelrefil",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "Duration",
                table: "fuelrefil",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<int>(
                name: "id",
                table: "alarm_tankmeasurement",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int");

            migrationBuilder.AlterColumn<int>(
                name: "alarmID",
                table: "alarm_tankmeasurement",
                type: "int(11)",
                nullable: true,
                oldClrType: typeof(int),
                oldType: "int(11)");

            migrationBuilder.AlterColumn<int>(
                name: "tankMeausementID",
                table: "alarm_tankmeasurement",
                type: "int(11)",
                nullable: true,
                oldClrType: typeof(int),
                oldType: "int(11)");

            migrationBuilder.AddPrimaryKey(
                name: "PRIMARY",
                table: "alarm_tankmeasurement",
                column: "id");

            migrationBuilder.AddForeignKey(
                name: "alarmMeasurement_tankmeasurement",
                table: "alarm_tankmeasurement",
                column: "tankMeausementID",
                principalTable: "tankmeasurement",
                principalColumn: "id");

            migrationBuilder.AddForeignKey(
                name: "alarmmeasurement_alarm",
                table: "alarm_tankmeasurement",
                column: "alarmID",
                principalTable: "alarm",
                principalColumn: "id");
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Persistence\Migrations\20231220131649_updatedalarmmeasurementdata.Designer.cs

﻿// <auto-generated />
using System;
using FMS.Persistence.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Persistence.Migrations
{
    [DbContext(typeof(GpsdataContext))]
    [Migration("20231220131649_updatedalarmmeasurementdata")]
    partial class updatedalarmmeasurementdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID");

                    b.HasKey("VehicleId", "EmployeeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID_idx");

                    b.ToTable("employeevehicles", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("alarm", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.Property<int?>("TankMeausementId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tankMeausementID");

                    b.Property<int?>("AlarmId")
                        .HasColumnType("int(11)")
                        .HasColumnName("alarmID");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("TankMeausementId", "AlarmId");

                    b.HasIndex(new[] { "TankMeausementId" }, "alarmMeasurement_tankmeasurement_idx");

                    b.HasIndex(new[] { "AlarmId" }, "alarmmeasurement_alarm_idx");

                    b.ToTable("alarm_tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.Property<string>("AssetId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AssetID");

                    b.Property<string>("SiteId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SiteID");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID");

                    b.HasKey("AssetId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "VehicleManufacturerID");

                    b.HasIndex(new[] { "VehicleModelId" }, "VehicleModelID");

                    b.HasIndex(new[] { "VehicleTypeId" }, "VehicleTypeID");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("CalibrationData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CalibrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("calibrationDate");

                    b.Property<string>("VehicleId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "calibrationDataRow_idx");

                    b.ToTable("calibrationdata", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Property<int>("DeviceImei")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceIMEI");

                    b.Property<int>("DeviceMakerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceMakerID");

                    b.Property<int>("DevicePhoneNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("DeviceImei")
                        .HasName("PRIMARY");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("devicemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DevicemanufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DevicemanufacturerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DevicemanufacturerId" }, "deviceModel_deviceManufaturer_idx");

                    b.ToTable("devicemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("EmployeeWorkNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'New'");

                    b.Property<string>("EmployeephoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeephoneNumber")
                        .HasDefaultValueSql("'0700000000'");

                    b.Property<string>("Employeestatus")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeestatus");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'Employee Name'");

                    b.Property<long?>("NationalId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("NationalID");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SiteId" }, "Employee_site_idx");

                    b.HasIndex(new[] { "NationalId" }, "NationalID_UNIQUE")
                        .IsUnique();

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal>("ExpectedAverage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("ExpectedAverage");

                    b.Property<int>("ExpectedAverageClassificationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ExpectedAverageClassificationID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExpectedAverageClassificationId" }, "Expected_classification_idx");

                    b.HasIndex(new[] { "VehicleId" }, "Expected_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "Site_idx");

                    b.HasIndex(new[] { "VehicleId", "SiteId", "ExpectedAverageClassificationId" }, "UniqueRecord")
                        .IsUnique();

                    b.ToTable("expectedaverage", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(545)
                        .HasColumnType("varchar(545)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("expectedaverageclassification", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Fuelrefil", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Duration")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("GpsfuelRefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("GPSFuelRefil");

                    b.Property<decimal?>("ManualGpsfuelrefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("ManualGPSFuelrefil");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("fuelrefil", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuecategory", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Property<int>("Int")
                        .HasColumnType("int(11)")
                        .HasColumnName("int");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Int")
                        .HasName("PRIMARY");

                    b.ToTable("issuepriority", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuestatus", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("AssignTo")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("closingDate");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dueDate");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("hyoungNo");

                    b.Property<int>("IssueCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("IssueCategoryID");

                    b.Property<DateTime?>("LastModfield")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("openDate");

                    b.Property<int>("Openby")
                        .HasColumnType("int(11)")
                        .HasColumnName("openby");

                    b.Property<int?>("Priority")
                        .HasColumnType("int(11)")
                        .HasColumnName("priority");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)")
                        .HasColumnName("problemDescription");

                    b.Property<string>("ProblemTitlte")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("problemTitlte");

                    b.Property<int?>("RelatedIssue")
                        .HasColumnType("int(11)")
                        .HasColumnName("relatedIssue");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("siteID");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Priority" }, "Issuetracker_priority_idx");

                    b.HasIndex(new[] { "Status" }, "Issuetracker_status_idx");

                    b.HasIndex(new[] { "AssignTo" }, "Issuetracker_userAsssignedTo_idx");

                    b.HasIndex(new[] { "Openby" }, "Issuetracker_user_idx");

                    b.HasIndex(new[] { "IssueCategoryId" }, "issetracker_issueID_idx");

                    b.HasIndex(new[] { "HyoungNo" }, "issue_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "issuetracker_site_idx");

                    b.ToTable("issuetracker", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("PtsserialNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("PTSSerialNo");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SiteId" }, "PTS_Site_idx");

                    b.HasIndex(new[] { "TankId" }, "PTs_tank_idx");

                    b.ToTable("pts", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("site", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.TagGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("TagId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tagID");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "Tag_Vehicle_idx");

                    b.HasIndex(new[] { "TagId" }, "Taggroup_vehicle_idx");

                    b.ToTable("tag_group", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<decimal>("TankHeight")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal>("TankVolume")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tank", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("Alarm")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConfigurationId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("FuelGradeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("PTSId")
                        .HasColumnType("longtext");

                    b.Property<double?>("ProductDensity")
                        .HasColumnType("double");

                    b.Property<double?>("ProductHeight")
                        .HasColumnType("double");

                    b.Property<double?>("ProductMass")
                        .HasColumnType("double");

                    b.Property<double?>("ProductTcvolume")
                        .HasColumnType("double")
                        .HasColumnName("ProductTCVolume");

                    b.Property<double?>("ProductVolume")
                        .HasColumnType("double");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankFillingPercentage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double");

                    b.Property<double?>("WaterHeight")
                        .HasColumnType("double")
                        .HasColumnName("waterHeight");

                    b.Property<double?>("WaterVolume")
                        .HasColumnType("double");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SiteId");

                    b.HasIndex("TankId");

                    b.HasIndex(new[] { "Alarm" }, "tankmeasurement_alarm_idx");

                    b.ToTable("tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Full Name");

                    b.Property<string>("Password")
                        .HasMaxLength(1045)
                        .HasColumnType("varchar(1045)")
                        .HasColumnName("password");

                    b.Property<int?>("UserType")
                        .HasColumnType("int(11)")
                        .HasColumnName("userType");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserType" }, "user_usertype_idx");

                    b.ToTable("user", null, t =>
                        {
                            t.HasComment("	");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("usertype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.Property<bool>("AverageKmL")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Average_km_l");

                    b.Property<string>("Capacity")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("CurrentPhysicalReading")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("DefaultEmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DefaultEmployeeID");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceID");

                    b.Property<decimal?>("ExcessWorkingHrCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("NumberPlate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("WorkingExpectedAverage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("WorkingSiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("WorkingSiteID");

                    b.Property<string>("Yom")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("YOM");

                    b.HasKey("VehicleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HyoungNo" }, "HyoungNo_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "DeviceId" }, "Vehicle_Device_idx");

                    b.HasIndex(new[] { "DefaultEmployeeId" }, "Vehicle_employee_idx");

                    b.HasIndex(new[] { "WorkingExpectedAverage" }, "vehicleExpectedAverage_idx");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "vehicle_manufacturer_idx");

                    b.HasIndex(new[] { "VehicleModelId" }, "vehicle_model_idx");

                    b.HasIndex(new[] { "WorkingSiteId" }, "vehicle_site_idx");

                    b.HasIndex(new[] { "VehicleTypeId" }, "vehicle_vehicleType_idx");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal?>("AvgSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID")
                        .HasDefaultValueSql("'0'");

                    b.Property<decimal?>("EngHours")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExcessWorkingHrsCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExpectedConsumption")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEffiency")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEngineHrs")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelUsed")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FuelEfficiency")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("FuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<ulong>("IsKmperhr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<sbyte?>("IsModified")
                        .HasColumnType("tinyint(4)");

                    b.Property<ulong>("IsNightShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<decimal?>("MaxSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<decimal?>("TotalDistance")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("TotalFuel")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId", "Date", "IsNightShift" }, "vehicle_date_shift_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "EmployeeId" }, "vehicleconsumption_employee_idx");

                    b.HasIndex(new[] { "SiteId" }, "vehicleconsumption_site_idx");

                    b.HasIndex(new[] { "ModifiedBy" }, "vehicleconsumption_user_idx");

                    b.ToTable("vehicleconsumption", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Abbvr")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Nothinghere")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehicletype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeID");

                    b.HasOne("FMS.Domain.Entities.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("VehicleID");
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "Alarm")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("alarmmeasurement_alarm");

                    b.HasOne("FMS.Domain.Entities.Tankmeasurement", "TankMeausement")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("TankMeausementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("alarmMeasurement_tankmeasurement");

                    b.Navigation("Alarm");

                    b.Navigation("TankMeausement");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("asset_ibfk_2");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("asset_ibfk_1");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("asset_ibfk_3");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Calibrationdata")
                        .HasForeignKey("VehicleId")
                        .HasPrincipalKey("HyoungNo")
                        .HasConstraintName("calibrationData_vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Devicemanufacturer", "Devicemanufacturer")
                        .WithMany("Devicemodels")
                        .HasForeignKey("DevicemanufacturerId")
                        .IsRequired()
                        .HasConstraintName("deviceModel_deviceManufaturer");

                    b.Navigation("Devicemanufacturer");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Employees")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("Employee_site");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Expectedaverageclassification", "ExpectedAverageClassification")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("ExpectedAverageClassificationId")
                        .IsRequired()
                        .HasConstraintName("Expected_classification");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("Expected_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("Expected_vehicle");

                    b.Navigation("ExpectedAverageClassification");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.HasOne("FMS.Domain.Entities.User", "AssignToNavigation")
                        .WithMany("IssuetrackerAssignToNavigations")
                        .HasForeignKey("AssignTo")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_userAsssignedTo");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "HyoungNoNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("HyoungNo")
                        .HasPrincipalKey("HyoungNo")
                        .IsRequired()
                        .HasConstraintName("issue_vehicle");

                    b.HasOne("FMS.Domain.Entities.Issuecategory", "IssueCategory")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("IssueCategoryId")
                        .IsRequired()
                        .HasConstraintName("issuetrcker_issuecategoryID");

                    b.HasOne("FMS.Domain.Entities.User", "OpenbyNavigation")
                        .WithMany("IssuetrackerOpenbyNavigations")
                        .HasForeignKey("Openby")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_useropenby");

                    b.HasOne("FMS.Domain.Entities.Issuepriority", "PriorityNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Priority")
                        .HasConstraintName("Issuetracker_priority");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("issuetracker_site");

                    b.HasOne("FMS.Domain.Entities.Issuestatus", "StatusNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Status")
                        .HasConstraintName("Issuetracker_status");

                    b.Navigation("AssignToNavigation");

                    b.Navigation("HyoungNoNavigation");

                    b.Navigation("IssueCategory");

                    b.Navigation("OpenbyNavigation");

                    b.Navigation("PriorityNavigation");

                    b.Navigation("Site");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Pts")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("PTS_Site");

                    b.HasOne("FMS.Domain.Entities.Tank", "Tank")
                        .WithMany("Pts")
                        .HasForeignKey("TankId")
                        .HasConstraintName("PTs_tank");

                    b.Navigation("Site");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "AlarmNavigation")
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("Alarm")
                        .HasConstraintName("tankmeasurement_alarm");

                    b.HasOne("FMS.Domain.Entities.Site", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("SiteId");

                    b.HasOne("FMS.Domain.Entities.Tank", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("TankId");

                    b.Navigation("AlarmNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Usertype", "UserTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserType")
                        .HasConstraintName("user_usertype");

                    b.Navigation("UserTypeNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "DefaultEmployee")
                        .WithMany("VehiclesNavigation")
                        .HasForeignKey("DefaultEmployeeId")
                        .HasConstraintName("Vehicle_employee");

                    b.HasOne("FMS.Domain.Entities.Device", "Device")
                        .WithMany("Vehicles")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("Vehicle_Device");

                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("vehicle_manufacturer");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("vehicle_model");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .IsRequired()
                        .HasConstraintName("vehicle_vehicleType");

                    b.HasOne("FMS.Domain.Entities.Expectedaverage", "WorkingExpectedAverageNavigation")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingExpectedAverage")
                        .HasConstraintName("vehicleExpectedAverage");

                    b.HasOne("FMS.Domain.Entities.Site", "WorkingSite")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingSiteId")
                        .HasConstraintName("vehicle_site");

                    b.Navigation("DefaultEmployee");

                    b.Navigation("Device");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");

                    b.Navigation("WorkingExpectedAverageNavigation");

                    b.Navigation("WorkingSite");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("vehicleconsumption_employee");

                    b.HasOne("FMS.Domain.Entities.User", "ModifiedByNavigation")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("vehicleconsumption_user");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_vehicle");

                    b.Navigation("Employee");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Navigation("AlarmTankmeasurements");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Navigation("Devicemodels");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("VehiclesNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Navigation("Expectedaverages");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Pts");

                    b.Navigation("Tankmeasurements");

                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Navigation("Pts");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Navigation("AlarmTankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Navigation("IssuetrackerAssignToNavigations");

                    b.Navigation("IssuetrackerOpenbyNavigations");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Calibrationdata");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Persistence\Migrations\20231221092829_AddedStatusandMulplepacketacception.cs

﻿using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FMS.Persistence.Migrations
{
    /// <inheritdoc />
    public partial class AddedStatusandMulplepacketacception : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
           

        

           

            migrationBuilder.UpdateData(
                table: "tankmeasurement",
                keyColumn: "PTSId",
                keyValue: null,
                column: "PTSId",
                value: "");

            migrationBuilder.AlterColumn<string>(
                name: "PTSId",
                table: "tankmeasurement",
                type: "longtext",
                nullable: false,
                collation: "latin1_swedish_ci",
                oldClrType: typeof(string),
                oldType: "longtext",
                oldNullable: true)
                .Annotation("MySql:CharSet", "latin1")
                .OldAnnotation("MySql:CharSet", "latin1")
                .OldAnnotation("Relational:Collation", "latin1_swedish_ci");

            migrationBuilder.AlterColumn<int>(
                name: "id",
                table: "tankmeasurement",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
        




            migrationBuilder.AlterColumn<decimal>(
                name: "TankVolume",
                table: "tank",
                type: "decimal(10)",
                precision: 10,
                nullable: false,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10);

            migrationBuilder.AlterColumn<decimal>(
                name: "TankHeight",
                table: "tank",
                type: "decimal(10)",
                precision: 10,
                nullable: false,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10);

            migrationBuilder.AlterColumn<int>(
                name: "Id",
                table: "tank",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            migrationBuilder.AlterColumn<int>(
                name: "id",
                table: "site",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            migrationBuilder.AlterColumn<int>(
                name: "ID",
                table: "pts",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            migrationBuilder.AlterColumn<decimal>(
                name: "ManualGPSFuelrefil",
                table: "fuelrefil",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "GPSFuelRefil",
                table: "fuelrefil",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "Duration",
                table: "fuelrefil",
                type: "decimal(10)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10,30)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<int>(
                name: "id",
                table: "alarm",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            migrationBuilder.CreateTable(
                name: "PtsTanks",
                columns: table => new
                {
                    PtsId = table.Column<int>(type: "int(11)", nullable: false),
                    TankId = table.Column<int>(type: "int(11)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PtsTanks", x => new { x.PtsId, x.TankId });
                    table.ForeignKey(
                        name: "FK_PtsTanks_pts_PtsId",
                        column: x => x.PtsId,
                        principalTable: "pts",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PtsTanks_tank_TankId",
                        column: x => x.TankId,
                        principalTable: "tank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                })
                .Annotation("MySql:CharSet", "latin1")
                .Annotation("Relational:Collation", "latin1_swedish_ci");

            migrationBuilder.CreateIndex(
                name: "IX_PtsTanks_TankId",
                table: "PtsTanks",
                column: "TankId");

            migrationBuilder.AddForeignKey(
                name: "FK_pts_tank_TankId",
                table: "pts",
                column: "TankId",
                principalTable: "tank",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_tankmeasurement_alarm_AlarmNavigationId",
                table: "tankmeasurement",
                column: "AlarmNavigationId",
                principalTable: "alarm",
                principalColumn: "id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_pts_tank_TankId",
                table: "pts");

            migrationBuilder.DropForeignKey(
                name: "FK_tankmeasurement_alarm_AlarmNavigationId",
                table: "tankmeasurement");

            migrationBuilder.DropTable(
                name: "PtsTanks");

            migrationBuilder.DropColumn(
                name: "PacketId",
                table: "tankmeasurement");

            migrationBuilder.DropColumn(
                name: "ProductUllage",
                table: "tankmeasurement");

            migrationBuilder.DropColumn(
                name: "Status",
                table: "tankmeasurement");

            migrationBuilder.DropColumn(
                name: "Tank",
                table: "tankmeasurement");

            migrationBuilder.RenameColumn(
                name: "AlarmNavigationId",
                table: "tankmeasurement",
                newName: "Alarm");

            migrationBuilder.RenameIndex(
                name: "IX_tankmeasurement_AlarmNavigationId",
                table: "tankmeasurement",
                newName: "tankmeasurement_alarm_idx");

            migrationBuilder.RenameIndex(
                name: "IX_pts_TankId",
                table: "pts",
                newName: "PTs_tank_idx");

            migrationBuilder.AlterColumn<decimal>(
                name: "TotalFuel",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "TotalDistance",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FuelLost",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterFuelUsed",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterFuelLost",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterEngineHrs",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "FlowMeterEffiency",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "ExpectedConsumption",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "ExcessWorkingHrsCost",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "EngHours",
                table: "vehicleconsumption",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "ExcessWorkingHrCost",
                table: "vehicle",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "PTSId",
                table: "tankmeasurement",
                type: "longtext",
                nullable: true,
                collation: "latin1_swedish_ci",
                oldClrType: typeof(string),
                oldType: "longtext")
                .Annotation("MySql:CharSet", "latin1")
                .OldAnnotation("MySql:CharSet", "latin1")
                .OldAnnotation("Relational:Collation", "latin1_swedish_ci");

            migrationBuilder.AlterColumn<int>(
                name: "id",
                table: "tankmeasurement",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .OldAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            migrationBuilder.AlterColumn<decimal>(
                name: "TankVolume",
                table: "tank",
                type: "decimal(10,30)",
                precision: 10,
                nullable: false,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10);

            migrationBuilder.AlterColumn<decimal>(
                name: "TankHeight",
                table: "tank",
                type: "decimal(10,30)",
                precision: 10,
                nullable: false,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10);

            migrationBuilder.AlterColumn<int>(
                name: "Id",
                table: "tank",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .OldAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            migrationBuilder.AlterColumn<int>(
                name: "id",
                table: "site",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .OldAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            migrationBuilder.AlterColumn<int>(
                name: "ID",
                table: "pts",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .OldAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            migrationBuilder.AlterColumn<decimal>(
                name: "ManualGPSFuelrefil",
                table: "fuelrefil",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "GPSFuelRefil",
                table: "fuelrefil",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AlterColumn<decimal>(
                name: "Duration",
                table: "fuelrefil",
                type: "decimal(10,30)",
                precision: 10,
                nullable: true,
                oldClrType: typeof(decimal),
                oldType: "decimal(10)",
                oldPrecision: 10,
                oldNullable: true);

            migrationBuilder.AddColumn<int>(
                name: "Id",
                table: "alarm_tankmeasurement",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AlterColumn<int>(
                name: "id",
                table: "alarm",
                type: "int(11)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int(11)")
                .OldAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            migrationBuilder.AddForeignKey(
                name: "PTs_tank",
                table: "pts",
                column: "TankId",
                principalTable: "tank",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "tankmeasurement_alarm",
                table: "tankmeasurement",
                column: "Alarm",
                principalTable: "alarm",
                principalColumn: "id");
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Persistence\Migrations\20231221092829_AddedStatusandMulplepacketacception.Designer.cs

﻿// <auto-generated />
using System;
using FMS.Persistence.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Persistence.Migrations
{
    [DbContext(typeof(GpsdataContext))]
    [Migration("20231221092829_AddedStatusandMulplepacketacception")]
    partial class AddedStatusandMulplepacketacception
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID");

                    b.HasKey("VehicleId", "EmployeeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID_idx");

                    b.ToTable("employeevehicles", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("alarm", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.Property<int?>("TankMeausementId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tankMeausementID");

                    b.Property<int?>("AlarmId")
                        .HasColumnType("int(11)")
                        .HasColumnName("alarmID");

                    b.HasKey("TankMeausementId", "AlarmId");

                    b.HasIndex(new[] { "TankMeausementId" }, "alarmMeasurement_tankmeasurement_idx");

                    b.HasIndex(new[] { "AlarmId" }, "alarmmeasurement_alarm_idx");

                    b.ToTable("alarm_tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.Property<string>("AssetId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AssetID");

                    b.Property<string>("SiteId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SiteID");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID");

                    b.HasKey("AssetId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "VehicleManufacturerID");

                    b.HasIndex(new[] { "VehicleModelId" }, "VehicleModelID");

                    b.HasIndex(new[] { "VehicleTypeId" }, "VehicleTypeID");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("CalibrationData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CalibrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("calibrationDate");

                    b.Property<string>("VehicleId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "calibrationDataRow_idx");

                    b.ToTable("calibrationdata", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Property<int>("DeviceImei")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceIMEI");

                    b.Property<int>("DeviceMakerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceMakerID");

                    b.Property<int>("DevicePhoneNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("DeviceImei")
                        .HasName("PRIMARY");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("devicemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DevicemanufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DevicemanufacturerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DevicemanufacturerId" }, "deviceModel_deviceManufaturer_idx");

                    b.ToTable("devicemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("EmployeeWorkNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'New'");

                    b.Property<string>("EmployeephoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeephoneNumber")
                        .HasDefaultValueSql("'0700000000'");

                    b.Property<string>("Employeestatus")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeestatus");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'Employee Name'");

                    b.Property<long?>("NationalId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("NationalID");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SiteId" }, "Employee_site_idx");

                    b.HasIndex(new[] { "NationalId" }, "NationalID_UNIQUE")
                        .IsUnique();

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal>("ExpectedAverage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("ExpectedAverage");

                    b.Property<int>("ExpectedAverageClassificationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ExpectedAverageClassificationID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExpectedAverageClassificationId" }, "Expected_classification_idx");

                    b.HasIndex(new[] { "VehicleId" }, "Expected_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "Site_idx");

                    b.HasIndex(new[] { "VehicleId", "SiteId", "ExpectedAverageClassificationId" }, "UniqueRecord")
                        .IsUnique();

                    b.ToTable("expectedaverage", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(545)
                        .HasColumnType("varchar(545)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("expectedaverageclassification", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Fuelrefil", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Duration")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("GpsfuelRefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("GPSFuelRefil");

                    b.Property<decimal?>("ManualGpsfuelrefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("ManualGPSFuelrefil");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("fuelrefil", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuecategory", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Property<int>("Int")
                        .HasColumnType("int(11)")
                        .HasColumnName("int");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Int")
                        .HasName("PRIMARY");

                    b.ToTable("issuepriority", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuestatus", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("AssignTo")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("closingDate");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dueDate");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("hyoungNo");

                    b.Property<int>("IssueCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("IssueCategoryID");

                    b.Property<DateTime?>("LastModfield")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("openDate");

                    b.Property<int>("Openby")
                        .HasColumnType("int(11)")
                        .HasColumnName("openby");

                    b.Property<int?>("Priority")
                        .HasColumnType("int(11)")
                        .HasColumnName("priority");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)")
                        .HasColumnName("problemDescription");

                    b.Property<string>("ProblemTitlte")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("problemTitlte");

                    b.Property<int?>("RelatedIssue")
                        .HasColumnType("int(11)")
                        .HasColumnName("relatedIssue");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("siteID");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Priority" }, "Issuetracker_priority_idx");

                    b.HasIndex(new[] { "Status" }, "Issuetracker_status_idx");

                    b.HasIndex(new[] { "AssignTo" }, "Issuetracker_userAsssignedTo_idx");

                    b.HasIndex(new[] { "Openby" }, "Issuetracker_user_idx");

                    b.HasIndex(new[] { "IssueCategoryId" }, "issetracker_issueID_idx");

                    b.HasIndex(new[] { "HyoungNo" }, "issue_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "issuetracker_site_idx");

                    b.ToTable("issuetracker", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("PtsserialNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("PTSSerialNo");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("TankId");

                    b.HasIndex(new[] { "SiteId" }, "PTS_Site_idx");

                    b.ToTable("pts", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.PtsTank", b =>
                {
                    b.Property<int>("PtsId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TankId")
                        .HasColumnType("int(11)");

                    b.HasKey("PtsId", "TankId");

                    b.HasIndex("TankId");

                    b.ToTable("PtsTanks");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("site", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.TagGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("TagId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tagID");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "Tag_Vehicle_idx");

                    b.HasIndex(new[] { "TagId" }, "Taggroup_vehicle_idx");

                    b.ToTable("tag_group", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<decimal>("TankHeight")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal>("TankVolume")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tank", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("AlarmNavigationId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConfigurationId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("FuelGradeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("PTSId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<double?>("ProductDensity")
                        .HasColumnType("double");

                    b.Property<double?>("ProductHeight")
                        .HasColumnType("double");

                    b.Property<double?>("ProductMass")
                        .HasColumnType("double");

                    b.Property<double?>("ProductTcvolume")
                        .HasColumnType("double")
                        .HasColumnName("ProductTCVolume");

                    b.Property<double?>("ProductUllage")
                        .HasColumnType("double");

                    b.Property<double?>("ProductVolume")
                        .HasColumnType("double");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Status")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("Tank")
                        .HasColumnType("int");

                    b.Property<int?>("TankFillingPercentage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double");

                    b.Property<double?>("WaterHeight")
                        .HasColumnType("double")
                        .HasColumnName("waterHeight");

                    b.Property<double?>("WaterVolume")
                        .HasColumnType("double");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AlarmNavigationId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TankId");

                    b.ToTable("tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Full Name");

                    b.Property<string>("Password")
                        .HasMaxLength(1045)
                        .HasColumnType("varchar(1045)")
                        .HasColumnName("password");

                    b.Property<int?>("UserType")
                        .HasColumnType("int(11)")
                        .HasColumnName("userType");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserType" }, "user_usertype_idx");

                    b.ToTable("user", null, t =>
                        {
                            t.HasComment("	");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("usertype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.Property<bool>("AverageKmL")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Average_km_l");

                    b.Property<string>("Capacity")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("CurrentPhysicalReading")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("DefaultEmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DefaultEmployeeID");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceID");

                    b.Property<decimal?>("ExcessWorkingHrCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("NumberPlate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("WorkingExpectedAverage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("WorkingSiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("WorkingSiteID");

                    b.Property<string>("Yom")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("YOM");

                    b.HasKey("VehicleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HyoungNo" }, "HyoungNo_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "DeviceId" }, "Vehicle_Device_idx");

                    b.HasIndex(new[] { "DefaultEmployeeId" }, "Vehicle_employee_idx");

                    b.HasIndex(new[] { "WorkingExpectedAverage" }, "vehicleExpectedAverage_idx");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "vehicle_manufacturer_idx");

                    b.HasIndex(new[] { "VehicleModelId" }, "vehicle_model_idx");

                    b.HasIndex(new[] { "WorkingSiteId" }, "vehicle_site_idx");

                    b.HasIndex(new[] { "VehicleTypeId" }, "vehicle_vehicleType_idx");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal?>("AvgSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID")
                        .HasDefaultValueSql("'0'");

                    b.Property<decimal?>("EngHours")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExcessWorkingHrsCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExpectedConsumption")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEffiency")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEngineHrs")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelUsed")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FuelEfficiency")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("FuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<ulong>("IsKmperhr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<sbyte?>("IsModified")
                        .HasColumnType("tinyint(4)");

                    b.Property<ulong>("IsNightShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<decimal?>("MaxSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<decimal?>("TotalDistance")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("TotalFuel")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId", "Date", "IsNightShift" }, "vehicle_date_shift_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "EmployeeId" }, "vehicleconsumption_employee_idx");

                    b.HasIndex(new[] { "SiteId" }, "vehicleconsumption_site_idx");

                    b.HasIndex(new[] { "ModifiedBy" }, "vehicleconsumption_user_idx");

                    b.ToTable("vehicleconsumption", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Abbvr")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Nothinghere")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehicletype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeID");

                    b.HasOne("FMS.Domain.Entities.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("VehicleID");
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "Alarm")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("alarmmeasurement_alarm");

                    b.HasOne("FMS.Domain.Entities.Tankmeasurement", "TankMeausement")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("TankMeausementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("alarmMeasurement_tankmeasurement");

                    b.Navigation("Alarm");

                    b.Navigation("TankMeausement");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("asset_ibfk_2");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("asset_ibfk_1");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("asset_ibfk_3");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Calibrationdata")
                        .HasForeignKey("VehicleId")
                        .HasPrincipalKey("HyoungNo")
                        .HasConstraintName("calibrationData_vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Devicemanufacturer", "Devicemanufacturer")
                        .WithMany("Devicemodels")
                        .HasForeignKey("DevicemanufacturerId")
                        .IsRequired()
                        .HasConstraintName("deviceModel_deviceManufaturer");

                    b.Navigation("Devicemanufacturer");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Employees")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("Employee_site");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Expectedaverageclassification", "ExpectedAverageClassification")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("ExpectedAverageClassificationId")
                        .IsRequired()
                        .HasConstraintName("Expected_classification");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("Expected_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("Expected_vehicle");

                    b.Navigation("ExpectedAverageClassification");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.HasOne("FMS.Domain.Entities.User", "AssignToNavigation")
                        .WithMany("IssuetrackerAssignToNavigations")
                        .HasForeignKey("AssignTo")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_userAsssignedTo");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "HyoungNoNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("HyoungNo")
                        .HasPrincipalKey("HyoungNo")
                        .IsRequired()
                        .HasConstraintName("issue_vehicle");

                    b.HasOne("FMS.Domain.Entities.Issuecategory", "IssueCategory")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("IssueCategoryId")
                        .IsRequired()
                        .HasConstraintName("issuetrcker_issuecategoryID");

                    b.HasOne("FMS.Domain.Entities.User", "OpenbyNavigation")
                        .WithMany("IssuetrackerOpenbyNavigations")
                        .HasForeignKey("Openby")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_useropenby");

                    b.HasOne("FMS.Domain.Entities.Issuepriority", "PriorityNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Priority")
                        .HasConstraintName("Issuetracker_priority");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("issuetracker_site");

                    b.HasOne("FMS.Domain.Entities.Issuestatus", "StatusNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Status")
                        .HasConstraintName("Issuetracker_status");

                    b.Navigation("AssignToNavigation");

                    b.Navigation("HyoungNoNavigation");

                    b.Navigation("IssueCategory");

                    b.Navigation("OpenbyNavigation");

                    b.Navigation("PriorityNavigation");

                    b.Navigation("Site");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Pts")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("PTS_Site");

                    b.HasOne("FMS.Domain.Entities.Tank", "Tank")
                        .WithMany("Pts")
                        .HasForeignKey("TankId");

                    b.Navigation("Site");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FMS.Domain.Entities.PtsTank", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Pts", "Pts")
                        .WithMany("PTSTanks")
                        .HasForeignKey("PtsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Domain.Entities.Tank", "Tank")
                        .WithMany("PtsTanks")
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pts");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "AlarmNavigation")
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("AlarmNavigationId");

                    b.HasOne("FMS.Domain.Entities.Site", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("SiteId");

                    b.HasOne("FMS.Domain.Entities.Tank", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("TankId");

                    b.Navigation("AlarmNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Usertype", "UserTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserType")
                        .HasConstraintName("user_usertype");

                    b.Navigation("UserTypeNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "DefaultEmployee")
                        .WithMany("VehiclesNavigation")
                        .HasForeignKey("DefaultEmployeeId")
                        .HasConstraintName("Vehicle_employee");

                    b.HasOne("FMS.Domain.Entities.Device", "Device")
                        .WithMany("Vehicles")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("Vehicle_Device");

                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("vehicle_manufacturer");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("vehicle_model");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .IsRequired()
                        .HasConstraintName("vehicle_vehicleType");

                    b.HasOne("FMS.Domain.Entities.Expectedaverage", "WorkingExpectedAverageNavigation")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingExpectedAverage")
                        .HasConstraintName("vehicleExpectedAverage");

                    b.HasOne("FMS.Domain.Entities.Site", "WorkingSite")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingSiteId")
                        .HasConstraintName("vehicle_site");

                    b.Navigation("DefaultEmployee");

                    b.Navigation("Device");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");

                    b.Navigation("WorkingExpectedAverageNavigation");

                    b.Navigation("WorkingSite");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("vehicleconsumption_employee");

                    b.HasOne("FMS.Domain.Entities.User", "ModifiedByNavigation")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("vehicleconsumption_user");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_vehicle");

                    b.Navigation("Employee");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Navigation("AlarmTankmeasurements");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Navigation("Devicemodels");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("VehiclesNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Navigation("Expectedaverages");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.Navigation("PTSTanks");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Pts");

                    b.Navigation("Tankmeasurements");

                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Navigation("Pts");

                    b.Navigation("PtsTanks");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Navigation("AlarmTankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Navigation("IssuetrackerAssignToNavigations");

                    b.Navigation("IssuetrackerOpenbyNavigations");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Calibrationdata");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Persistence\Migrations\GpsdataContextModelSnapshot.cs

﻿// <auto-generated />
using System;
using FMS.Persistence.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Persistence.Migrations
{
    [DbContext(typeof(GpsdataContext))]
    partial class GpsdataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID");

                    b.HasKey("VehicleId", "EmployeeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID_idx");

                    b.ToTable("employeevehicles", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("alarm", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.Property<int?>("TankMeausementId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tankMeausementID");

                    b.Property<int?>("AlarmId")
                        .HasColumnType("int(11)")
                        .HasColumnName("alarmID");

                    b.HasKey("TankMeausementId", "AlarmId");

                    b.HasIndex(new[] { "TankMeausementId" }, "alarmMeasurement_tankmeasurement_idx");

                    b.HasIndex(new[] { "AlarmId" }, "alarmmeasurement_alarm_idx");

                    b.ToTable("alarm_tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.Property<string>("AssetId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AssetID");

                    b.Property<string>("SiteId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SiteID");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID");

                    b.HasKey("AssetId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "VehicleManufacturerID");

                    b.HasIndex(new[] { "VehicleModelId" }, "VehicleModelID");

                    b.HasIndex(new[] { "VehicleTypeId" }, "VehicleTypeID");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("CalibrationData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CalibrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("calibrationDate");

                    b.Property<string>("VehicleId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "calibrationDataRow_idx");

                    b.ToTable("calibrationdata", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Property<int>("DeviceImei")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceIMEI");

                    b.Property<int>("DeviceMakerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceMakerID");

                    b.Property<int>("DevicePhoneNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("DeviceImei")
                        .HasName("PRIMARY");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("devicemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DevicemanufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DevicemanufacturerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DevicemanufacturerId" }, "deviceModel_deviceManufaturer_idx");

                    b.ToTable("devicemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("EmployeeWorkNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'New'");

                    b.Property<string>("EmployeephoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeephoneNumber")
                        .HasDefaultValueSql("'0700000000'");

                    b.Property<string>("Employeestatus")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeestatus");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'Employee Name'");

                    b.Property<long?>("NationalId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("NationalID");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SiteId" }, "Employee_site_idx");

                    b.HasIndex(new[] { "NationalId" }, "NationalID_UNIQUE")
                        .IsUnique();

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal>("ExpectedAverage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("ExpectedAverage");

                    b.Property<int>("ExpectedAverageClassificationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ExpectedAverageClassificationID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExpectedAverageClassificationId" }, "Expected_classification_idx");

                    b.HasIndex(new[] { "VehicleId" }, "Expected_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "Site_idx");

                    b.HasIndex(new[] { "VehicleId", "SiteId", "ExpectedAverageClassificationId" }, "UniqueRecord")
                        .IsUnique();

                    b.ToTable("expectedaverage", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(545)
                        .HasColumnType("varchar(545)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("expectedaverageclassification", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Fuelrefil", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Duration")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("GpsfuelRefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("GPSFuelRefil");

                    b.Property<decimal?>("ManualGpsfuelrefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("ManualGPSFuelrefil");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("fuelrefil", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuecategory", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Property<int>("Int")
                        .HasColumnType("int(11)")
                        .HasColumnName("int");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Int")
                        .HasName("PRIMARY");

                    b.ToTable("issuepriority", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuestatus", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("AssignTo")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("closingDate");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dueDate");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("hyoungNo");

                    b.Property<int>("IssueCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("IssueCategoryID");

                    b.Property<DateTime?>("LastModfield")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("openDate");

                    b.Property<int>("Openby")
                        .HasColumnType("int(11)")
                        .HasColumnName("openby");

                    b.Property<int?>("Priority")
                        .HasColumnType("int(11)")
                        .HasColumnName("priority");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)")
                        .HasColumnName("problemDescription");

                    b.Property<string>("ProblemTitlte")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("problemTitlte");

                    b.Property<int?>("RelatedIssue")
                        .HasColumnType("int(11)")
                        .HasColumnName("relatedIssue");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("siteID");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Priority" }, "Issuetracker_priority_idx");

                    b.HasIndex(new[] { "Status" }, "Issuetracker_status_idx");

                    b.HasIndex(new[] { "AssignTo" }, "Issuetracker_userAsssignedTo_idx");

                    b.HasIndex(new[] { "Openby" }, "Issuetracker_user_idx");

                    b.HasIndex(new[] { "IssueCategoryId" }, "issetracker_issueID_idx");

                    b.HasIndex(new[] { "HyoungNo" }, "issue_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "issuetracker_site_idx");

                    b.ToTable("issuetracker", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("PtsserialNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("PTSSerialNo");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("TankId");

                    b.HasIndex(new[] { "SiteId" }, "PTS_Site_idx");

                    b.ToTable("pts", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.PtsTank", b =>
                {
                    b.Property<int>("PtsId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TankId")
                        .HasColumnType("int(11)");

                    b.HasKey("PtsId", "TankId");

                    b.HasIndex("TankId");

                    b.ToTable("PtsTanks");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("site", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.TagGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("TagId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tagID");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "Tag_Vehicle_idx");

                    b.HasIndex(new[] { "TagId" }, "Taggroup_vehicle_idx");

                    b.ToTable("tag_group", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<decimal>("TankHeight")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal>("TankVolume")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tank", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("AlarmNavigationId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConfigurationId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("FuelGradeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("PTSId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<double?>("ProductDensity")
                        .HasColumnType("double");

                    b.Property<double?>("ProductHeight")
                        .HasColumnType("double");

                    b.Property<double?>("ProductMass")
                        .HasColumnType("double");

                    b.Property<double?>("ProductTcvolume")
                        .HasColumnType("double")
                        .HasColumnName("ProductTCVolume");

                    b.Property<double?>("ProductUllage")
                        .HasColumnType("double");

                    b.Property<double?>("ProductVolume")
                        .HasColumnType("double");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Status")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("Tank")
                        .HasColumnType("int");

                    b.Property<int?>("TankFillingPercentage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double");

                    b.Property<double?>("WaterHeight")
                        .HasColumnType("double")
                        .HasColumnName("waterHeight");

                    b.Property<double?>("WaterVolume")
                        .HasColumnType("double");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AlarmNavigationId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TankId");

                    b.ToTable("tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Full Name");

                    b.Property<string>("Password")
                        .HasMaxLength(1045)
                        .HasColumnType("varchar(1045)")
                        .HasColumnName("password");

                    b.Property<int?>("UserType")
                        .HasColumnType("int(11)")
                        .HasColumnName("userType");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserType" }, "user_usertype_idx");

                    b.ToTable("user", null, t =>
                        {
                            t.HasComment("	");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("usertype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.Property<bool>("AverageKmL")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Average_km_l");

                    b.Property<string>("Capacity")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("CurrentPhysicalReading")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("DefaultEmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DefaultEmployeeID");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceID");

                    b.Property<decimal?>("ExcessWorkingHrCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("NumberPlate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("WorkingExpectedAverage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("WorkingSiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("WorkingSiteID");

                    b.Property<string>("Yom")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("YOM");

                    b.HasKey("VehicleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HyoungNo" }, "HyoungNo_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "DeviceId" }, "Vehicle_Device_idx");

                    b.HasIndex(new[] { "DefaultEmployeeId" }, "Vehicle_employee_idx");

                    b.HasIndex(new[] { "WorkingExpectedAverage" }, "vehicleExpectedAverage_idx");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "vehicle_manufacturer_idx");

                    b.HasIndex(new[] { "VehicleModelId" }, "vehicle_model_idx");

                    b.HasIndex(new[] { "WorkingSiteId" }, "vehicle_site_idx");

                    b.HasIndex(new[] { "VehicleTypeId" }, "vehicle_vehicleType_idx");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal?>("AvgSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID")
                        .HasDefaultValueSql("'0'");

                    b.Property<decimal?>("EngHours")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExcessWorkingHrsCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExpectedConsumption")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEffiency")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEngineHrs")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelUsed")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FuelEfficiency")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("FuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<ulong>("IsKmperhr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<sbyte?>("IsModified")
                        .HasColumnType("tinyint(4)");

                    b.Property<ulong>("IsNightShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<decimal?>("MaxSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<decimal?>("TotalDistance")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("TotalFuel")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId", "Date", "IsNightShift" }, "vehicle_date_shift_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "EmployeeId" }, "vehicleconsumption_employee_idx");

                    b.HasIndex(new[] { "SiteId" }, "vehicleconsumption_site_idx");

                    b.HasIndex(new[] { "ModifiedBy" }, "vehicleconsumption_user_idx");

                    b.ToTable("vehicleconsumption", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Abbvr")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Nothinghere")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehicletype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeID");

                    b.HasOne("FMS.Domain.Entities.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("VehicleID");
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "Alarm")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("alarmmeasurement_alarm");

                    b.HasOne("FMS.Domain.Entities.Tankmeasurement", "TankMeausement")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("TankMeausementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("alarmMeasurement_tankmeasurement");

                    b.Navigation("Alarm");

                    b.Navigation("TankMeausement");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("asset_ibfk_2");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("asset_ibfk_1");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("asset_ibfk_3");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Calibrationdata")
                        .HasForeignKey("VehicleId")
                        .HasPrincipalKey("HyoungNo")
                        .HasConstraintName("calibrationData_vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Devicemanufacturer", "Devicemanufacturer")
                        .WithMany("Devicemodels")
                        .HasForeignKey("DevicemanufacturerId")
                        .IsRequired()
                        .HasConstraintName("deviceModel_deviceManufaturer");

                    b.Navigation("Devicemanufacturer");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Employees")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("Employee_site");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Expectedaverageclassification", "ExpectedAverageClassification")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("ExpectedAverageClassificationId")
                        .IsRequired()
                        .HasConstraintName("Expected_classification");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("Expected_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("Expected_vehicle");

                    b.Navigation("ExpectedAverageClassification");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.HasOne("FMS.Domain.Entities.User", "AssignToNavigation")
                        .WithMany("IssuetrackerAssignToNavigations")
                        .HasForeignKey("AssignTo")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_userAsssignedTo");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "HyoungNoNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("HyoungNo")
                        .HasPrincipalKey("HyoungNo")
                        .IsRequired()
                        .HasConstraintName("issue_vehicle");

                    b.HasOne("FMS.Domain.Entities.Issuecategory", "IssueCategory")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("IssueCategoryId")
                        .IsRequired()
                        .HasConstraintName("issuetrcker_issuecategoryID");

                    b.HasOne("FMS.Domain.Entities.User", "OpenbyNavigation")
                        .WithMany("IssuetrackerOpenbyNavigations")
                        .HasForeignKey("Openby")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_useropenby");

                    b.HasOne("FMS.Domain.Entities.Issuepriority", "PriorityNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Priority")
                        .HasConstraintName("Issuetracker_priority");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("issuetracker_site");

                    b.HasOne("FMS.Domain.Entities.Issuestatus", "StatusNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Status")
                        .HasConstraintName("Issuetracker_status");

                    b.Navigation("AssignToNavigation");

                    b.Navigation("HyoungNoNavigation");

                    b.Navigation("IssueCategory");

                    b.Navigation("OpenbyNavigation");

                    b.Navigation("PriorityNavigation");

                    b.Navigation("Site");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Pts")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("PTS_Site");

                    b.HasOne("FMS.Domain.Entities.Tank", "Tank")
                        .WithMany("Pts")
                        .HasForeignKey("TankId");

                    b.Navigation("Site");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FMS.Domain.Entities.PtsTank", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Pts", "Pts")
                        .WithMany("PTSTanks")
                        .HasForeignKey("PtsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Domain.Entities.Tank", "Tank")
                        .WithMany("PtsTanks")
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pts");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "AlarmNavigation")
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("AlarmNavigationId");

                    b.HasOne("FMS.Domain.Entities.Site", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("SiteId");

                    b.HasOne("FMS.Domain.Entities.Tank", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("TankId");

                    b.Navigation("AlarmNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Usertype", "UserTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserType")
                        .HasConstraintName("user_usertype");

                    b.Navigation("UserTypeNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "DefaultEmployee")
                        .WithMany("VehiclesNavigation")
                        .HasForeignKey("DefaultEmployeeId")
                        .HasConstraintName("Vehicle_employee");

                    b.HasOne("FMS.Domain.Entities.Device", "Device")
                        .WithMany("Vehicles")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("Vehicle_Device");

                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("vehicle_manufacturer");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("vehicle_model");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .IsRequired()
                        .HasConstraintName("vehicle_vehicleType");

                    b.HasOne("FMS.Domain.Entities.Expectedaverage", "WorkingExpectedAverageNavigation")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingExpectedAverage")
                        .HasConstraintName("vehicleExpectedAverage");

                    b.HasOne("FMS.Domain.Entities.Site", "WorkingSite")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingSiteId")
                        .HasConstraintName("vehicle_site");

                    b.Navigation("DefaultEmployee");

                    b.Navigation("Device");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");

                    b.Navigation("WorkingExpectedAverageNavigation");

                    b.Navigation("WorkingSite");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("vehicleconsumption_employee");

                    b.HasOne("FMS.Domain.Entities.User", "ModifiedByNavigation")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("vehicleconsumption_user");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_vehicle");

                    b.Navigation("Employee");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Navigation("AlarmTankmeasurements");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Navigation("Devicemodels");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("VehiclesNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Navigation("Expectedaverages");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.Navigation("PTSTanks");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Pts");

                    b.Navigation("Tankmeasurements");

                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Navigation("Pts");

                    b.Navigation("PtsTanks");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Navigation("AlarmTankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Navigation("IssuetrackerAssignToNavigations");

                    b.Navigation("IssuetrackerOpenbyNavigations");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Calibrationdata");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\App.js

import React, { useState } from 'react';
import { Route, Routes } from "react-router-dom"; // Make sure to import Switch from "react-router-dom"
import { Layout } from "./components/Layout";
import AppRoutes from "./AppRoutes";
import config  from 'devextreme/core/config';
import {licenseKey} from "./devextreme-license";

import "./assets/css/custom.css";


config({
    licenseKey
});


const App = () => {
    return (
        <Layout>
            <Routes>
                {AppRoutes.map((route, index) => (
                    <Route
                        key={index}
                        path={route.path}
                        element={route.element}
                        index={route.index}
                    />
                ))}
            </Routes>
        </Layout>
    );
};

export default App;


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\App.test.js

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\AppRoutes.js

//import index from "./components/Home";
import FuelConsumptionReport from "./pages/Consumption/ConsumptionGrid";
import VehicleDataGrid from "./components/Vehicle/VehicleDataGrid";
import EmployeeDataGrid from "./components/Employee/Employeedatagrid";
import ExpectedAVGClassification from "./components/ExpectedAVG/expectedAVGclassification";
import ExpectedAvg from "./components/ExpectedAVG/expectedAVGdatagrid";
import CreateExpectedAvg from "./components/ExpectedAVG/ExpectedAvgParentComponent";
import MapDetails from "./components/Consumptions/MapDetails";

const AppRoutes = [

    {
        index:true,
        path: "/consumption-grid",
        element: <FuelConsumptionReport />
    },

    {
        path: "/mapdetails",
        element: <MapDetails />
    },
    {
        path: "/Vehicle",
        element: <VehicleDataGrid />
    },
    {
        path: "/Employee",
        element: <EmployeeDataGrid />
    },
    {
        path: "/Expectedavgclass",
        element: <ExpectedAVGClassification />
    },
    {
        path: "/ExpectedAvg",
        element: <ExpectedAvg />
    },
    {
        path: "/CreateExpectedAvg",
        element: <CreateExpectedAvg />
    }


    // Add your new route
];

export default AppRoutes;


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\devextreme-license.js

export const licenseKey = 'hoPQVEuZLLha+K1VVGePIqDCEkgEfaHQvZV+cLeq99S8Xj9M4fH3as4vZ7Wzar+yuqugVosvD+Ja96/mTOszk44A2/OU6Krm73zTOhcdGF+x7hrNPU/m0grN0/dUaAWRmWMfxg==AAAAAAAAAAAAAAAAAAAAAAAAAAAyMzIsOTIyMzM3MjAzNjg1NDc3NTgwNyw5MjIzMzcyMDM2ODU0Nzc1ODA3LERlbHRhRm9YLDE2Njk0ODI1MjcsNywxNDg0ODQzOQ==';

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\GpsServiceAPI.js

import axios from 'axios';

//login infor 

const LOGIN_URL = process.env.REACT_APP_GPSGATE_APP_LOGIN_URL;
const TRACKS_URL = process.env.REACT_APP_GPSGATE_APP_TRACK_URL;
const USERNAME = process.env.REACT_APP_GPSGATE_APP_USERNAME;
const PASSWORD = process.env.REACT_APP_GPSGATE_APP_PASSWORD;

const login =   async () => {
    console.log("login data ");

    try{
        const response = await axios.post(LOGIN_URL, {
            username: USERNAME,
            password: PASSWORD
        },{
            headers: {
                "Accept": "application/json",
                'Content-Type': 'application/json',
            }
        });
       const token = response.data.token;

       sessionStorage.setItem('authToken', token);
       console.log("token",token);
       return token;
    }catch(error){
        console.log("error login",error);
        throw error;
       
    }


};


const FetchTrackData = async (vehicleId,date) => {
    try{

        const token = sessionStorage.getItem('authToken');
        //parse date to yyyy-mm-dd
          const _date = new Date(date);
           const testdate = new Date("2023-08-11");
          const formattedDate = `${_date.getFullYear()}-${String(_date.getMonth() + 1).padStart(2, '0')}-${String(_date.getDate()).padStart(2, '0')}`;         

        const response = await axios.get(`${TRACKS_URL}${178}/tracks`, {
            params: {
                date: testdate,
                filtered: false
              
            },
            headers: {
                "Accept": "application/json",
                'Content-Type': 'application/json',
                'Authorization': `${token}`
            }
        });

      
        return response.data;
    } catch (error) {
        console.log("Service:error fetching track data",error);
        throw error;
    }
};

export default {login,FetchTrackData};

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\index.js

import 'bootstrap/dist/css/bootstrap.css';
import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import reportWebVitals from './reportWebVitals';

//const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');
const baseUrl = '/';
const rootElement = document.getElementById('root');
const root = createRoot(rootElement);

root.render(
    <BrowserRouter>
        <App />
    </BrowserRouter>);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://cra.link/PWA
serviceWorkerRegistration.unregister();

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\reportWebVitals.js

const reportWebVitals = (onPerfEntry) => {
    if (onPerfEntry && onPerfEntry instanceof Function) {
        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
            getCLS(onPerfEntry);
            getFID(onPerfEntry);
            getFCP(onPerfEntry);
            getLCP(onPerfEntry);
            getTTFB(onPerfEntry);
        });
    }
};

export default reportWebVitals;


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\service-worker.js

/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }) => {
        // If this isn't a navigation, skip.
        if (request.mode !== 'navigate') {
            return false;
        } // If this is a URL that starts with /_, skip.

        if (url.pathname.startsWith('/_')) {
            return false;
        } // If this looks like a URL for a resource, because it contains // a file extension, skip.

        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        } // Return true to signal that we want to use the handler.

        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
    // Add in any other file extensions or routing criteria as needed.
    ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new StaleWhileRevalidate({
        cacheName: 'images',
        plugins: [
            // Ensure that once this runtime cache reaches a maximum size the
            // least-recently used images are removed.
            new ExpirationPlugin({ maxEntries: 50 }),
        ],
    })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

// Any other custom service worker logic can go here.


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\serviceWorkerRegistration.js

// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
    window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
);

export function register(config) {
    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
        // The URL constructor is available in all browsers that support SW.
        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
        if (publicUrl.origin !== window.location.origin) {
            // Our service worker won't work if PUBLIC_URL is on a different origin
            // from what our page is served on. This might happen if a CDN is used to
            // serve assets; see https://github.com/facebook/create-react-app/issues/2374
            return;
        }

        window.addEventListener('load', () => {
            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

            if (isLocalhost) {
                // This is running on localhost. Let's check if a service worker still exists or not.
                checkValidServiceWorker(swUrl, config);

                // Add some additional logging to localhost, pointing developers to the
                // service worker/PWA documentation.
                navigator.serviceWorker.ready.then(() => {
                    console.log(
                        'This web app is being served cache-first by a service ' +
                        'worker. To learn more, visit https://cra.link/PWA'
                    );
                });
            } else {
                // Is not localhost. Just register service worker
                registerValidSW(swUrl, config);
            }
        });
    }
}

function registerValidSW(swUrl, config) {
    navigator.serviceWorker
        .register(swUrl)
        .then((registration) => {
            registration.onupdatefound = () => {
                const installingWorker = registration.installing;
                if (installingWorker == null) {
                    return;
                }
                installingWorker.onstatechange = () => {
                    if (installingWorker.state === 'installed') {
                        if (navigator.serviceWorker.controller) {
                            // At this point, the updated precached content has been fetched,
                            // but the previous service worker will still serve the older
                            // content until all client tabs are closed.
                            console.log(
                                'New content is available and will be used when all ' +
                                'tabs for this page are closed. See https://cra.link/PWA.'
                            );

                            // Execute callback
                            if (config && config.onUpdate) {
                                config.onUpdate(registration);
                            }
                        } else {
                            // At this point, everything has been precached.
                            // It's the perfect time to display a
                            // "Content is cached for offline use." message.
                            console.log('Content is cached for offline use.');

                            // Execute callback
                            if (config && config.onSuccess) {
                                config.onSuccess(registration);
                            }
                        }
                    }
                };
            };
        })
        .catch((error) => {
            console.error('Error during service worker registration:', error);
        });
}

function checkValidServiceWorker(swUrl, config) {
    // Check if the service worker can be found. If it can't reload the page.
    fetch(swUrl, {
        headers: { 'Service-Worker': 'script' },
    })
        .then((response) => {
            // Ensure service worker exists, and that we really are getting a JS file.
            const contentType = response.headers.get('content-type');
            if (
                response.status === 404 ||
                (contentType != null && contentType.indexOf('javascript') === -1)
            ) {
                // No service worker found. Probably a different app. Reload the page.
                navigator.serviceWorker.ready.then((registration) => {
                    registration.unregister().then(() => {
                        window.location.reload();
                    });
                });
            } else {
                // Service worker found. Proceed as normal.
                registerValidSW(swUrl, config);
            }
        })
        .catch(() => {
            console.log('No internet connection found. App is running in offline mode.');
        });
}

export function unregister() {
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.ready
            .then((registration) => {
                registration.unregister();
            })
            .catch((error) => {
                console.error(error.message);
            });
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\setupTests.js

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Home.js

import React from "react";
//import ConsumptionGrid from "./ConsumptionGrid";

const HomePage = () => {
    return (
        <div>
            <h1>FMS system</h1>
        </div>
    );
};

export default HomePage;


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Layout.js

import React, { Component } from 'react';
import { Container } from 'reactstrap';
import { NavMenu } from './NavMenu';
import { Height } from 'devextreme-react/chart';


export class Layout extends Component {
    static displayName = Layout.name;

    render() {
        return (
            <div>
                <NavMenu />
                <Container>
                    {this.props.children}
                </Container>
            </div>
        );
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\NavMenu.js

import React, { Component } from 'react';
import { Collapse, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';
import { Link } from 'react-router-dom';
import './NavMenu.css';

export class NavMenu extends Component {
    static displayName = NavMenu.name;

    constructor(props) {
        super(props);

        this.toggleNavbar = this.toggleNavbar.bind(this);
        this.state = {
            collapsed: true
        };
    }

    toggleNavbar() {
        this.setState({
            collapsed: !this.state.collapsed
        });
    }

    render() {
        return (
            <header>
                <Navbar className="navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3" container light>
                    <NavbarBrand tag={Link} to="/">FMS.WebClient</NavbarBrand>
                    <NavbarToggler onClick={this.toggleNavbar} className="mr-2" />
                    <Collapse className="d-sm-inline-flex flex-sm-row-reverse" isOpen={!this.state.collapsed} navbar>
                        <ul className="navbar-nav flex-grow">
                            <NavItem>
                                <NavLink tag={Link} className="text-dark" to="/">Home</NavLink>
                                
                            </NavItem>

                        </ul>
                    </Collapse>
                </Navbar>
            </header>
        );
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\sampleconsumptiondata.js

const sampleData= [{"id":485828,
                   "vehicleId":45,
                 "totalFuel":21,
              "hyoungNo":"TP113","vehicleType":"TP",
              "vehicleModel":"ZZ3257N3247B",
              "vehicleManufacturer":"SINOTRUK HOWO",
              "expectedAveraged":43,
              "defaultEmployees":28487,
              "siteId":1,
              "excessWorkingHrCost":null,
              "date":"2023-05-09T08:00:55",
              "maxSpeed":13.10,
              "avgSpeed":4.70,
              "totalDistance":44407,
              "fuelLost":0,
              "isAverageKm":true,
              "flowMeterFuelUsed":null,
              "flowMeterFuelLost":0,
              "flowMeterEffiency":0,
              "fuelEfficiency":0.00,"engHours":null,
              "flowMeterEngineHrs":null,
              "isNightShift":false,"comments":"Demo data","isModified":false},
              {"id":485876,"vehicleId":52,"totalFuel":15,"hyoungNo":"TP119","vehicleType":"TP",
              "vehicleModel":"ZZ3257N3247B","vehicleManufacturer":"SINOTRUK HOWO","expectedAveraged":0,"defaultEmployees":28489,
              "siteId":1,"excessWorkingHrCost":null,"date":"2023-05-09T00:00:03","maxSpeed":9.70,"avgSpeed":1.80,"totalDistance":26787,
              "fuelLost":0,"isAverageKm":true,"flowMeterFuelUsed":null,"flowMeterFuelLost":0,"flowMeterEffiency":0,"fuelEfficiency":0.00,"engHours":null,
              "flowMeterEngineHrs":null,"isNightShift":false,"comments":"Demo data","isModified":false}]


export default sampleData;



//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Consumptions\ChartDetails.js

import React, { useEffect, useState } from "react";
import { Chart, Series, ArgumentAxis, ValueAxis, Tooltip, Legend, CommonAxisSettings, Crosshair, HorizontalLine,Label, VerticalLine } from "devextreme-react/chart";
import GpsServiceAPI from "../../GpsServiceAPI";
import DropDownBox from 'devextreme-react/drop-down-box';
import TagBox from "devextreme-react/tag-box";
import RangeSelector, { Size,Chart as ChartOptions,Margin, Scale, Behavior,RangeSelectorTypes, } from 'devextreme-react/range-selector';
import { VisualRange } from 'devextreme-react/common/charts';

const ChartDetails = ({ vehicleId, date }) => {
    const [variableData, setVariableData] = useState([]);
    const [selectedVariables, setSelectedVariables] = useState([]);

    useEffect(() => {
        if(vehicleId && date)
        { console.log("fetching variable data",vehicleId,date);
        fetchVariableData(vehicleId,date);
    }},[vehicleId,date]);

  
        const fetchVariableData = async (vehicleId,date) => {
            try{
                
                await GpsServiceAPI.login();
                const data = await GpsServiceAPI.FetchTrackData(vehicleId,date);
                setVariableData(data);  
                console.log("variable data",data);
            } catch(error)
            {
                console.error("Error Fetching data",error);
            }
        
        };
       

        const variableNames = variableData.length > 0 
        ? Object.keys(variableData[0].variables).map(key => ({ value: key, label: key }))
        : [];


 console.log("variable options",variableNames);

    const handleVariableSelection  = (e) => {
        setSelectedVariables(e.addedItems[0]);
    };

    const onValueChanged = (selectedItems) => {
        setSelectedVariables(selectedItems.value);
    };


    const chartData = selectedVariables.flatMap(variable => 
        variableData.map(data => {
            const localtime = new Date(data.utc).toLocaleTimeString();
            const entry = {
                time: localtime,
                value: data.variables[variable],
                variable: variable,
            };
          //  console.log("Chart entry:", entry);
            return entry;
        })
    ).flat();
    console.log("chartdata",chartData);

    const crosshairFormat = {
        type: 'longTime',
        precision: 0,
      };

    return (
        <div>
            <div className="dx-fieldset">
                <div className="dx-field">
                    <div className="dx-field-label">Select Variable</div>
                    <div className="dx-field-value">
                        <TagBox
                            dataSource={variableNames}
                            valueExpr="value"
                            displayExpr="label"
                            value={selectedVariables}
                            onValueChanged={onValueChanged}
                            showSelectionControls={true}
                            applyValueMode="instantly"
                            searchEnabled={false}
                            selectAllMode=""
                            showMultiTagOnly={false}
show                        />

                    </div>
                </div>
            </div>

            {selectedVariables.length > 0 && (
                <Chart dataSource={chartData} height={400} width={'100%'}>
                    <ArgumentAxis argumentType="datetime" tickInterval={{ hours: 1 }} />
                    <ValueAxis title={chartData.map(x=>(x.variable))} />
                    <Legend />
                    <Tooltip enabled={true} />
                      
                  <Crosshair enabled={true}>
                    <HorizontalLine visible={true} />
                    <VerticalLine visible ={true} > <Label visible ={true} format={crosshairFormat}/></VerticalLine>
                   
                  </Crosshair>
                    <CommonAxisSettings endOnTick = {false} />
                    {selectedVariables.map((variable, index) => (
                        <Series 
                            key={index}
                            valueField="value"
                            argumentField="time"
                            name={variable}
                            type="line"
                        />
                        
                    ))}
                </Chart>
                
            )
                     
            
            }

{selectedVariables.length > 0 && (
      <RangeSelector >


      </RangeSelector>


 
 )}
        </div>
    );
};

export default ChartDetails;


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Consumptions\HistoryDetails.js

import React,{useState,useEffect} from 'react';
import DataGrid, { Column } from 'devextreme-react/data-grid';
import axios from 'axios';


const apiUrl = process.env.REACT_APP_FMS_API_URL;

const HistoryDetails = ({vehicleId,date}) => {
  const [historyData, setHistoryData] = useState([]);   

  useEffect(() => {
    if(vehicleId && date)
    {
        console.log("fetching history data",vehicleId,date);
        loadHistoryData(vehicleId,date);
    
      }},[vehicleId,date]);
    
      const loadHistoryData = async (vehicleId,date) => {
        try{
            const response = await axios.get(`${apiUrl}/consumption/gethistoryconsumption`, {
                params: {
                    vehicleId: vehicleId,
                    date: date
                }
            });
            setHistoryData(response.data);
        } catch (error) {
            console.log("error fetctching historical data",error);
        }
    };
    return (
   
        <DataGrid
          id="gridContainer"
          dataSource={historyData}
          keyExpr="id"
          showBorders={true}
        >
         <Column dataField="date" caption="Date" dataType="date" />
                                <Column dataField="employee" caption="Employee" />
                                <Column dataField="totalFuel" caption="Total Fuel" />
                                <Column dataField="expectedAveraged" caption="ExpectedAveraged" />
                                <Column dataField="totalDistance" caption="Total Distance" />
                                <Column dataField="engHours" caption="Engine Hours" />
                                <Column dataField="maxSpeed" caption="Max Speed" />
                                <Column dataField="avgSpeed" caption="Avg Speed" />
                                <Column dataField="fuelEfficiency" caption="Fuel Efficiency" />
                                <Column dataField="fuelLost" caption="Fuel Lost" />
                                <Column dataField="isNightShift" caption="Is Night Shift" />
                                <Column dataField="isAverageKm" caption="Is Km/l" />
                                <Column dataField="comments" caption="Comments" />
                                <Column dataField="vehicleId" caption="Vehicle ID" />
                                <Column dataField="site" caption="Site" />
        </DataGrid>
    );


};
export default HistoryDetails;  


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Consumptions\WrappedMapDetails.js

import React, { useCallback, useEffect, useState } from "react";
//import Map from 'devextreme-react/map';
import {Map,PolyLine,GoogleApiWrapper } from 'google-maps-react';
import GpsServiceAPI from '../../GpsServiceAPI';
import { Button } from "devextreme-react/button";

const MapContainerStyle = {
    height: "500px",
    width: "100%",
    position: "relative"

}


const MapDetails = ({ vehicleId, date,google}) => {

    const [mapData, setMapData] = useState([]);
    const [center ,setCenter] = useState({ lat: 0.0236, lng: 37.9062 });
  
    


    const fetchMapData = useCallback(async () => {
        try {
     

            await GpsServiceAPI.login();
            const trackData = await GpsServiceAPI.FetchTrackData(vehicleId, date);
            const sortedData = trackData.sort((a, b) => new Date(a.utc) - new Date(b.utc));

            const polylinePath  = sortedData.map(item => ({
                lat: item.position.latitude,
                lng: item.position.longitude
            }));
            setMapData(polylinePath);

            if(polylinePath.length > 0){
                setCenter(polylinePath[0]);
            }

        }
        catch (error) {
            console.log("error fetching map data", error);
        }

    }, [vehicleId, date]);
    console.log("mapData", mapData);

    useEffect(() => {
        if (vehicleId && date) {

            fetchMapData();
        }
    }, [vehicleId, date, fetchMapData]);

    const clear = () => {
        
    }

   
return (
    <div>
        <div>
            <div >
                <Button text="Refresh" />
            </div>
            <div>  
                 <button text="clear" onClick={clear} />
            </div>
        </div>
        <div>
        <Map
        google = {google}
          MapContainerStyle={MapContainerStyle}
           zoom={8}
           center={center}
     >
        {mapData.length > 0 &&
         <PolyLine path={mapData}
           options={{
                strokeColor: "#FF0000",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillcolor: "#FF0000",
                clickable: false,
                draggable: false,
                editable: false,
                visible: true,
                zIndex: 1,
                fillOpacity: 0.35

              }}
         
         
         
         />}
      </Map>  
    </div>
    </div>
);
    

};

export const WrappedMapDetails  = GoogleApiWrapper({
    apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY
  })(MapDetails);

  export default MapDetails;



//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Employee\Employeedatagrid.js

import React from 'react';
import DataGrid, { Editing, FilterRow, Column, RequiredRule, HeaderFilter, Lookup } from 'devextreme-react/data-grid';
import CustomStore from 'devextreme/data/custom_store';
import axios from 'axios';
import EmployeeVehicleTagBox from './employeevehicleTagbox';

const apiUrl = "http://localhost:7009/api";

const vehicleTemplate = (container, options) => {
    const noBreakSpace = '\u00A0';
    const text = (options.value || []).map(element => element.hyoungNo).join(', ');
    container.textContent = text || noBreakSpace;
    container.title = text;
};


const Employeedatagrid = () => {
    const dataSource = new CustomStore({
        key: 'id',
        load: async () => {
            const response = await axios.get(`${apiUrl}/employee/getlist`);
            return response.data;
        },
        byKey: async (key) => {
            const response = await axios.get(`${apiUrl}/employee/${key}`);
            // console.log("Response.data: ", response.data);
            return response.data;

        },
        update: async (key, values) => {
            //console.log('Request data:', { values, id: key });
            const originalData = await dataSource.byKey(key);
            const updatedVehicles = values.vehicles ? values.vehicles.map(vehicleId => ({ vehicleId })) : originalData.vehicles;
            const updatedValues = { ...values, vehicles: updatedVehicles }; // Use the updated vehicles array
            const updatedData = { ...originalData, ...updatedValues, id: key };
            // Add axios.post or axios.put here
            if (updatedData.siteId == 0) {
                delete updatedData.siteId;
            }
            //   console.log("Updated data: ", updatedData);

            const response = await axios.put(`${apiUrl}/employee/update/${key}`, updatedData);
            return response.data;
        },

        insert: async (values) => {
            const newVehicles = values.vehicles ? values.vehicles.map(vehicleId => ({ vehicleId })) : [];
            const newValues = { ...values, employeestatus: "Active", vehicles: newVehicles };
            if (newValues.siteId == 0) {
                delete newValues.siteId;
            }
            const response = await axios.post(`${apiUrl}/employee/create`, newValues);
            return response.data;
        }
    });

    const onRowInserted = (e) => {
        e.component.navigateToRow(e.key);
    };



    const siteDataSource = new CustomStore({
        key: 'id',
        loadMode: 'raw',
        load: async () => {
            const response = await axios.get(`${apiUrl}/site/GetList`);
            return response.data;
        }


    });


    const vehicleDataSource = new CustomStore({
        key: 'vehicleId',
        loadMode: 'raw',
        load: async () => {
            const response = await axios.get(`${apiUrl}/vehicle/getsimplevehiclelist`);
            return response.data;
        }
    });

    const calculateFilterExpression = (filterValue, selectedFilterOperation, target) => {
        if (target === 'search' && typeof (filterValue) === 'string') {
            return [this.dataField, 'contains', filterValue];
        }
        return function (data) {
            return (data.Vehicles || []).indexOf(filterValue) !== -1;
        }


    };



    return (

      
        <div>
              <h1>Employees</h1>
            <DataGrid
                dataSource={dataSource}
                keyExpr="id"
                showBorders={true}
                columnAutoWidth={true}
                onRowInserted={onRowInserted}
            >
                <FilterRow visible={true} />

                <HeaderFilter visible={true} />
                <Editing
                    mode="row"
                    allowUpdating={true}
                    allowDeleting={false}
                    selectTextOnEditStart={true}
                    allowAdding={true}

                    startEditAction="click"
                />
                <Column dataField="id" allowEditing={false} visible={false} />
                <Column dataField="fullName" caption="Full Names">
                    <RequiredRule />
                </Column>
                <Column dataField="nationalId" caption="National ID" alignment="left" width={100} >
                    <RequiredRule />
                </Column>
                <Column dataField="employeephoneNumber" caption="Phone No" />
                <Column dataField="employeeWorkNo" caption="Work No" />
                <Column dataField="employeestatus" allowEditing={false} ></Column>
                <Column
                    dataField="vehicles"
                    width={150}
                    caption="Default vehicles"
                    allowSorting={false}
                    editCellComponent={EmployeeVehicleTagBox}
                    cellTemplate={vehicleTemplate}
                    calculateFilterExpression={calculateFilterExpression}
                >
                    <Lookup dataSource={vehicleDataSource} valueExpr="vehicleId" displayExpr="hyoungNo" />
                </Column>
                <Column dataField="siteId" caption="Site" width={150}>
                    <Lookup dataSource={siteDataSource} valueExpr="id" displayExpr="name" />
                </Column>
            </DataGrid>
        </div>
    );
};

export default Employeedatagrid;

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Employee\employeevehicleTagbox.js


import React from 'react';
import TagBox from 'devextreme-react/tag-box';

class employeevehicleTagbox extends React.Component {
    onValueChanged = (e) => {
        this.props.data.setValue(e.value);
    }

    onSelectionChanged = (e) => {
        this.props.data.component.updateDimensions();
    }

    render() {
        return (
            <TagBox
                dataSource={this.props.data.column.lookup.dataSource}
                defaultValue={this.props.data.value}
                valueExpr="vehicleId"
                displayExpr="hyoungNo"
                showSelectionControls={true}
                maxDisplayedTags={3}
                applyValueMode="useButtons"
                searchEnabled={true}
                onValueChanged={this.onValueChanged}
                onSelectionChanged={this.onSelectionChanged}
            />
        );
    }
}

export default employeevehicleTagbox;


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\ExpectedAVG\CreateExpectedAVG.js

import React, { useState, useEffect } from 'react';
import DataGrid, { Column, Editing, Lookup, FilterRow, HeaderFilter } from 'devextreme-react/data-grid';
import CustomStore from 'devextreme/data/custom_store';
import axios from 'axios';
import SelectBox from 'devextreme-react/select-box';
import TextArea from 'devextreme-react/text-area';
import Button from 'devextreme-react/button';
import { toast, ToastContainer } from 'react-toastify';
import Toast from './../../../node_modules/devextreme-react/toast';
import notify from './../../../node_modules/devextreme/ui/notify';
//import config from '../node_modules/devextreme/core/config';


const apiUrl = "http://localhost:7009/api";
const CreateExpectedAVG = ({ selectedVehicles, clearVehicles }) => {

    const [toastConfig, setToastConfig] = useState({ isVisible: false, type: 'success', message: '' });

    

//    setToastConfig({ isVisible: false, type: '', message: '' });


const onHiding = () => {
    setToastConfig({ ...toastConfig, isVisible: false });
}


    const saveRecords = async () => {

        try {
            const dataToSend = selectedVehicles.map(vehicle => {
                return {       
                    vehicleId: vehicle.data.vehicleId,
                    classification: vehicle.classification,
                    expectedValue: vehicle.expectedValue,
                    workingSiteId: vehicle.data.workingSiteId
                };
            });
            console.log("data to send", dataToSend);
            const data = Array.isArray(dataToSend) ? dataToSend : [dataToSend];
            const response = await axios({
                method: 'post',
                url: `${apiUrl}/ExpectedAVG/create`,
                data: data,  // send data as an array
                headers: { 'Content-Type': 'application/json' }
            });

            if (response.status === 200) {
                setToastConfig({ isVisible: true, type: 'success', message: "Expected Averaged Created Successfully" });
               // toast.success("Expected Averaged Created Successfully");
               clearVehicles();

            }
            else
            {
                setToastConfig({ isVisible: true, type: 'error', message: "Error Occurred" });               
            }
         
        }
        catch (error) {
            setToastConfig({ isVisible: true, type: 'error', message: error.message });           // console.error(error);
        }
       

    };
    return (
        <div>
        <DataGrid
            dataSource={selectedVehicles.map(vehicle => ({
                ...vehicle.data,
                classification:vehicle.classification,
                expectedValue: vehicle.expectedValue 
            }))}
            showBorders={true}
        >
            <Column dataField="vehicleId" caption="Vehicle ID" allowEditing={false} width={100} />
            <Column dataField="hyoungNo" caption="Hyoung No" />
            <Column dataField="expectedValue" caption="Expected Averaged" alignment="center" />
            <Column dataField="classification" caption="Selected Classification" />
            <Column dataField="workingSiteId" caption="Working Site" />
            </DataGrid>
            <div className="row align-items-end">
                <div className="col">
                    <label className="col-form-label" ></label>
                </div>
                <div className="col-auto">
                    <button className="btn btn-success" onClick={saveRecords} disabled={selectedVehicles.length === 0}>Save</button>
                </div>
            </div>

            <Toast
                visible={toastConfig.isVisible}
                message={toastConfig.message}
                type={toastConfig.type}
                duration={3000}
                position="bottom-center"
                onHiding={onHiding}
                 width={500}
            ></Toast>
            </div>
    );
};

export default CreateExpectedAVG;

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\ExpectedAVG\expectedAVGclassification.js

import React from 'react';
import DataGrid, { Column, Paging, FilterRow, Sorting, ColumnChooser, ColumnFixing, Lookup, FilterPanel, SearchPanel, Editing } from 'devextreme-react/data-grid';
import axios from 'axios';
import CustomStore from 'devextreme/data/custom_store';

const apiUrl = "http://localhost:7009/api";

const expectedAVGclassification = () => {
    const dataSource = new CustomStore({
        key: 'id',
        load: async () => {
            const response = await axios.get(`${apiUrl}/ExpectedAVGClassification/getlist`);
            return response.data;
        },
        update: async (key, values) => {
            const originalItem = await dataSource.byKey(key);
            const updatedItem = { ...originalItem, ...values, id: key };

            console.log("updatedItem", updatedItem)
            const response = await axios.put(`${apiUrl}/ExpectedAVGClassification/update/${key}`, updatedItem);
            return response.data;
        },
        insert: async (values) => {
            const response = await axios.post(`${apiUrl}/ExpectedAVGClassification/create`, values);
            return response.data;
        },
        byKey: async (key) => {
            const response = await axios.get(`${apiUrl}/ExpectedAVGClassification/getlist`);
            const originalData = response.data.find((item) => item.id === key);
            return originalData;
        }
    });

    const onRowInserted = (e) => {
        e.component.navigateToRow(e.key);
    };

    return (
        <DataGrid dataSource={dataSource} // here
            keyExpr="id"
            showBorders={true}
            columnAutoWidth={true}
            onRowInserted={onRowInserted}
        >
            <Editing
                mode="row"
                allowUpdating={true}
                allowDeleting={false}
                selectTextOnEditStart={true}
                allowAdding={true}
                startEditAction="click"
            />

            <Column dataField="id"
                caption="ID"
                width={50}
                allowEditing={false} />
            <Column dataField="name" caption="Name" />
            <Column dataField="description" caption="Description" />
        </DataGrid>
    );
};

export default expectedAVGclassification;


//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\ExpectedAVG\expectedAVGdatagrid.js

import React, { useState, useEffect } from 'react';
import DataGrid, { Column, Editing, Lookup, FilterRow, HeaderFilter } from 'devextreme-react/data-grid';
import CustomStore from 'devextreme/data/custom_store';
import axios from 'axios';
import SelectBox from 'devextreme-react/select-box';
import TextArea from 'devextreme-react/text-area';

const apiUrl = "http://localhost:7009/api";

const ExpectedAvgDatagrid = () => {


    const [selectedVehicleType, setSelectedVehicleType] = useState('');
    const [selectedSite, setSelectedSite] = useState('');
    const [selectedModel, setSelectedModel] = useState('');
    const [expectedValue, setExpectedValue] = useState('');
    const [selectVehicleManufacture,setVehicleManufacture] = useState('');

    const [dataSource, setDataSource] = useState([]);

    useEffect(() => {
        const dataSourceInit = new CustomStore({
            key: 'id',
            load: async () => {
                const response = await axios.get(`${apiUrl}/expectedavg/getlist`);
                return response.data;
            },
        
            update: async (key, values) => {
                const originalItem = await dataSource.byKey(key);
                const updatedItem = { ...originalItem, ...values, id: key };
                const response = await axios.put(`${apiUrl}/expectedavg/update/${key}`, updatedItem);
                return response.data;
            },
            byKey: async (key) => {
                const response = await axios.get(`${apiUrl}/expectedavg/getlist`);
                return response.data.find(item => item.id === key);
            }
        });

        setDataSource(dataSourceInit);
    }, []);
        const onRowInserted = (e) => {
            e.component.navigateToRow(e.key);
        };



    const handleApplyExpectedValue = () => {

        //apply the expected value to all filtered rows int the expectedavgdatagrid 
        const filteredData = filteredData(dataSource);
        filteredData.forEach(row => {
            row.expextedValue1 = expectedValue;

        });

        setDataSource(...dataSource);
    }



    const expAVGclassificationDataSource = new CustomStore(
        {
            key: 'id',
            load: async () => {
                const response = await axios.get(`${apiUrl}/ExpectedAVGClassification/getlist`);
                return response.data;
            }
        });

    const vehicleDataSource = new CustomStore(
        {
            key: 'id',
            load: async () => {
                const response = await axios.get(`${apiUrl}/vehicle/getlist`);
                return response.data;
            }
        });

    const siteDataSource = new CustomStore(
        { 
            key: 'id', 
            load: async () => {
                const response = await axios.get(`${apiUrl}/site/getlist`);
                return response.data;
            }
        });
    const vehicleManufactureDataSource = new CustomStore(
        {
            key: 'id',
            load: async () => {
                const response = await axios.get(`${apiUrl}/vehiclemanufacturer/getlist`);
                return response.data;
            }
        });
    const vehicleModelDataSource = new CustomStore(
        {
            key: 'id',
            load: async () => {
                const response = await axios.get(`${apiUrl}/vehiclemodel/getlist`);
                return response.data;
            }
        });
    const vehicleTypeDataSource = new CustomStore(
        {
            key: 'id',
            load: async () => {
                const response = await axios.get(`${apiUrl}/vehicletype/getlist`);
                return response.data;
            }
        });

    return (

        <div className="row">      
        <DataGrid
            dataSource={dataSource}
            keyExpr="id"
            showBorders={true}
            onRowInserted={onRowInserted}
            columnAutoWidth={true}

        >
            <FilterRow visible={true} />
            <HeaderFilter visible={true} />

            <Editing
                mode="batch"
                allowUpdating={true}
                    allowDeleting={true}
                    allowAdding={false}
                 useIcons={true}/>

            <Column dataField="id" caption="ID" width={50} allowEditing={false} />
                <Column dataField="hyoungNo" caption="Hyoung No" allowEditing={false} />
                <Column dataField="expectedAverageClassificationName" caption="Expected Average Classification" allowEditing={false} />
                <Column dataField="vehicleManufacturer" caption="Vehicle Manufacturer" allowEditing={false} />
                <Column dataField="vehicleType" caption="Vehicle type" allowEditing={false} />
                <Column dataField="site" caption="Site" allowEditing={false} />
                <Column dataField="expectedAveragevalue" caption="expectedAveragevalue" allowEditing={true} alignment="center" />

               
         
        </DataGrid>
    </div>
    );
};
export default ExpectedAvgDatagrid;

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\ExpectedAVG\ExpectedAvgParentComponent.js

import VehicleFilterPanel from './VehicleFilterPanel';
import CreateExpectedAVG from './CreateExpectedAVG';
import SelectBox from 'devextreme-react/select-box';
import { NumberBox } from 'devextreme-react/number-box';
import axios from "axios";
//import CustomStore from 'devextreme/data/custom_store';
import TextArea from 'devextreme-react/text-area';
//import { Toast } from 'devextreme-react/toast';
//import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import {
    Validator,
    RequiredRule
} from 'devextreme-react/validator';
//import Toast from 'devextreme-react/toast';

import 'devextreme/dist/css/dx.light.css';
import React, { useState, useEffect } from 'react';
//import config from '/node_modules/devextreme/core/config';

const apiUrl = "http://localhost:7009/api";


const ExpectedAvgParentComponent = () => {

    const [toastConfig, setToastConfig] = useState({ isVisible: false, type: 'success', message: '' });

    const [selectedVehicles, setSelectedVehicles] = useState([]);
    const [numberBoxValue, setNumberBoxValue] = useState(null);
    const [selectedClassificationId, setSelectedClassificationId] = useState(null);
    const [selectedVehicle, setSelectedVehicle] = useState(null); //assuming selectedVehicle is set somewhere
    const [textAreaValue, setTextAreaValue] = useState('');
    const [expectedClassificationData, setExpectedClassificationData] = useState([]);
    const [tempSelectedVehicles, setTempSelectedVehicles] = useState([]);



   const onHiding = () => {
       setToastConfig({ ...toastConfig, isVisible: false });
    }
    // Log changes to tempSelectedVehicles
    useEffect(() => {

    }, [tempSelectedVehicles]);

    useEffect(() => {
        const fetchData = async () => {
            const response = await axios.get(`${apiUrl}/ExpectedAVGClassification/getlist`);
            setExpectedClassificationData(response.data);
        };

        fetchData();
    }, []);


    const clearVehicles = () => {
        setSelectedVehicles([]);

    };

    const addVehicle = () => {
        if (selectedClassificationId === null || selectedClassificationId === 0|| numberBoxValue === null)
        {
            //toast.error('Please select a classification and provide a value.');
            console.log('Please select a classification and provide a value.');
            setToastConfig({ isVisible: true, type: 'error', message: 'Please select a classification and provide a value.' });        


            return; 
        }

console.log("Add button pressed. Vehicles:", tempSelectedVehicles);
        //adding vehicle to the list
        const newVehicles = tempSelectedVehicles.map(vehicle => ({
            ...vehicle, // keep all existing properties of the vehicle
            classification:selectedClassificationId, // add the value from the select box
            expectedValue: numberBoxValue, // add the value from the number box

        }));

        //check for duplicates

        for (let newVehicle of newVehicles) {
            const isDuplicate = selectedVehicles.some((vehicle) => {
                return (
                    vehicle.data.vehicleId === newVehicle.data.vehicleId &&
                    vehicle.data.workingSiteId === newVehicle.data.workingSiteId &&
                    vehicle.classification === newVehicle.classification
                );
            });

            if (isDuplicate) {
                const duplicateMessage = 'The selected vehicle already exists for the specified site and classification.';
              //  toastRef.current.show(duplicateMessage, 'warning');
                setToastConfig({ isVisible: true, type: 'error', message: duplicateMessage });        

                console.log('Duplicate:', duplicateMessage);
                return;
            }
        }

        setSelectedVehicles([...selectedVehicles, ...newVehicles]);
      // setTempSelectedVehicles([]); // Clear temp selection
    };
    

    return (

        <div>
            <div className="option-Panel">
                <h4>Vehicle Filter Options </h4>
                <div className="row g-3 align-items-center ">

                        <div className="col-auto"><label className="col-form-label">Expected Value </label> </div>
                        <div className="col-auto">
                            <NumberBox 
                            onValueChanged={(e) => setNumberBoxValue(e.value)}                        
                                className="form-control"
                                 width={50}          
                        >
                            <Validator>
                                <RequiredRule message="Enter value" />
                            </Validator>
                        </NumberBox>
                       
                    </div>
                    <div className="col-auto">
                        <SelectBox
                            dataSource={expectedClassificationData}
                            displayExpr="name"
                            valueExpr="id"
                            placeholder="Select a Expected Classification"
                            validationRules={[{ type: 'required', message: 'Please select a classification' }]}
                            onValueChanged={(e) => {
                                const selectedObject = expectedClassificationData.find(item => item.id === e.value);
                                const description = selectedObject ? selectedObject.description : '';
                                setSelectedClassificationId(e.value);
                                setTextAreaValue(description);
                            }} />

                    </div>

                    <div className="col ">
                        <TextArea height={45}
                            readOnly={true}
                            value={textAreaValue}
                        />
                    </div>
                    <div className="col-auto">
                        <button className="btn btn-primary" onClick={() => {
                          //  console.log("Add button pressed. Selected vehicle:", selectedVehicle);
                            addVehicle(tempSelectedVehicles)
                        }}>Add</button>

                    </div>

                    <div>
                    </div>
                </div>



            </div>
           
      
              <VehicleFilterPanel
                setSelectedVehicles={setTempSelectedVehicles} // pass setTempSelectedVehicles instead
               
            />
            <div className="row align-items-end  ">
                <div className="col">
                    <label className="col-form-label" >Clear below data</label>
                </div>
                <div className="col-auto">
                    <button className="btn btn-warning" onClick={clearVehicles}>Clear</button>
             </div>


            </div>
            <div className="row">
            <CreateExpectedAVG
                selectedVehicles={selectedVehicles}
                clearVehicles={clearVehicles} 
                />

            </div>
        </div>
    );
};



export default ExpectedAvgParentComponent;

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\ExpectedAVG\VehicleFilterPanel.js

import Datagrid, { Paging, HeaderFilter, SearchPanel, Editing, FilterRow, Column, Lookup, Sorting,Selection, RequiredRule } from 'devextreme-react/data-grid';

import { Button } from 'devextreme-react';
import CustomStore from 'devextreme/data/custom_store';
import 'devextreme/dist/css/dx.light.css';
import axios from "axios";
import React, { useState, useRef, useEffect } from 'react';
import TextArea from 'devextreme-react/text-area';
//import { NumberBox } from '../../../../../node_modules/devextreme-react/index';

// { Selection } from '../../../../../node_modules/devextreme-react/tree-list';
//import { TextBox } from '../../../../../node_modules/devextreme-react/index';
//import { Sorting } from '../../../../node_modules/devextreme-react/tree-list';
const apiUrl = "http://localhost:7009/api";



const VehicleFilterPanel = ({ setSelectedVehicles }) => {


    
    const dataSource = new CustomStore({
        key: 'vehicleId',
        load: async () => {
            const response = await axios.get(`${apiUrl}/vehicle/getlist`);
            return response.data;
        },
        update: async (key, values) => {

            console.log('Request data:', { values, vehicleId: key });
            const originalData = await dataSource.byKey(key);
            const updatedData = { ...originalData, ...values, vehicleId: key };

            // const response = await axios.put(`${apiUrl}/vehicle/UpdateVehicle/${key}`, values);
            const response = await axios.put(`${apiUrl}/vehicle/UpdateVehicle/${key}`, updatedData);
            return response.data;
        },
        byKey: async (key) => {
            const response = await axios.get(`${apiUrl}/vehicle/getlist`);
            const originalData = response.data.find((item) => item.vehicleId === key);
            return originalData;
        }

    });
    //Add data source for lookup columns

    // Fetch working site data
    const workingSiteDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/site/GetList`);
                return response.data;
            }
        })
    };

    // Fetch vehicle type data
    const vehicleTypeDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/VehicleType/getlist`);
                return response.data;

            }
        })
    };
    // Fetch vehicle model data
    const vehicleModelDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/VehicleModel/getlist`);
                return response.data;
            }
        })
    };
    // Fetch vehicle Manufacturer data based 
    const vehicleManufacturers = {
        store: new CustomStore({
            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/VehicleManufacturer/getlist`);
                return response.data;
            }


        })



    };
    // Load Expected classfication data

    const dataGridRef = useRef(null);

    const getSelectedVehicles = (e) => {
        // get the instance of the DataGrid
        const dataGridInstance = dataGridRef.current.instance;

        // get the visible rows
        const visibleRows = dataGridInstance.getVisibleRows();

        // filter the visible rows for only the ones that are selected
        const selectedVisibleVehicles = visibleRows.filter(row => row.isSelected);

        setSelectedVehicles(selectedVisibleVehicles);
    };



    return (
        <div className="container">
            
            <Datagrid
                ref={dataGridRef}
                dataSource={dataSource}
                showBorders={true}
                onSelectionChanged={getSelectedVehicles}
                allowColumnReordering={true}
                allowColumnResizing={true}
                columnAutoWidth={true}
                rowAlternationEnable={true}

                repaintChangesOnly={true}
               // onSelectionChanged={(e) => setSelectedVehicles(e.selectedRowsData)}
               // onSelectionChanged={getSelectedVehicles}
            >

                <Paging enabled={true} />
                <Paging defaultPageSize={50} />
                <FilterRow visible={true} />
                <HeaderFilter visible={true} />
                <Sorting mode="multiple" />
                <Selection mode="multiple"
                showCheckBoxesMode="always"
                />

                <Column dataField="vehicleId" caption="Vehicle ID" allowEditing={false} visible={false} />
                <Column dataField="hyoungNo" caption="Hyoung No" allowEditing={false} width={70} />
                <Column dataField="expectedAveraged" width={150} caption="Expected Averaged" allowEditing={true} alignment="center" width="70" />

                <Column dataField="workingSiteId" caption="Working Site">
                    <Lookup dataSource={workingSiteDataSource} valueExpr="id" displayExpr="name" />
                </Column>
                <Column dataField="averageKmL" caption="is km/l" width={70} />


                <Column dataField="vehicleTypeId"
                    caption="Vehicle Type"
                            >
                    <Lookup
                        dataSource={vehicleTypeDataSource}
                        valueExpr="id"
                        displayExpr="name" />
                </Column>

                <Column dataField="vehicleManufacturerId" caption="Vehicle Manufacturer">
                    <Lookup
                        dataSource={vehicleManufacturers}
                        valueExpr="id"
                        displayExpr="name"
                    />
                </Column>
                <Column dataField="vehicleModelId" caption="Vehicle Model">

                    <Lookup dataSource={vehicleModelDataSource}
                        valueExpr="id"
                        displayExpr="name" />

                </Column>


            </Datagrid>




        </div>
    );
};
export default VehicleFilterPanel;

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Vehicle\AddVehicleModel.js

import React, { useState } from 'react';
import { Popup, Position, ToolbarItem } from 'devextreme-react/popup';

import { TextBox, Button } from 'devextreme-react';
import axios from 'axios';
import {
    Validator,
    RequiredRule
} from 'devextreme-react/validator';

const AddVehicleModel = ({
    addVehicleModelVisible,
    setAddVehicleModelVisible,
    newVehicleModelName,
    setNewVehicleModelName,
    saveNewVehicleModel,
}) => {
    return (
        <Popup
            visible={addVehicleModelVisible}
            onHiding={() => setAddVehicleModelVisible(false)}
            title="Add Vehicle Model"
            width={300}
            height={250}
            hideOnOutsideClick={true}
            showTitle={true}
            dragEnabled={false}
        >
            <Position at="bottom" my="center" collision="fit" />
            <div className="dx-field">
                <div className="dx-field-label">Name</div>
                <div className="dx-field-value">
                    <TextBox
                        value={newVehicleModelName}
                        onValueChanged={(e) => setNewVehicleModelName(e.value)}
                    />
                    <RequiredRule message="Name is required" />
                </div>
            </div>
            <Button text="Save" type="default" onClick={saveNewVehicleModel} />
        </Popup>
    );
};

export default AddVehicleModel;

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Vehicle\VehicleDataGrid.js

import Datagrid, { Paging, HeaderFilter, SearchPanel, Editing, FilterRow, Column, Lookup, Sorting, RequiredRule } from 'devextreme-react/data-grid';
//import SelectBox from 'devextreme-react/select-box';
//import { TextBox, Button } from 'devextreme-react';
import CustomStore from 'devextreme/data/custom_store';
import 'devextreme/dist/css/dx.light.css';
import axios from "axios";
import React, { useState, useRef, useEffect } from 'react';
//import AddVehicleModel from './AddVehicleModel';
//import DataSource from 'devextreme/data/data_source';
//import ArrayStore from 'devextreme/data/array_store';
//import VehicleTypeUIComponent from '../VehicleType/VehicleTypeUIComponent';
//import { Sorting } from '../../../../node_modules/devextreme-react/tree-list';
const apiUrl = "http://localhost:7009/api";




const VehicleDataGrid = () => {
    const dataSource = new CustomStore({
        key: 'vehicleId',
        load: async () => {
            const response = await axios.get(`${apiUrl}/vehicle/getlist`);
            return response.data;
        },
        update: async (key, values) => {

            console.log('Request data:', { values, vehicleId: key });
            const originalData = await dataSource.byKey(key);
            const updatedData = { ...originalData, ...values, vehicleId: key };

            // const response = await axios.put(`${apiUrl}/vehicle/UpdateVehicle/${key}`, values);
            const response = await axios.put(`${apiUrl}/vehicle/UpdateVehicle/${key}`, updatedData);
            return response.data;
        },
        byKey: async (key) => {
            const response = await axios.get(`${apiUrl}/vehicle/getlist`);
            const originalData = response.data.find((item) => item.vehicleId === key);
            return originalData;
        }

    });
    //Add data source for lookup columns

    // Fetch working site data
    const workingSiteDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/site/getlist`);
                return response.data;
            }
        })
    };

    // Fetch employee data
    const employeeDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/employee/getlist`);
                return response.data;
            }
        })
    };

    // Fetch vehicle type data
    const vehicleTypeDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/VehicleType/getlist`);
                return response.data;

            }
        })
    };
    // Fetch vehicle model data
    const vehicleModelDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/VehicleModel/getlist`);
                return response.data;
            }
        })
    };
    // Fetch vehicle Manufacturer data based 
    const vehicleManufacturers = {
        store: new CustomStore({
            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/VehicleManufacturer/getlist`);
                return response.data;
            }


        })
    };
    // Load vehicle manufacturers data


    return (
        <div className="container">
            <div>
                <h1>Vehicles</h1>
            </div>
            <Datagrid
                dataSource={dataSource}
                showBorders={true}

                allowColumnReordering={true}
                allowColumnResizing={true}
                columnAutoWidth={true}
                rowAlternationEnable={true}
                repaintChangesOnly={true}>
                <Paging enabled={false} />

                <FilterRow visible={true} />
                <HeaderFilter visible={true} />
                <Sorting mode="multiple" />
                <Editing
                    mode="batch"
                    allowUpdating={true}
                    allowAdding={false}
                    allowDeleting={false}
                    selectTextOnEditStart={true}
                    startEditAction="click" />

                <Column dataField="vehicleId" caption="Vehicle ID" allowEditing={false} visible={false} />
                <Column dataField="hyoungNo" caption="Hyoung No" allowEditing={false} width={70} />
                <Column dataField="expectedAveraged" width={150} caption="Expected Averaged" allowEditing={true} alignment="center" />

                <Column dataField="workingSiteId" caption="Working Site">
                    <Lookup dataSource={workingSiteDataSource} valueExpr="id" displayExpr="name" />
                </Column>
                <Column dataField="averageKmL" caption="is km/l" width={70} />


                <Column dataField="defaultEmployeeId" caption="Default Employee" visible={false}>
                    <Lookup dataSource={employeeDataSource} valueExpr="id" displayExpr="fullName" />
                </Column>

                <Column dataField="vehicleTypeId"
                    caption="Vehicle Type"
                // editCellComponent = {VehicleTypeUIComponent}
                >
                    <Lookup
                        dataSource={vehicleTypeDataSource}
                        valueExpr="id"
                        displayExpr="name" />
                </Column>

                <Column dataField="vehicleManufacturerId" caption="Vehicle Manufacturer">
                    <Lookup
                        dataSource={vehicleManufacturers}
                        valueExpr="id"
                        displayExpr="name"
                    />
                </Column>
                <Column dataField="vehicleModelId" caption="Vehicle Model">

                    <Lookup dataSource={vehicleModelDataSource}
                        valueExpr="id"
                        displayExpr="name" />

                </Column>


            </Datagrid>




        </div>
    );
};
export default VehicleDataGrid;

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\Vehicle\VehicleFilterPanel.js

import Datagrid, { Paging, HeaderFilter, SearchPanel, Editing, FilterRow, Column, Lookup, Sorting, RequiredRule } from 'devextreme-react/data-grid';
import SelectBox from 'devextreme-react/select-box';
import { Button } from 'devextreme-react';
import CustomStore from 'devextreme/data/custom_store';
import 'devextreme/dist/css/dx.light.css';
import axios from "axios";
import React, { useState, useRef, useEffect } from 'react';
import AddVehicleModel from './AddVehicleModel';
import DataSource from 'devextreme/data/data_source';
import ArrayStore from 'devextreme/data/array_store';
import VehicleTypeUIComponent from './UIcomponents/VehicleTypeUIComponent';
import { Selection } from '../../../../../node_modules/devextreme-react/tree-list';
//import { Sorting } from '../../../../node_modules/devextreme-react/tree-list';
const apiUrl = "http://localhost:7009/api";




const VehicleDataGrid = () => {
    const dataSource = new CustomStore({
        key: 'vehicleId',
        load: async () => {
            const response = await axios.get(`${apiUrl}/vehicle/getlist`);
            return response.data;
        },
        update: async (key, values) => {

            console.log('Request data:', { values, vehicleId: key });
            const originalData = await dataSource.byKey(key);
            const updatedData = { ...originalData, ...values, vehicleId: key };

            // const response = await axios.put(`${apiUrl}/vehicle/UpdateVehicle/${key}`, values);
            const response = await axios.put(`${apiUrl}/vehicle/UpdateVehicle/${key}`, updatedData);
            return response.data;
        },
        byKey: async (key) => {
            const response = await axios.get(`${apiUrl}/vehicle/getlist`);
            const originalData = response.data.find((item) => item.vehicleId === key);
            return originalData;
        }

    });
    //Add data source for lookup columns

    // Fetch working site data
    const workingSiteDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/site/GetList`);
                return response.data;
            }
        })
    };

    // Fetch vehicle type data
    const vehicleTypeDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/VehicleType/getlist`);
                return response.data;

            }
        })
    };
    // Fetch vehicle model data
    const vehicleModelDataSource = {
        store: new CustomStore({

            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/VehicleModel/getlist`);
                return response.data;
            }
        })
    };
    // Fetch vehicle Manufacturer data based 
    const vehicleManufacturers = {
        store: new CustomStore({
            key: 'id',
            loadMode: 'raw',
            load: async () => {
                const response = await axios.get(`${apiUrl}/VehicleManufacturer/getlist`);
                return response.data;
            }


        })
    };
    // Load vehicle manufacturers data


    return (
        <div className="container">
            <div>
                <h1>Vehicles</h1>
            </div>
            <Datagrid
                dataSource={dataSource}
                showBorders={true}

                allowColumnReordering={true}
                allowColumnResizing={true}
                columnAutoWidth={true}
                rowAlternationEnable={true}
                repaintChangesOnly={true}>
                <Paging enabled={false} />

                <FilterRow visible={true} />
                <HeaderFilter visible={true} />
                <Sorting mode="multiple" />
                <Selection mode="multiple"
                    showCheckBoxesMode="always"
                />

                <Column dataField="vehicleId" caption="Vehicle ID" allowEditing={false} visible={false} />
                <Column dataField="hyoungNo" caption="Hyoung No" allowEditing={false} width={70} />
                <Column dataField="expectedAveraged" width={150} caption="Expected Averaged" allowEditing={true} alignment="center" width="70" />

                <Column dataField="workingSiteId" caption="Working Site">
                    <Lookup dataSource={workingSiteDataSource} valueExpr="id" displayExpr="name" />
                </Column>
                <Column dataField="averageKmL" caption="is km/l" width={70} />


                <Column dataField="defaultEmployeeId" caption="Default Employee" visible={false}>
                    <Lookup dataSource={employeeDataSource} valueExpr="id" displayExpr="fullName" />
                </Column>

                <Column dataField="vehicleTypeId"
                    caption="Vehicle Type"
                // editCellComponent = {VehicleTypeUIComponent}
                >
                    <Lookup
                        dataSource={vehicleTypeDataSource}
                        valueExpr="id"
                        displayExpr="name" />
                </Column>

                <Column dataField="vehicleManufacturerId" caption="Vehicle Manufacturer">
                    <Lookup
                        dataSource={vehicleManufacturers}
                        valueExpr="id"
                        displayExpr="name"
                    />
                </Column>
                <Column dataField="vehicleModelId" caption="Vehicle Model">

                    <Lookup dataSource={vehicleModelDataSource}
                        valueExpr="id"
                        displayExpr="name" />

                </Column>


            </Datagrid>




        </div>
    );
};
export default VehicleDataGrid;

//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\components\VehicleType\VehicleTypeUIComponent.js

import React from 'react';
import DataGrid, { Column, Paging, Scrolling, Selection } from 'devextreme-react/data-grid'

import DropDownBox from 'devextreme-react/drop-down-box';

const dropDownOptions = { width: 200 };

export default class VehicleTypeUIComponent extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            selectedRowKeys: [props.data.value],
            isDropDownBoxOpened: false
        };
        this.onSelectionChange = this.onSelectionChange.bind(this);
        this.contentRender = this.contentRender.bind(this);
        this.boxOptionChanged = this.boxOptionChanged.bind(this);

    };

    boxOptionChanged(e) {
        if (e.name === "opened") {
            this.setState({
                isDropDownBoxOpened: e.value
            });
        }
    }

    contentRender() {
        return (
            <DataGrid
                datasource={this.props.data.column.lookup.datasource}
                remoteOperations={true}
                height={200}
                selectedRowKeys={this.state.selectedRowKeys}
                hoverStateEnable={true}
                onSelectionChanged={this.onSelectionChange}
                focusedRowEnable={true}
                defaultFocusedRowKey={this.state.selectedRowKeys[0]}

            >
                <Column dataField="id" visible={false} />
                <Column dataField="name" caption="Name" />
                <Column dataField="abbvr" caption="abbvr" />
                <Paging enabled={true} defaultPageSize={10} />
                <Scrolling mode="virtual" />
                <Selection mode="single" />

            </DataGrid>
        );
    }
    onSelectionChanged(selectionChangedArgs) {
        this.setState({
            selectedRowKeys: selectionChangedArgs.selectedRowKeys,
            isDropDownOpened: false,
        });
        this.props.data.setValue(this.state.selectedRowKeys[0]);
    }
    render() {
        return (
            <DropDownBox
                onOptionChanged={this.boxOptionChanged}
                opened={this.state.isDropDownOpened}
                dropDownOptions={dropDownOptions}
                dataSource={this.props.data.column.lookup.dataSource}
                value={this.state.selectedRowKeys[0]}
                displayExpr="name"
                valueExpr="id"
                contentRender={this.contentRender}>
            </DropDownBox>
        );
    }
}



//c:/Users/kkagiri/source/repos/Hyoung.Fms/fms.reactclient\src\pages\Consumption\ConsumptionGrid.js

import React, { useState, useEffect } from 'react';
import EmployeeVehicleTagBox from '../../components/Employee/employeevehicleTagbox';
import DataGrid, { Column, MasterDetail , Paging, FilterRow, Sorting, ColumnChooser, ColumnFixing, Editing ,Popup,Form,Lookup } from 'devextreme-react/data-grid';
import axios from "axios";
import CustomStore from 'devextreme/data/custom_store';
import TabPanel, { Item } from 'devextreme-react/tab-panel';
import HistoryDetails from '../../components/Consumptions/HistoryDetails';
import ChartDetails from '../../components/Consumptions/ChartDetails';
import {WrappedMapDetails }  from '../../components/Consumptions/WrappedMapDetails';
import { HeaderFilter } from 'devextreme-react/pivot-grid-field-chooser';
import 'devextreme-react/text-area';
import sampleData from '../../components/sampleconsumptiondata';
//import ConsumptionEditPopUp from './ConsumptionEditPopUp';
import DateBox from 'devextreme-react/date-box';
import Button from 'devextreme-react/button';
import LoadPanel from 'devextreme-react/load-panel';
import { FormItem} from 'devextreme-react/form';
const apiUrl = process.env.REACT_APP_FMS_API_URL;


const Consumptiongrid = () => {
    const [consumptionData, setConsumptionData] = useState([]);
    const [selectedDate, setSelectedDate] = useState(null);
    const [loading, setLoading] = useState(false); // New loading state
    const [selectedVehicleId, setSelectedVehicleId] = useState(null);
    const [expectedAveragedDataSource, setExpectedAveragedDataSource] = useState([]);
    const [currentSiteId, setCurrentSiteId] = useState(null);   
    const[activeTab, setActiveTab] = useState('');
    
        const employeeDataSource = async () => new CustomStore({
         
            key: 'Id',
            loadMode: 'raw',
            load: async () => {
                if (!currentSiteId) return [];
                const response = await axios.get(`${apiUrl}/employee/getlist`);
                return response.data;
            }
        });
    

        const handleTabChange = (e) => {
            setActiveTab(e.addedItems[0].title);
        };
        const HistoryTab = ({ vehicleId, date }) => {
            return <HistoryDetails vehicleId={vehicleId} date={date} />;

        };
        const MapTab = ({ vehicleId, date }) => {
            return <WrappedMapDetails  vehicleId={vehicleId} date={date} />;
        };
        const renderDetailTemplate = (detailData) => {

            const vehicleId = detailData.data.data.vehicleId;
            const date = detailData.data.data.date;


            return (
                <TabPanel  >
                <Item title="History" component={() => <HistoryDetails vehicleId={vehicleId} date={date}  />} />        
                <Item title="Chart" component={() => <ChartDetails vehicleId={vehicleId} date={date}  />} />
                <Item title="Map" render={() => <MapTab  vehicleId={vehicleId} date={date}   />} />
                </TabPanel>
            )
        };
   

    const employeeDataBysiteIDSource =  new CustomStore({
        key: 'Id',
        loadMode: 'raw',
        load: async () => {

            if(!currentSiteId) return [];
            const response = await axios.get(`${apiUrl}/employee/getemployeebysiteid`, {
                params: { siteId: currentSiteId }
            });
            return response.data;
        }});


  const enableOptions = { readOnly: true };

     const commentEditorOptions = { height: 100 };

     const onEditingStart = (e) => {
           const vehicleId = e.data.vehicleId;
             const siteId =  e.data.siteId;
        const startdate = e.data.date;
            //call the expectedavg/getlistbyvehiclebysite api to get the expected average value for the selected vehicle and site
            loadExpectedAveragedDataBySiteID(vehicleId, siteId);
          loadEmployeeData(siteId);
          loadHistoryData(vehicleId, startdate);
     };

 const loadEmployeeData = async (siteId) => {

    setCurrentSiteId(siteId);


    };


    const loadExpectedAveragedData = new CustomStore({
        key : 'id', 
        loadMode: 'raw',
        load: async () => {
            const response = await axios.get(`${apiUrl}/expectedavg/getlist`);
            return response.data;
        }

    });


     const loadExpectedAveragedDataBySiteID = async (vehicleId, siteId) => {
        try{
            const response = await axios.get(`${apiUrl}/expectedavg/getlistbyvehiclebysite`, 
            {
                params: { vehicleId: vehicleId, siteId: siteId }
            });
            setExpectedAveragedDataSource(response.data);
        } catch (error) 
        {
            console.error("Error Fetching Expected Average :", error);
        }
    };
    const [historyData, setHistoryData] = useState([]);

    const loadHistoryData = async (vehicleId, startdate) => {

        try {
            const response = await axios.get(`${apiUrl}/consumption/gethistoryconsumption`,
                {
                    params: { vehicleId: vehicleId }
                });
            setHistoryData(response.data);
          
        }
        catch (error) 
        {
            console.error("Error Fetching History Data :", error);

        }
    };

 const siteDataSource = new CustomStore({

        key: 'id',
        loadMode: 'raw',
        load: async () => {
            const response = await axios.get(`${apiUrl}/site/getlist`);
            return response.data;
        }
    });


    const fetchData = async () => {
        if (!selectedDate) {
            return;
        }
        setLoading(true); // Start loading

          setConsumptionData(sampleData);
          setLoading(false); // End loading

    };

    useEffect(() => {
        fetchData();
    }, [selectedDate]);
    return (

        <div>
            <LoadPanel visible={loading} />  {/* New LoadPanel */}
            <div className="row">
                <div className="col-8">
                    <DateBox defaultValue={null} type="date"
                        onValueChanged={(e) => setSelectedDate(e.value)} disabled={loading} />
                </div>
                <div className="col-4">
                    <Button text="Load Data" onClick={fetchData} disabled={loading} />
                </div>
            </div>


            <DataGrid id='consumption'   dataSource={consumptionData} showBorders={true}
                keyExpr="vehicleId"
                allowColumnReordering={true}
                allowColumnResizing={true}
                columnAutoWidth={true}
                onEditingStart={onEditingStart}
                rowAlternationEnable={true}
                height={700}

            >
                <Paging defaultPageIndex={100} />

                <FilterRow visible={true} />

                <ColumnChooser enabled={true} />
                <ColumnFixing enabled={true} />
                <Sorting mode="multiple" />


                <HeaderFilter visible={true} />
                 
                 <Editing
                    mode="popup"
                    allowUpdating={true}
                    allowDeleting={true}
                    useIcons={true}
                 >
                    <Popup title="Consumption Info"
                     showTitle={true}
                     width={1400}
                      height='auto'
                     
                      
                      />

                    <Form colCount={4} >

                        <Item itemType="group" caption='Employee Details' >
                            <Item dataField="defaultEmployees" caption='Default Employee'>
                            </Item>
                            <Item dataField="employeeWorkNo" caption='Work Number' editorOptions={enableOptions} />


                            <Item dataField="employeephoneNumber" caption='Phone Number' editorOptions={enableOptions} />
                        </Item>
                        <Item itemType="group" caption='Vehicle Telemetry Details' >
                            <Item dataField="totalDistance" caption='Distance' />
                            <Item dataField="engHours" caption='Engine Hours' />
                            <Item dataField="maxSpeed" caption='Max Speed' />
                            <Item dataField="avgSpeed" caption='Avg Speed' />
                        </Item>
                        <Item itemType="group" caption='Fuel Details'>

                            <Item dataField="totalFuel" caption='Total Fuel used' />
                            <Item dataField="expectedAveraged" caption='Expected Averaged' >
                            </Item>
                            <Item dataField="fuelEfficiency" caption='Fuel Efficiency' />
                            <Item dataField="fuelLost" caption='Fuel Lost' editorOptions={{ readOnly: true }} />

                        </Item>
                        <Item itemType="group" caption='Operation Details'  >
                            <Item dataField="isNightShift" caption='Is Night Shift' />
                            <Item dataField="isAverageKm" caption='Is Km/l' />
                            <Item dataField="comments" caption='Comments' editorType='dxTextArea' colSpan={2} editorOptions={commentEditorOptions} />

                        </Item>
                    </Form>

                </Editing>


                <Column dataField="date"
                    width={100}
                    FilterRow={false}
                    fixed={true}
                    dataType="date"
                    caption="Date" />


                <Column dataField="vehicleId" visible={false} caption="Vehicle ID" />
                <Column dataField="hyoungNo" fixed={true} caption="Hyoung No" />
                <Column caption="Employee Details" width={200}allowSorting={false} >                  
                        <Lookup dataSource={employeeDataSource} valueExpr="id" displayExpr="fullName" />
                </Column>
                <Column dataField="maxSpeed" caption="Max Speed" />
                <Column dataField="avgSpeed" caption="AVG Speed" />
                <Column dataField="totalDistance"

                    dataType="number"
                    caption="Distance"
                    cellRender={({ value }) => (value / 1000).toFixed(2)

                    }
                />
                <Column dataField="engHours"
                    caption="Engine Hours"
                    format={{ type: 'fixedPoint', precision: 1 }}
                    cellRender={({ value }) => (value / 3600).toFixed(2)}
                />
                <Column dataField="totalFuel"
                    visible={true}
                    caption="Fuel" />
                <Column dataField="expectedAveraged" caption="Expected Averaged" >
                    <Lookup dataSource={expectedAveragedDataSource} valueExpr="id" displayExpr="expectedAveragevalue" />
                </Column>
                <Column dataField="fuelEfficiency" caption="Fuel Efficiency" />
                <Column dataField="fuelLost" caption="Fuel Lost" />

                <Column dataField="siteId" caption="Site" >
                    <Lookup dataSource={siteDataSource} valueExpr="id" displayExpr="name" />
                </Column>

                <Column dataField="isNightShift" caption="Night Shift" />
                <Column dataField="Comments" caption="Comments" />
                <Column dataField="isAverageKm" caption="Is Km/l" />
            <MasterDetail enabled={true} component={renderDetailTemplate} />
            </DataGrid>
        </div>
    );

};

export default Consumptiongrid;

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Services\Common\Interfaces\IJsonConvertor.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Services.Common.Interfaces
{
    public interface IJsonConvertor
    {

        T Deserialize<T>(string json);

        string Serialize(object obj);

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Services\GPSServiceModels\SiteServiceModel.cs

﻿namespace FMS.Services.GPSServiceModels
{
    public class SiteServiceModel
    {
        public int Id { get; set; }

        public string? Name { get; set; }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Services\GPSServiceModels\VehicleConsumptionServiceModel.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Services.GPSServiceModels
{

    public  class VehicleConsumptionServiceModel
    {
        private decimal? _totalDistance;
        private bool iskmperltr;
        private decimal? enginehrs;
        public decimal? TotalDistance
        {
            get;set;    
           //get
           // {
                
           //    //if (IsAverageKm)
           //    // {
           //    //     return _totalDistance.HasValue ? (decimal)((int)(_totalDistance.Value / 1000)) : (decimal?)null;
           //    // }
           //    // else
           //    // {
           //    //     return 0;
           //    // }
           // }
           // set
           // {  _totalDistance = value;  }
        }

        public int VehicleId { get; set; }
      
        public decimal? EngHours
        {

            get;set;

            //get
            //{
            //    if (enginehrs.HasValue)
            //    {
            //        return enginehrs.Value / 3600;
            //    }
            //    else
            //    { return null; }
            //}
            //set
            //{
            //    enginehrs = value;
            //}
        }
        public decimal? TotalFuel { get; set; }
        public decimal? FlowMeterEngineHrs { get; set; }
        public decimal? FlowMeterFuelUsed { get; set; }
        public SiteServiceModel? Site { get; set; }
        public decimal AvgSpeed { get; set; }
        public decimal MaxSpeed { get; set; }
        public DateTime Date { get; set; }
        public decimal? FlowMeterEffiency
        {
            get
            {
                if (IsAverageKm && FlowMeterFuelUsed.HasValue && TotalDistance.HasValue && TotalDistance.Value > 0 && FlowMeterFuelUsed>0)
                {
                    return TotalDistance / FlowMeterFuelUsed;
                }
                else if (!IsAverageKm && FlowMeterFuelUsed.HasValue && EngHours.HasValue && EngHours.Value > 0)
                {
                    return FlowMeterFuelUsed / EngHours;
                }
                else
                {
                    return null;
                }
            }


        }
       
        //public decimal? FuelEfficiency
        //{
        //    get
        //    {
        //        if (IsAverageKm && TotalFuel.HasValue && TotalDistance.HasValue && TotalDistance.Value > 0 && TotalFuel>0)
        //        {
        //            return TotalDistance / TotalFuel;
        //        }
        //        else if (!IsAverageKm && TotalFuel.HasValue && EngHours.HasValue && EngHours.Value > 0 && TotalFuel > 0) 
        //        {
        //            return TotalFuel / EngHours;
        //        }
        //        else
        //        {
        //            return null;
        //        }
        //    }
        //}

        public decimal ExpectedAveraged { get; set; }



        public bool IsAverageKm
        {
            get;set;

            //get
            //{
            //    return iskmperltr;
            //}
            //set
            //{

            //    iskmperltr = value;
            //}
        }


        public decimal? FuelLost
        {  
            get
            {
                return 0;
            }
        }

        //private decimal? CalculateFuelLost()
        //{
        //    decimal fuellost = 0;

        //    //find if the vehicle is using km/l
        //    if (IsAverageKm)
        //    {
        //        //calulate fuel lost in km/l
        //        if (FuelEfficiency.HasValue && FuelEfficiency.Value < ExpectedAveraged && ExpectedAveraged>0)
        //        {
        //            fuellost = TotalFuel.HasValue && ExpectedAveraged != 0 ? TotalFuel.Value - (TotalDistance ?? 0) / ExpectedAveraged : 0;
        //        }
        //    }
        //    else //caluate fuel in l/hrs
        //    {
        //        if (FuelEfficiency.HasValue && FuelEfficiency.Value > ExpectedAveraged)
        //        {
        //            fuellost = TotalFuel.HasValue && EngHours != 0 ? TotalFuel.Value - (ExpectedAveraged * (EngHours ?? 0)) : 0;
        //        }
        //    }

        //    int roundedFuelLost = (int)Math.Round(Math.Abs(fuellost));

        //    return roundedFuelLost;


        //}



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Services\Helper\ATGStatusService.cs

﻿using FMS.Domain.ATGStatus;
using FMS.Domain.ATGStatus.FuelGradeStatus;
using FMS.Domain.ATGStatus.ProbeStatus;
using FMS.Domain.ATGStatus.PumpStatus;
using FMS.Domain.ATGStatus.ReaderStatus;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.JSInterop;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics.Metrics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Services.Helper
{
    public class ATGStatusService
    {
        public UploadStatus DeserializeUploadStatus(string json)
        {
            var jObject = JObject.Parse(json);


            var uploadStatus = new UploadStatus
            {
                ConfigurationId = jObject["ConfigurationId"]?.ToString(),
                DateTime = jObject["DateTime"]?.ToObject<DateTime>() ?? default,
                FirmwareDateTime = jObject["FirmwareDateTime"]?.ToObject<DateTime>() ?? default,
                StartupSeconds = jObject["StartupSeconds"]?.ToObject<int>() ?? default,
                BatteryVoltage = jObject["BatteryVoltage"]?.ToObject<int>() ?? default,
                CpuTemperature = jObject["CpuTemperature"]?.ToObject<int>() ?? default,
                PtsPowerDownDetected = jObject["PtsPowerDownDetected"]?.ToObject<bool>()?? false,
                SdMounted = jObject["PtsPowerDownDetected"]?.ToObject<bool>() ?? false,
                Pumps = jObject["Pumps"] != null ? DeserializePumpStatus(jObject["Pumps"].ToString()): null,
                FuelGrades= jObject["FuelGrades"]?.Select(t=>t.ToObject<FuelGradeStatus>()).Where(f=>f!=null).ToList(),
                Readers = jObject["Readers"]!= null ? DeserializeReaderStaus (jObject["Readers"].ToString()):null
            };
            if (jObject["Probes"]?["OnlineStatus"]?["Measurements"] is JArray measurementArray)
            {
                uploadStatus.Probes = new ProbeStatus
                {
                    OnlineStatus = new Domain.ATGStatus.ProbeStatus.OnlineStatus
                    {
                        Measurements = DeserializeProbeMeasurement(measurementArray)
                    }

                };
            }

            return uploadStatus;
        }

        private ReaderStatus DeserializeReaderStaus(string json)
        {
            if(string.IsNullOrEmpty(json))
            {
                return null;
            }
            try
            {
                return JsonConvert.DeserializeObject<ReaderStatus>(json);
            }
            catch (JsonException ex)
            {
                return null;
            }
        }

        private PumpStatus DeserializePumpStatus (string json)
        {
            if(string.IsNullOrEmpty(json))
            {
                return null;
            }

            try
            {
                return JsonConvert.DeserializeObject<PumpStatus>(json);
            }
            catch(JsonException ex)
            {
                return null;
            }
        }


        private List<ProbeMeasurement> DeserializeProbeMeasurement(JArray measurementsArray)
        { 
        
         var measurements = new List<ProbeMeasurement>();

            foreach (var measurement in measurementsArray)
            {
                if(measurement is JArray measurementArray)
                {
                    var measurementValues = measurementArray.Select(jt => jt.Type == JTokenType.Null ? 0.0f : (float)jt).ToArray();
                    measurements.Add(new ProbeMeasurement(measurementValues));
                }
            }
        
            return measurements;
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Services\Models\ATGModels\Alarm.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Services.Models.ATGModels
{
    public class Alarm
    {

        //convert the array of strings into a Frag Enumration
        public AlarmType AlarmFlags { get;private set; }    

        
        //constructor to parse the arram strings in to the alarm type
        public Alarm (IEnumerable<string> alarmStrings)

        {
            AlarmFlags = AlarmType.None;

            foreach (var alarm in alarmStrings)
            {
                switch (alarm)
                {
                    case "CriticalHighProduct":
                        AlarmFlags |= AlarmType.CriticalHighProduct;
                        break;
                    case "HighProduct":
                        AlarmFlags |= AlarmType.HighProduct;
                        break;
                    case "LowProduct":
                        AlarmFlags |= AlarmType.LowProduct;
                        break;
                    case "CriticalLowProduct":
                        AlarmFlags |= AlarmType.CriticalLowProduct;
                        break;
                    case "HighWater":
                        AlarmFlags |= AlarmType.HighWater;
                        break;
                    case "TankLeakage":
                        AlarmFlags |= AlarmType.TankLeakage;
                        break;
                    default:
                        break;
                }
            }
        }
       
        
        //constructure that accepts a list of string alarms 
        public Alarm(List<string> alarms)
        {
            Alarms = alarms;
        }   

        public bool HasAlarm(AlarmType alarmType)
        {
            return AlarmFlags.HasFlag(alarmType);
        }

        public List<string> Alarms { get; set; }


        
    }



    [Flags]
    public enum AlarmType
    {
        None = 0,
        CriticalHighProduct = 1 << 0,
        HighProduct = 1 << 1,
        LowProduct = 1 << 2,
        CriticalLowProduct = 1 << 3,
        HighWater = 1 << 4,
        TankLeakage = 1 << 5
    }

}



//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Services\Models\ATGModels\Derlivery.cs

﻿using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Services.Models.ATGModels
{
    public class Delivery
    {
        [JsonProperty("DateTime")]
        public DateTime DateTime { get; set; }

        [JsonProperty("ProductHeight")]
        public float ProductHeight { get; set; }

        [JsonProperty("WaterHeight")]
        public float WaterHeight { get; set; }

        [JsonProperty("Temperature")]
        public float Temperature { get; set; }

        [JsonProperty("ProductVolume")]
        public float ProductVolume { get; set; }

        [JsonProperty("ProductTCVolume")]
        public float ProductTCVolume { get; set; }

        [JsonProperty("ProductDensity")]
        public float? ProductDensity { get; set; }

        [JsonProperty("ProductMass")]
        public float? ProductMass { get; set; }

        [JsonProperty("PumpsDispensedVolume")]
        public float? PumpsDispensedVolume { get; set; }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Services\Models\ATGModels\Probe\ProbeGetMeasurementsRequest.cs

﻿using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Services.Models.ATGModels.Probe
{
    public class ProbeGetMeasurementsRequest
    {
        [JsonProperty("Protocol")]
        public string Protocol { get; set; } = "jsonPTS";

        [JsonProperty("Packets")]

        public List<ProbePacket> Packets { get; set; } = new List<ProbePacket>();


        public ProbeGetMeasurementsRequest(int probeId)
        {
            Packets.Add(new ProbePacket
            {
                Id = 1, ///TODO: check this
                Type = "ProbeGetMeasurements",
                Data = new ProbeData
                {
                    Probe = probeId
                }
            });
        }




        public class ProbePacket
        {
            [JsonProperty("Id")]
            public int Id { get; set; }

            [JsonProperty("Type")]
            public string Type { get; set; }

            [JsonProperty("Data")]
            public ProbeData Data { get; set; }

          
        }
        public class ProbeData
        {
            [JsonProperty("Probe")]
            public int Probe { get; set; }
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Services\Models\ATGModels\Probe\ProbeMeasurementsResponse.cs

﻿using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Services.Models.ATGModels.Probe
{
    public class ProbeMeasurementsResponse
    {
        [JsonProperty("Protocol")]
        public string Protocol { get; set; }

        [JsonProperty("Packets")]
        public List<MeasurementPacket> Packets { get; set; }


    }

    public class MeasurementPacket
    {
        [JsonProperty("Id")]
        public int Id { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Data")]
        public MeasurementData Data { get; set; }

       
    
    }

    public class MeasurementData
    {

     [JsonProperty("Probe")]
     [Range(1, 50)]
    public int Probe { get; set; }

    [JsonProperty("FuelGradeId")]
    [Range(1, 20)]
    public int? FuelGradeId { get; set; }

     [JsonProperty("FuelGradeName")]
    [StringLength(20)]
    public string? FuelGradeName { get; set; }


    [JsonProperty("Status")]
    [StringLength(7)]
   
    public string? Status { get; set; }



   [JsonProperty("Alarms")]
  // [JsonConverter(typeof(AlarmConverter))]
   public Alarm Alarms { get; set; }

    [JsonProperty("ProductHeight")]
    public double ProductHeight { get; set; }

    [JsonProperty("WaterHeight")]
    public double WaterHeight { get; set; }

    [JsonProperty("Temperature")]
    public double Temperature { get; set; }

    [JsonProperty("LastInTankDeliveryStart")]
    public Delivery LastInTankDeliveryStart { get; set; }

    [JsonProperty("LastInTankDeliveryEnd")]
    public Delivery LastInTankDeliveryEnd { get; set; }

    [JsonProperty("LastInTankDelivery")]
    public Delivery LastInTankDelivery { get; set; }

     public double CalculateTankFillingPercentage()
        {
            
            if(LastInTankDelivery != null)
            {
                double totalHeight = LastInTankDelivery.ProductHeight + LastInTankDelivery.WaterHeight;
                double tankHeight = 0;//TODO: get tank height from Service 

                if(totalHeight >0 && tankHeight > 0)
                {
                    return (totalHeight / tankHeight) * 100;
                }
                else
                {
                    return 0; // Return 0 if calulation is not possible
                }
                 

            }
            else
            {
                return 0;
            }
        }
     
    }



}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Testing\Class1.cs

﻿namespace FMS.Testing
{
    public class Class1
    {

    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Testing\GetConsumptionReportTest.cs

﻿using AutoMapper;
using FMS.Application.Queries.GPSGATEServer.GetconsumptionReport;
using FMS.Application.Queries.GPSGATEServer.LoginQuery;
using FMS.Domain.Entities;
using FMS.Domain.Entities.Auth;
using FMS.Infrastructure.DependancyInjection;
using FMS.Persistence.DataAccess;
using Moq;
using NuGet.Frameworks;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace FMS.Testing
{
    public class GetConsumptionReportTest
    {

        private readonly Mock<IGPSGateDirectoryWebservice> _gpsGateDirectoryWebservice;
        private readonly Mock<GpsdataContext> _gpsdataContext;
        private readonly Mock<IMapper> _mapper;

        GPSGateConections conns;

        public GetConsumptionReportTest()
        {
            _gpsGateDirectoryWebservice = new Mock<IGPSGateDirectoryWebservice>();
            _gpsdataContext = new Mock<GpsdataContext>();
            _mapper = new Mock<IMapper>();
        }

        private  async void LoginAsync ()
        {
            var username = "kkagiri";
            var password  = "password";
            int ApplicationID = 12;

            var loginQuery = new LoginQuery
            {
                GPSGateConections = new GPSGateConections
                {
                    GPSGateUser = new GPSGateUser
                    {
                        UserName = username,
                        Password = password
                    },
                    ApplicationID = ApplicationID
                }
            };

            var loginQueryHandler = new LoqinQuery(_gpsGateDirectoryWebservice.Object);

            conns =  await loginQueryHandler.Handle(loginQuery, CancellationToken());

        }

        private CancellationToken CancellationToken()
        {
            throw new NotImplementedException();
        }

        [Fact]
        private async Task TestHandle()
        {
            //arrange 
              var from = "2023-07-01";
             var to = "2023-07-01";

               LoginAsync();

            var handler = new GetConsumptionReportQueryHandler(_gpsGateDirectoryWebservice.Object, _gpsdataContext.Object, _mapper.Object);
            var consumptionBatch = new List<Vehicleconsumption> {
            
            
            };
            var request = new GetConsumptionReportQuery (conns,208,DateTime.Parse(from),DateTime.Parse(to));


            //act
            await handler.Handle(request, CancellationToken());

            //assert

          //  _gpsdataContext.Verify(x=>x.SaveChanges(CancellationToken))



        }



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Testing\ATGTest\ATGCommunicationServiceTests.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Moq;
using Xunit;
using FMS.Infrastructure.Webservice.ATGService;
using FMS.Services.Models.ATGModels.Probe;
using System.Net;
using FMS.Services.Models.ATGModels;
using Newtonsoft.Json;
using Moq.Protected;
using MySqlX.XDevAPI.Common;

namespace FMS.Testing.ATGTest
{

    public class ATGCommunicationServiceTests
    {

        [Fact]
        public async Task GetProbeMeasurementAsync_ReturnsValidResponse()
        {

            //Arrange
            var MockHttpMessageHandler = new Mock<HttpMessageHandler>();
            var probeId = 1;
            var sampleResponnse = new ProbeMeasurementsResponse
            {
                Protocol = "jsonPTS",
                Packets = new List<MeasurementPacket>
                {
                    new MeasurementPacket
                    {
                        Id=1,
                        Type="ProbeMeasurements",
                       Data = new MeasurementData
                        {
                             Probe = probeId,
                             Status = "OK",
                              ProductHeight = 2534.1,
                              WaterHeight = 123.1,
                              Temperature = 21.3,
                    LastInTankDeliveryStart = new Delivery
                           {
                    DateTime = DateTime.Parse( "2019-03-09T15:30:25"),
                    ProductHeight = 2534.1f,
                    WaterHeight = 123.1f,
                    Temperature = 21.3f,
                    ProductVolume = 2005f,
                    ProductTCVolume = 2015f
                },
                LastInTankDeliveryEnd = new Delivery
                {
                    DateTime =DateTime.Parse("2019-03-09T15:32:15"),
                    ProductHeight = 2725.1f,
                    WaterHeight = 130.4f,
                    Temperature = 21.6f,
                    ProductVolume = 2514,
                    ProductTCVolume = 2601
                },
                LastInTankDelivery = new Delivery
                {
                    ProductDensity = 758.9f,
                    ProductMass = 386.3f,
                    PumpsDispensedVolume = 25.3f
                },
                Alarms = new Alarm(new List<string> { "CriticalHighProduct", "HighWater" })
            }

                        }

                    }

            };

            var serializedResponse = JsonConvert.SerializeObject(sampleResponnse);


            MockHttpMessageHandler.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync",
                ItExpr.Is<HttpRequestMessage>(req=>req.Method == HttpMethod.Post),
                ItExpr.IsAny<CancellationToken>())
                .ReturnsAsync(new HttpResponseMessage
                {
                    StatusCode = HttpStatusCode.OK,
                    Content = new StringContent(serializedResponse)
                });

            var httpclient = new HttpClient(MockHttpMessageHandler.Object);

            var config = new ATGServiceConfig
            {
                BaseUrl = "https://10.0.14.21",               
                Password = "admin",
                Username = "admin"
            };

            var service = new ATGCommunicationService(httpclient, config);


            //Act
            var result = await service.GetTankLevelAsync(probeId);

            //Assert
            Assert.NotNull(result);
            Assert.Equal("jsonPTS", result.Protocol);
            Assert.Single(result.Packets);
            Assert.Equal(probeId, result.Packets[0].Data.Probe);
            Assert.Equal("OK", result.Packets[0].Data.Status);


        }


    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Testing\ATGTest\ATGCreateTankMeasurementTests.cs



//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Testing\ConsumptionQueriesTest\GetConsumptionReportQueriesMock.cs

﻿using Xunit;
using Moq;
using System.Threading;
using System.Collections.Generic;
using FMS.Domain.Entities;
using FMS.Persistence;
using FMS.Infrastructure.Webservice;
using FMS.Infrastructure.DependancyInjection;
using FMS.Application.Queries;
using System.Linq;
using System.Threading.Tasks;
//using FMS.Application.Queries.GetconsumptionReport;
using FMS.Domain.Entities.Auth;
using FMS.Persistence.DataAccess;
using Microsoft.EntityFrameworkCore;
using FMS.Application.Models;

namespace FMS.Testing.ConsumptionQueriesTest
{
    //public class GetConsumptionReportQueriesMock
    //{
    //    private GPSGateConections _gpsGateConections;


    //    [Fact]
    //    public async Task Handle_ReturnsCorrectConsumptionReport()
    //    {

    //        //arrange 
    //        var cancellationToken = new CancellationToken();

    //        _gpsGateConections = new GPSGateConections();
    //        _gpsGateConections.SessionID = "FC93F2F891692CFD13FBC4CB7059FBA9";


    //        var from = new DateTime(2023, 3, 27, 0, 0, 0, DateTimeKind.Local);
    //        var to = new DateTime(2023, 3, 28, 0, 0, 0, DateTimeKind.Local);


    //        var request = new GetConsumptionReportQuery(_gpsGateConections, 218, from, to);





    //        // mock the gpsgate directory web service 


    //        var mockGPSGateDirectory = new Mock<IGPSGateDirectoryWebservice>();

    //        mockGPSGateDirectory.Setup(ws => ws.GetFuelConsumptionReportAsync(request.conn, request.FuelConsumptionReportId, request.From, request.To)).ReturnsAsync(GetTestConsumptionReport());




    //        //mock the context and the vehicles dbset 
    //        var mockcontext = new Mock<GpsdataContext>();
    //       // var testvehicles = GetTestVehicles().AsQueryable();

    //     //   mockcontext.Setup(c => c.Vehicles).Returns(testvehicles);


    //        var handler = new GetConsumptionReportQueryHandler(mockGPSGateDirectory.Object, mockcontext.Object);

    //        //act
    //        var result = await handler.Handle(request, cancellationToken);

    //        //assert

    //        Assert.Equal(2, result.Count());
    //        Assert.NotNull(result);


    //        var consumptionInfo1 = result.First(x => x.VehicleId == 1);
    //        Assert.NotNull(consumptionInfo1);
    //        Assert.Equal("ADT02", consumptionInfo1.HyoungNo);

    //        var consumptionInfo2 = result.First(x => x.VehicleId == 1);
    //        Assert.NotNull(consumptionInfo1);
    //        Assert.Equal("Tp01", consumptionInfo1.HyoungNo);




    //    }




    //    [Fact]
    //    //use in memorydatabase
    //    public async Task Handle_UsingInMemoryDatabase_ReturnsCorrectConsumptionReport()
    //    {
    //        //arrange
    //        var options = new DbContextOptionsBuilder<GpsdataContext>()
    //            .UseInMemoryDatabase(databaseName: "gpsdata")
    //            .Options;


    //        //seed the in-memony database wiht test data
    //        using (var context = new GpsdataContext(options))
    //        {
    //            context.Vehicles.AddRange(GetTestVehicles());
    //            await context.SaveChangesAsync();
    //        }


    //        //set up the gpsConnectin dates and request

    //        var cancellationToken = new CancellationToken();
    //        var gpsGateConections = new GPSGateConections{ SessionID = "5622F3478AC028A60F6F802A4A90BEA0" };

    //        var from = new DateTime(2023, 3, 27, 0, 0, 0, DateTimeKind.Local);
    //        var to = new DateTime(2023, 3, 28, 0, 0, 0, DateTimeKind.Local);

    //        var request = new GetConsumptionReportQuery(gpsGateConections, 218, from, to);



    //        // Mock the GPSGate directory web service
    //        var mockGPSGateDirectory = new Mock<IGPSGateDirectoryWebservice>();
    //        mockGPSGateDirectory.Setup(ws => ws.GetFuelConsumptionReportAsync(request.conn, request.FuelConsumptionReportId, request.From, request.To)).ReturnsAsync(GetTestConsumptionReport());


    //        //act 
    //        List<VehicleConsumptionInfo> result;

    //        using (var context = new GpsdataContext(options))
    //        {
    //            var handler = new GetConsumptionReportQueryHandler(mockGPSGateDirectory.Object, context);
    //            result = await handler.Handle(request, cancellationToken);
    //        }


    //        //assert 
    //        Assert.Equal(2, result.Count());
    //        Assert.NotNull(result);

    //        var consumptionInfo1 = result.First(x => x.VehicleId == 1);
    //        Assert.NotNull(consumptionInfo1);
    //        Assert.Equal("ADT02", consumptionInfo1.HyoungNo);

    //        var consumptionInfo2 = result.First(x => x.VehicleId == 1);
    //        Assert.NotNull(consumptionInfo1);
    //        Assert.Equal("Tp01", consumptionInfo1.HyoungNo);


    //    }





    //    //private List<Vehicle> GetTestVehicles()
    //    //{
    //    //    return new List<Vehicle>
    //    //   {
    //    //       new Vehicle
    //    //       {
    //    //           VehicleId = 1,
    //    //             HyoungNo = "ADT02",

    //    //             FuelConsumptionType =  FuelConsumptionType.LitersPerHour,

    //    //             VehicleType = new Vehicletype
    //    //             {
    //    //                  Name = "Dumper"
    //    //             },
    //    //             VehicleModel = new Vehiclemodel
    //    //             {
    //    //                  Name = "Toyota"
    //    //             },
    //    //             ExpectedAveraged = 10,
    //    //             WorkingSite = new Site
    //    //             {
    //    //                  Name = "Site 1"
    //    //             },
    //    //             ExcessWorkingHrCost = 10,
    //    //             DefaultEmployee = new Employee
    //    //             {
    //    //                  FullName = "John Doe",
    //    //                  EmployeeWorkNo = "1234"
    //    //             }
    //    //           },

    //    //       new Vehicle
    //    //       {
    //    //           VehicleId = 2,
    //    //             HyoungNo = "Tp01",

    //    //             FuelConsumptionType =  FuelConsumptionType.KilometersPerLiter,

    //    //             VehicleType = new Vehicletype
    //    //             {
    //    //                  Name = "Tipper"
    //    //             },
    //    //             VehicleModel = new Vehiclemodel
    //    //             {
    //    //                  Name = "Tipper"
    //    //             },
    //    //             ExpectedAveraged = 2,
    //    //             WorkingSite = new Site
    //    //             {
    //    //                  Name = "Site 2"
    //    //             },
    //    //             ExcessWorkingHrCost = 10,
    //    //             DefaultEmployee = new Employee
    //    //             {
    //    //                  FullName = "John Doe",
    //    //                  EmployeeWorkNo = "1234"
    //    //             }
    //    //       }


    //    //       };
    //    //}


    //    private List<Vehicleconsumption> GetTestConsumptionReport()
    //    {
    //        return new List<Vehicleconsumption>
    //        {
    //            //add test data for vehicle consumption 

    //            new Vehicleconsumption
    //            {
    //                    VehicleId = 1205,
    //                    TotalFuel = 100,
    //                    Date = new DateTime(2023, 3, 27, 0, 0, 0, DateTimeKind.Local),
    //                    EngHours = 2
    //            },

    //            new Vehicleconsumption
    //            {
    //                    VehicleId = 1206,
    //                    TotalFuel = 200,
    //                    Date = new DateTime(2023, 3, 27, 0, 0, 0, DateTimeKind.Local),
    //                    MaxSpeed = 100,
    //                    AvgSpeed = 100,
    //                    TotalDistance = 100,
    //             }
    //           };
    //    }

    //}
}



//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.Testing\ConsumptionQueriesTest\GetConsumptionReportQueryHandlerTest.cs



//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Program.cs

using System;
using FMS.WebClient.Controllers;
using System.Reflection;
using FMS.WebClient.Signal;
using FMS.Application.Models;
using FMS.Infrastructure.DependancyInjection;
using MediatR;
using AutoMapper;

using FMS.Persistence.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using FMS.Application.Queries.GPSGATEServer.GetconsumptionReport;
using FMS.WebClient.MappingProfile;
using FMS.Application.Queries.Database.VehicleQuery;
using FMS.Application.Queries.Database.SiteQuery;
using FMS.Application.Queries.Database.VehicleModelQuery;
using FMS.Application.Queries.Database.VehicleManufacturer;
using FMS.Application.Queries.Database.EmployeeQuery;
using FMS.Application.Queries.Database.VehicleTypeQuery;
using FMS.Application.MappingProfile;
using Autofac.Core;
using System.Security.Cryptography.Xml;
using System.Text.Json.Serialization;
using FMS.Infrastructure.Webservice.GPSService;
using NLog.Web;
using NLog;
using Microsoft.Extensions.Logging;


// Add services to the container.
var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger();


try
{
    logger.Info("Application Starting Up");
    var builder = WebApplication.CreateBuilder(args);



    // Configure NLog for ASP.NET Core
    builder.Logging.ClearProviders();
    builder.Logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);
    builder.Host.UseNLog();


    builder.Services.AddControllersWithViews().AddJsonOptions(
        options =>
        {
            // options.JsonSerializerOptions.ReferenceHandler  = ReferenceHandler.Preserve;
            options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
            options.JsonSerializerOptions.MaxDepth = 0;
        });

    builder.Services.AddSignalR();

    //builder.Services.AddMediatR(typeof(ConsumptionController).GetTypeInfo().Assembly);
    builder.Services.AddMediatR(cfg =>
    {
        cfg.RegisterServicesFromAssemblyContaining<Program>();
        cfg.RegisterServicesFromAssembly(typeof(ConsumptionController).Assembly);
        cfg.RegisterServicesFromAssemblies(typeof(VehicleController).Assembly);
        cfg.RegisterServicesFromAssembly(typeof(GetConsumptionReportQueryHandler).Assembly);
        cfg.RegisterServicesFromAssembly(typeof(GetVehicleQueryHandler).Assembly);
        cfg.RegisterServicesFromAssembly(typeof(GetSiteQueryHandler).Assembly);
        cfg.RegisterServicesFromAssembly(typeof(GetVehicleModelQueryHandler).Assembly);
        cfg.RegisterServicesFromAssembly(typeof(GetVehicleManufacturerHandler).Assembly);
        cfg.RegisterServicesFromAssembly(typeof(GetEmployeeHandler).Assembly);
        cfg.RegisterServicesFromAssembly(typeof(GetVehicleTypeQueryHandler).Assembly);


    });
    builder.Services.AddSingleton<PtsStatusService>();

    //builder.Services.AddScoped<IRequestHandler<GetConsumptionReportQuery,List<VehicleConsumptionInfo>>,GetConsumptionReportQueryHandler>();
    builder.Services.AddScoped<IGPSGateDirectoryWebservice, GPSGateDirectoryWebservice>();
    builder.Services.AddDbContext<GpsdataContext>(options =>
              options.UseMySQL("server=10.0.10.150;port=3306;database=gpsdata;user=root;password=Niwewenamimi1000;connection timeout=2000;command timeout=2000"));

    //Auto mapper profiles
    builder.Services.AddAutoMapper(typeof(VehicleMappingProfile));
    builder.Services.AddAutoMapper(typeof(MappingProfile).Assembly);

    builder.Services.AddCors(options =>
    {
        options.AddPolicy("AllowSpecificOrigin", build =>
        {
            build
            //.WithOrigins("https://localhost:3000") //change
            .AllowAnyHeader()
            .AllowAnyMethod()
            .AllowAnyOrigin()
            .WithOrigins("http://10.0.11.90:7009", "http://localhost:7009" , "http://localhost:3000");

        });
    });
    var app = builder.Build();

    // Configure the HTTP request pipeline.
    if (!app.Environment.IsDevelopment())
    {
        // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
        app.UseHsts();
        app.UseExceptionHandler("/Home/Error");
        // app.UseCors("AllowSpecificOrigin");
    }
    app.UseCors("AllowSpecificOrigin");
    app.Use(async (context, next) =>
    {
        //log request information here 


        logger.Info("Handling request: {RequestMethod} {RequestPath}", context.Request.Method, context.Request.Path);
        try
        {
            await next.Invoke();
            //log response information here

            logger.Info("Finished handling request. Response status code: {ResponseStatusCode}", context.Response.StatusCode);
        }
        catch (Exception ex)
        {
            logger.Error(ex, "An unhandled exception has occurred while executing the request. Response status code: {ResponseStatusCode}", context.Response.StatusCode);
            throw;
        }


    });
    app.UseHttpsRedirection();
    app.UseStaticFiles();
    app.UseRouting();

  app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers();
        endpoints.MapHub<PtsStatusHub>("/ptsstatushub");

    });


    app.MapControllerRoute(
        name: "default",
        pattern: "{controller}/{action=Index}/{id?}");

    //app.MapFallbackToFile("index.html");

    app.Run();
}
catch (Exception ex)
{
    logger.Error(ex, "Stopped program because of exception");

}
finally
{
    NLog.LogManager.Shutdown();

}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\ATGController.cs

﻿using System;
using NLog;
using Microsoft.AspNetCore.Mvc;
using MediatR;
using System.Security.Cryptography;
using FMS.Application.Command.DatabaseCommand.ATGCommands.TankMeasurementsCommand;
using Microsoft.Extensions.Configuration;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using FMS.Application.ModelsDTOs.ATG;
using FMS.Domain.Entities;
using Microsoft.Extensions.Logging;
using AutoMapper.Configuration.Annotations;
using FMS.Application.ModelsDTOs.ATG.Common;
using FMS.Application.Command.DatabaseCommand.ATGCommands.InTankDeliveryCommand;
using FMS.Application.Command.DatabaseCommand.ATGCommands.PumpTransactoinCommand;
using FMS.Application.Command.DatabaseCommand.ATGCommands.AlertRecordCommand;
using FMS.Application.Common;
using Microsoft.AspNetCore.SignalR;
using FMS.WebClient.Signal;
using FMS.Domain.ATGStatus;
using FMS.Application.Command.SignalCommand;

namespace FMS.WebClient.Controllers;


    [ApiController]
    [Route("ATG")]
 public class ATGController : ControllerBase
    {
        private readonly IMediator _mediator;
        private readonly IConfiguration _configuration;
      private  readonly ILogger<ATGController> _logger;
    private readonly IHubContext<PtsStatusHub> _hubContext;




        public ATGController(IMediator mediator, IConfiguration configuration , ILogger<ATGController> logger ,IHubContext<PtsStatusHub> hubContext  )
        {
            _logger = logger;
            _mediator = mediator;
            _configuration = configuration;
           _hubContext = hubContext;
        }



    [HttpPost]
    [Route("test")]
    public async Task<IActionResult> Test()
    {
        string requestBody;


        using (var reader = new StreamReader(Request.Body))
        {
            requestBody = await reader.ReadToEndAsync();
        }

        try
        {
            var jsonRequest = JObject.Parse(requestBody);
                _logger.LogInformation(1,jsonRequest.ToString());
                var ptsRequestDTO = jsonRequest.ToObject<PtsRequestDto>();

            if (ptsRequestDTO == null || ptsRequestDTO.Packets == null || !ptsRequestDTO.Packets.Any())
            {
                return BadRequest("Invalid or missing packet data");
            }

            // Assuming you want to respond with the first packet's ID and a custom message
            var firstPacketId = ptsRequestDTO.Packets.First().Id;

            var confirm = ConfirmationMessage.Success(firstPacketId, "UploadTankMeasurement", "OK");
            var response = new ContentResult
            {
                
                Content = confirm,
                ContentType = "application/json; charset=utf-8",
                StatusCode = 200
            };
            Response.Headers["Connection"] = "close";


            //_logger.LogInformation(confirm.ToString(),"Response");
            return response;
        }
        catch (Exception ex)
        {
            // Log the exception here
            return BadRequest(ConfirmationMessage.Error(0, "Error", 500, ex.Message));
        }
    }




    /// <summary>
    /// 
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    [HttpPost]
    [Route("post")] // The URI provided to the PTS-2 controller
    public async Task<IActionResult> Post()
    {
        string requestBody;


        using (var reader = new StreamReader(Request.Body))
        {
            requestBody = await reader.ReadToEndAsync();
        }
         
        try
        {
            var jsonRequest = JObject.Parse(requestBody);
      

        if(jsonRequest == null)
        {
                _logger.LogError("jsonRequest is null or improperly formatted");
            return BadRequest("Invalid or missing packet data");
        }

        var secretKey = _configuration["SecretKey"];

        // You would validate the HMAC signature here if you're using the SecretKey
        // This example assumes you have a method to validate the HMAC called ValidateHMAC
       // if (Request.Headers.TryGetValue("X-Data-Signature", out var signature) &&
        //    !await validateHMAC(signature,Request.Body,secretKey))
       // {
       //     return Unauthorized();
      //  }

 

        //TODO: Check if the Header X-Pts-Id is in the Database . If not return 401 with message "PTS ID not found"

        //extract headers 

        var ptsID = Request.Headers["X-Pts-Id"].ToString();

        //var jsonRequest = JsonConvert.DeserializeObject<JObject>(requestBody);

       
            var ptsRequestDTO = jsonRequest.ToObject<PtsRequestDto>();


            if (ptsRequestDTO == null || ptsRequestDTO.Packets == null || !ptsRequestDTO.Packets.Any())
            {
                Response.StatusCode = 400;
                await Response.WriteAsync("Invalid or missing packet data");
                //_logger.LogError("Invalid or missing packet data");
                return BadRequest("Invalid or missing packet data");
            }

            bool isUploadStatus = false;

            List<string> responses = new List<string>();
            foreach (var packet in ptsRequestDTO.Packets)
            {

                    string localResponse = string.Empty;

                    switch (packet.Type)
                    {

                        case "UploadStatus":

                            isUploadStatus = true;
                            var command = new UploadStatusCommand { Data = packet.Data };

                        //do other processing here too 
                       var  uploadStatus =  await _mediator.Send(command);

                        //convert loca

                            await _hubContext.Clients.All.SendAsync("ReceiveStatusUpdate", uploadStatus);

                            //process the update status
                            var confirmation = ConfirmationMessage.Success(packet.Id, "UploadStatus", "OK");
                            responses.Add(confirmation);
                            break;

                        case "UploadTankMeasurement":

                            var tankcommand = new CreateTankMeasurementCommand { PtsRequestDto = ptsRequestDTO };
                            //_logger.Log(LogLevel.Debug, packet.ToString());
                            localResponse = await _mediator.Send(tankcommand);
                            responses.Add(localResponse);
                            break;

                        case "UploadPumpTransaction":
                            var pumpCommand = new CreatePumpTransactionCommand { PtsRequestDto = ptsRequestDTO };
                            localResponse = await _mediator.Send(pumpCommand);
                            responses.Add(localResponse);
                            break;
                        case "UploadInTankDelivery":
                            var deliveryCommand = new CreateInTankDeliveryCommand { PtsRequestDto = ptsRequestDTO };
                            localResponse = await _mediator.Send(deliveryCommand);
                            responses.Add(localResponse);
                            break;
                        case "UploadAlertRecord":
                            var alertCommand = new CreateAlertRecordCommand { PtsRequestDto = ptsRequestDTO };
                            localResponse = await _mediator.Send(alertCommand);
                            responses.Add(localResponse);
                            break;
                        default:
                            _logger.LogError("Unknown request type: {RequestType}", packet.Type);
                            return BadRequest("Unknown request type");
                    }

                    responses.Add(localResponse);
                }
            
            if(responses.All(r=>r.Contains("OK")))
            {
               
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Headers["Connection"] = "close";
                    Response.StatusCode = 200; // OK

                    foreach (var response in responses)
                    {
                        var chunkSizeBytes = Encoding.UTF8.GetByteCount(response);
                        await Response.Body.WriteAsync(Encoding.UTF8.GetBytes(chunkSizeBytes.ToString("X")));
                        await Response.Body.WriteAsync(Encoding.UTF8.GetBytes("\r\n"));
                        await Response.Body.WriteAsync(Encoding.UTF8.GetBytes(response));
                        await Response.Body.WriteAsync(Encoding.UTF8.GetBytes("\r\n"));
                    }

                    await Response.Body.WriteAsync(Encoding.UTF8.GetBytes("0\r\n\r\n")); // End of chunks
                
            }
            else
            {
                Response.StatusCode = 500; // Internal Server Error
                await Response.WriteAsync("Error processing request");
            }
        

        }
        catch (JsonReaderException ex)
        {
            _logger.LogError(ex, "Invalid Json Format");
            return BadRequest("Invalid Json Format");
        }
        return BadRequest("Request could not be processed");
    }


    private string CreateHmacSignature(string responseData)
    {
        var secretKey = _configuration["SecretKey"];
        var secretKeyBytes = Encoding.UTF8.GetBytes(secretKey);
        using (var hmac = new HMACSHA256(secretKeyBytes))
        {
            var responseBytes = Encoding.UTF8.GetBytes(responseData);
            var hash = hmac.ComputeHash(responseBytes);
            return Convert.ToBase64String(hash);
        }
    }
        public async Task<bool> validateHMAC(string receivedSignature, Stream requestBodyStream, string secretKey)
                {
                    using (var reader = new StreamReader(requestBodyStream))
                    {
                        var requestbody  = await reader.ReadToEndAsync();
                       
                        // Compute the hash from the request body and the secret key
                        var secretKeyBytes = Encoding.UTF8.GetBytes(secretKey);
                        using (var hmac = new HMACSHA256(secretKeyBytes))
                        {
                            var bodyBytes = Encoding.UTF8.GetBytes(requestbody);
                            var computedHash = hmac.ComputeHash(bodyBytes);
                            var computedSignature = Convert.ToBase64String(computedHash);

                            // Compare the computed signature with the received signature
                            return computedSignature == receivedSignature;
                        }


                    }
                }
            }
        

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\ConsumptionController.cs

﻿using Microsoft.AspNetCore.Mvc;
using FMS.Application.Queries;
using MediatR;
using FMS.Application.Queries.GPSGATEServer.GetconsumptionReport;
using FMS.Domain.Entities.Auth;
using System.Globalization;
using FMS.Application.Queries.GPSGATEServer.LoginQuery;
using FMS.WebClient.Models.DatabaseViewModel;
using FMS.Application.Command.DatabaseCommand.ConsumptionCmd;
using AutoMapper;
using FMS.Application.Command.DatabaseCommand.ConsumtionCmd.Update;
using FMS.Application.Queries.Database.Consumption;

namespace FMS.WebClient.Controllers
{

    [ApiController]
    [Route("api/[controller]")]
    public class ConsumptionController : ControllerBase
    {
        private readonly IMediator _mediator;
        private readonly IConfiguration _configuration;
        private readonly IMapper _mapper;
        private readonly ILogger _logger;

        public ConsumptionController (IMediator mediator, IConfiguration configuration,IMapper mapper,ILogger<ConsumptionController> logger)
        {
            _mapper = mapper;
            _mediator = mediator;
            _configuration = configuration;
            _logger = logger;
        }

        /// <summary>
        /// Get histroical data TODO: Search days on settings or application
        /// </summary>
        /// <param name="vehicleId"></param>
        /// <param name="date"></param>
        /// <returns></returns>
        [HttpGet("gethistoryconsumption")]
        public async Task<IActionResult> GetHistoryConsumptionDatabyVehicle(int vehicleId,DateTime date)
        {
            if (vehicleId <= 0 || date == default(DateTime))
            {
                return BadRequest("Invalid vehicle ID or date");
            }
            try
            {

                var query = new GetHistoryConsumptionByVehicleQuery { Entry = 5, VehicleId = vehicleId, startDate = date };

                var results = await _mediator.Send(query);

                return Ok(results);
            }
            catch(Exception ex)
            {
                _logger.LogError(ex, "Error Fetching history consumption Data");
                return StatusCode(StatusCodes.Status500InternalServerError,new {Message = ex.Message});
            }

        }
        
        [HttpGet]
        public async Task<IActionResult> Get(DateTime from) 
        {
          //load settings from appsettings.json

          string? username = _configuration["GPSGateUser:Username"];
          string? password = _configuration["GPSGateUser:Password"];
          int?applicationID  = int.Parse(_configuration["ApplicationID"]??"0");
          int fuelConsumptionReportId = int.Parse(_configuration["FuelConsumptionReportID"]??"0");


            var fromDate =from.Date;
            var toDate = fromDate.AddDays(1).AddTicks(-1); //add one day to from date

          var loginquery = new LoginQuery{

            GPSGateConections = new GPSGateConections{
                GPSGateUser= new GPSGateUser 
                {
                    UserName = username,
                    Password = password
                },
                ApplicationID = applicationID.Value
            }
          };

             var conn = await _mediator.Send(loginquery);
          
            var query = new GetConsumptionReportQuery(conn ,fuelConsumptionReportId, fromDate, toDate);

            var results = await _mediator.Send(query);

            return Ok(results);

        }

        [HttpPost("Create")]
        public async Task<IActionResult> ConsumptionCreate([FromBody] ConsumptionViewModel model)
        {
            if(!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
         
            var command = _mapper.Map<ConsumptionCreateCmd>(model);

            await _mediator.Send(command);

            return Ok();

        }

        [HttpPut("Update/{id}")]
        public async Task<IActionResult> ConsumptionUpdate(int id, [FromBody] ConsumptionViewModel model)
        {
            if(!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
         
            var command = _mapper.Map<ComsumptionUpdateCmd>(model);

            command.Id = id;

            await _mediator.Send(command);

            return Ok();

        }




        [HttpGet("test")]
        public IActionResult Test()
        {
            return Ok("Test endpoint");
        }



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\EmployeeController.cs

﻿using FMS.Application.Command.DatabaseCommand.EmployeeCmd;
using FMS.Application.Models.Employee;
using FMS.Application.Queries.Database.EmployeeQuery;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace FMS.WebClient.Controllers
{
    [ApiController]
    [Route("api/[controller]")]

    public class EmployeeController : ControllerBase

    {
        private readonly IMediator _mediator;

        public EmployeeController(IMediator mediator)
        {
            _mediator = mediator;
        }
        [HttpPost("create")]
        public async Task<IActionResult> CreateEmployee([FromBody] EmployeeDto employeeDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest();
            }
            var command = new EmployeeCreateCmd
            {
                EmployeeDto = employeeDto
            };
            var result = await _mediator.Send(command);
            return Ok(result);
        }


   [HttpGet("getemployeebysiteid")]
   public async Task<IActionResult> GetEmployeeBySiteId(int siteId)
   {
         var query = new GetEmployeeBySiteIdQuery { SiteId = siteId };
         var employees = await _mediator.Send(query);
         return Ok(employees);
   }



        [HttpGet("getlist")]
        public async Task<IActionResult> GetEmployeeList()
        {
            var query = new GetEmployeeQuery();
            var employees = await _mediator.Send(query);
            return Ok(employees);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetEmployee(int id)
        {
            var query = new GetEmployeeByIdQuery { Id = id};
            var employee = await _mediator.Send(query);

            if (employee == null)
            {
                return NotFound();
            }


            return Ok(employee);
        }

        [HttpPut("update/{id}")]
        public async Task<IActionResult> UpdateEmployee( int id, [FromBody] EmployeeDto employeeDto)
        {

            if(!ModelState.IsValid)
            {
                return BadRequest();
            }

            var command = new EmployeeUpdateCmd
            {
               ID = id,
                EmployeeDto = employeeDto
            };

            var result = await _mediator.Send(command);

            if(result)
            {
                return NoContent();
            }

            else
            {
                return NotFound();
            }
        }

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\ExpectedAVGClassificationController.cs

﻿using FMS.Application.Command.DatabaseCommand.ExptAVGClassification;
using FMS.Application.Models;
using FMS.Application.Queries.Database.ExpectedAvg;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace FMS.WebClient.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ExpectedAVGClassificationController : ControllerBase
    {

        private readonly IMediator _mediator;


        public ExpectedAVGClassificationController(IMediator mediator)
        {
            _mediator = mediator;
        }


        [HttpGet("getlist")]
        public async Task<IActionResult> GetExpectedAVGClassification()
        {
            var query = new GetExpectAVGClassificationlist();
            var expectedAVGClassification = await _mediator.Send(query);
            return Ok(expectedAVGClassification);
        }

        [HttpPost("create")]
        public async Task<IActionResult> CreateExpClassfication([FromBody] ExpectedAVGClassficationDTO expectedAVGClassificationDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest();
            }
            var command = new ExptAVGClassificationCreateCmd
            {
                ExpctAVGClassficationDTO = expectedAVGClassificationDto
            };
            var result = await _mediator.Send(command);
            return Ok(result);
        }

        [HttpPut("update/{id}")]
        public async Task<IActionResult> UpdateExpectedAVGClassification(int id, [FromBody] ExpectedAVGClassficationDTO expectedAVGClassificationDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest();
            }

            var command = new ExpectedAVGClassificationUpdateCmd
            {
                Id = id,
                Name = expectedAVGClassificationDto.Name,
                Description = expectedAVGClassificationDto.Description
            };

            var result = await _mediator.Send(command);

            if (result == 0)
            {
                return NotFound();
            }

            return Ok();
        }




    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\ExpectedAVGController.cs

﻿using AutoMapper;
using FMS.Application.Command.DatabaseCommand.ExpectedAVGCmd;
using FMS.Application.Command.DatabaseCommand.ExptAVGClassification;
using FMS.Application.Models;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Application.Queries.Database.ExpectedAvg;
using FMS.WebClient.Models.DatabaseViewModel.ExpectedViewModel;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace FMS.WebClient.Controllers
{

    [ApiController]
    [Route("api/[controller]")]
    public class ExpectedAVGController : ControllerBase
    {
       
        private readonly IMediator _mediator;
        private readonly IMapper _mapper;

        public ExpectedAVGController(IMediator mediator,IMapper mapper)
        {
            _mapper = mapper;
            _mediator = mediator;
        }


        [HttpGet("getlist")]
        public async Task<IActionResult> GetExpectedAVGList()
        {
            var query = new GetExpectedAVGQuery();
            var expectedAVGs = await _mediator.Send(query);
            return Ok(expectedAVGs);
        }

        [HttpGet("getlistbyvehiclebysite")]
        public async Task<IActionResult> GetExpectedAVGListByVehicleBySite(int vehicleId, int siteId)
        {
            var query = new GetExpectedAverageByVehicleBySite { VehicleId = vehicleId, SiteId = siteId };
            var expectedAVGs = await _mediator.Send(query);
            return Ok(expectedAVGs);
        }

        [HttpGet("classification/getlist")]
        public async Task<IActionResult> GetClassificationList()
        {
            var query = new GetExpectAVGClassificationlist();
            var classifications = await _mediator.Send(query);
            return Ok(classifications);
        }

        [HttpPost("classification/create")]
        public async Task <IActionResult> CreateExpClassfication([FromBody] ExpectedAVGClassficationDTO expectedAVGClassificationDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest();
            }
            var command = new ExptAVGClassificationCreateCmd
            {
                ExpctAVGClassficationDTO = expectedAVGClassificationDto
            };
            var result = await _mediator.Send(command);
            return Ok(result);
        }


        [HttpGet("{id}")]
        public async Task<IActionResult> GetExpectedAVGbyID(int id)
        {
            var query = new GetExpectedAVGByIdQuery { Id = id };
            var expectedAVG = await _mediator.Send(query);
            if (expectedAVG == null)
            {
                return NotFound();
            }
            return Ok(expectedAVG);
        }

        [HttpPut("update/{id}")]
        public async Task<IActionResult> UpdateExpectedAVG(int id, [FromBody] ExpectedAVGDto expectedAVGDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest();
            }
            var command = new ExpectedAVGUpdateCmd
            {
                ExpectedAVGDto = expectedAVGDto
            };
            var result = await _mediator.Send(command);
            return Ok(result);
        }

        [HttpPost("create")]
        public async Task<IActionResult> CreateExpectedAVG(List<ExpectedAVGViewModel> expectedAVGViewModel)
        {
          
                if (!ModelState.IsValid)
                {
                    return BadRequest();
                }

                var map = _mapper.Map<List<ExpectedAVGDto>>(expectedAVGViewModel); // mapping to a list
           
                var command = new ExpectedAVGCreateCmd
                {
                    ExpectedAVGDto = map
                };
            try
            {
                var (created, duplicates) = await _mediator.Send(command);
                if (duplicates.Any())
                {
                    return Conflict($"Duplicates found: {duplicates.Count} items.");
                }
                return Ok(created);
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, new { Message = ex.Message });
            }
            }

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\SiteController.cs

﻿using FMS.Application.Queries.Database.SiteQuery;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace FMS.WebClient.Controllers
{

    [ApiController]
    [Route("api/[controller]")]

    public class SiteController : ControllerBase
    {

        private readonly IMediator _mediator;

        public SiteController(IMediator mediator)
        {
            _mediator = mediator;
        }

        //return list of sites
        [HttpGet("getlist")]
        public async Task<IActionResult> GetSiteList()
        {

           var query = new GetSiteQuery();
            var sites =await _mediator.Send(query);
            return Ok(sites);

        }

        [HttpGet("test")]
        public IActionResult Test()
        {
            return   Ok("Test endpoint");
        }

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\VehicleController.cs

﻿using AutoMapper;
using FMS.Application.Command.DatabaseCommand.UpdateVehicle;
using FMS.Application.Models;
using FMS.Application.Queries.Database.VehicleQuery;
using FMS.Domain.Entities;
using FMS.WebClient.Models.DatabaseViewModel.VehicleViewModel;
using MediatR;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Newtonsoft.Json;

namespace FMS.WebClient.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class VehicleController : ControllerBase
    {

        private readonly IMediator _mediator;
        private readonly IMapper _mapper;

        public VehicleController(IMediator mediator,IMapper mapper)
        {
            _mediator = mediator;
            _mapper = mapper;
        }

        [HttpGet("getlist")]
        public async Task<IActionResult> GetVehicleList()
        {
            var query = new GetVehicleQuery();

            var vehicles = await _mediator.Send(query);

            return Ok(vehicles);

        }

        [HttpGet("getsimplevehiclelist")]
        public async Task<IActionResult> GetSimpleVehicleList()
        {
            var query = new GetSimpleVehicleQuery();
            var vehicles = await _mediator.Send(query);
            return Ok(vehicles);
        }

        [HttpPut("UpdateVehicle/{vehicleId}")]
        public async Task<IActionResult> UpdateVehicle(int vehicleId, [FromBody] VehicleViewModel model)
        {


            if (vehicleId != model.VehicleId)
            {
                Console.WriteLine("BadRequest: vehicleId does not match model.VehicleID");

                return BadRequest();
            }


           var command = _mapper.Map<UpdatevehicleCommand>(model);

            var result = await _mediator.Send(command);
           
            if(result)
            {
                return NoContent();
            }
            else
            {
                Console.WriteLine("NotFound: vehicle not updated");
                return NotFound();
            }

        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\VehicleManufacturerController.cs

﻿using FMS.Application.Queries.Database.VehicleManufacturer;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace FMS.WebClient.Controllers
{

    [ApiController]
    [Route("api/[controller]")]

    public class VehicleManufacturerController : ControllerBase
    {

        private readonly IMediator _mediator;

        public VehicleManufacturerController(IMediator mediator)
        {
            _mediator = mediator;
        }


        [HttpGet("getlist")]
        public async Task<IActionResult> GetVehicleManufacturer()
        {
            var query = new GetVehicleManufacturerQuery();
            var vehicleManufacturer= await _mediator.Send(query);

            return Ok(vehicleManufacturer);
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\VehicleModelController.cs

﻿using FMS.Application.Command.DatabaseCommand.VehicleModelCmd;
using FMS.Application.Models;
using FMS.Application.Queries.Database.VehicleModelQuery;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace FMS.WebClient.Controllers
{


    [ApiController]
    [Route("api/[controller]")]

    public class VehicleModelController : ControllerBase
    {


        private readonly IMediator _mediator;

        public VehicleModelController(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpGet("getlist")]
        public async Task<IActionResult> GetVehicleModel()
        {

            var query = new GetVehicleModelQuery();
            var vehicleModels = await _mediator.Send(query);
            return Ok(vehicleModels);

        }
        [HttpGet("GetVehicleModelsByManufacturerId/{manufacturerId}")]
        public async Task<ActionResult<List<VehicleModelDto>>> GetVehicleModelsByManufacturerId(int manufacturerId)
        {
            return await _mediator.Send(new GetVehicleModelsByManufacturerIdQuery { ManufacturerId = manufacturerId });
        }

        [HttpPost("CreateVehicleModel")]
        public async Task<ActionResult<int>> CreateVehicleModel(CreateVehicleModelCommand command)
        {
            int vehicleModelId = await _mediator.Send(command);
            return Ok(vehicleModelId);
        }




    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Controllers\VehicleTypeController.cs

﻿using FMS.Application.Queries.Database.VehicleTypeQuery;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace FMS.WebClient.Controllers
{

    [ApiController]
    [Route("api/[controller]")]
    public class VehicleTypeController : ControllerBase
    {
       private readonly IMediator _mediator;
        public VehicleTypeController(IMediator mediator)
        {
            _mediator = mediator;
        }
        [HttpGet("getlist")]
        public async Task<IActionResult> GetVehicleType()
        {
            var query = new GetVehicleTypeQuery();
            var vehicleTypes = await _mediator.Send(query);
            return Ok(vehicleTypes);
        }

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Helper\MessageHelper.cs

﻿using Newtonsoft.Json;

namespace FMS.WebClient.Helper
{
    public static  class MessageHelper
    {
        public static string CreateConfirmationMessage(string type, string message ="OK")
        {
            return JsonConvert.SerializeObject(new
            {
                Protocal = "jsonPTS",
                Packets = new[]
                {
                    new {Id=1,Type = type,Message = message }
                }
            });


        }

        public static string CreateErrorMessage(string type,int code, string message )
        {
            return JsonConvert.SerializeObject(new
            {
                Protocal = "jsonPTS",
                Packets = new[]
                {
                    new {Id=1,Type = type,Code =code,  Message = message }
                }
            });
        }

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\MappingProfile\VehicleMappingProfile.cs

﻿using AutoMapper;
using FMS.Application.Command.DatabaseCommand.ConsumptionCmd;
using FMS.Application.Command.DatabaseCommand.ConsumtionCmd.Update;
using FMS.Application.Command.DatabaseCommand.UpdateVehicle;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Domain.Entities;
using FMS.WebClient.Models.DatabaseViewModel;
using FMS.WebClient.Models.DatabaseViewModel.ExpectedViewModel;
using FMS.WebClient.Models.DatabaseViewModel.VehicleViewModel;

namespace FMS.WebClient.MappingProfile
{
    public class VehicleMappingProfile : Profile
    {

        public VehicleMappingProfile()
        {
            //create map for vehicle
            //map custom vehicleid to VehicleId

            CreateMap<Vehicle, VehicleViewModel>()
                .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId));


            CreateMap<VehicleViewModel, UpdatevehicleCommand>()
             .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
       .ForMember(dest => dest.HyoungNo, opt => opt.MapFrom(src => src.HyoungNo))
       .ForMember(dest => dest.VehicleTypeId, opt => opt.MapFrom(src => src.VehicleTypeId))
       .ForMember(dest => dest.VehicleModelId, opt => opt.MapFrom(src => src.VehicleModelId))
       .ForMember(dest => dest.VehicleManufacturerId, opt => opt.MapFrom(src => src.VehicleManufacturerId))
       .ForMember(dest => dest.Yom, opt => opt.MapFrom(src => src.Yom))
       .ForMember(dest => dest.ExpectedAveraged, opt => opt.MapFrom(src => src.WorkingExpectedAveraged))
       .ForMember(dest => dest.DefaultEmployeeId, opt => opt.MapFrom(src => src.DefaultEmployeeId))
       .ForMember(dest => dest.WorkingSiteId, opt => opt.MapFrom(src => src.WorkingSiteId))
       .ForMember(dest => dest.ExcessWorkingHrCost, opt => opt.MapFrom(src => src.ExcessWorkingHrCost))
       .ForMember(dest => dest.AverageKmL, opt => opt.MapFrom(src => src.AverageKmL));



            //expectedAverage
            CreateMap<ExpectedAVGDto, ExpectedAVGViewModel>()
                       .ForMember(dest => dest.ExpectedAverageValue, opt => opt.MapFrom(src => src.ExpectedAverageValue))
                       .ForMember(dest => dest.ExpectedAverageClassificationId, opt => opt.MapFrom(src => src.ExpectedAverageClassificationId))
                       .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
                       .ForMember(dest => dest.SiteId, opt => opt.MapFrom(src => src.SiteId)).ReverseMap();                       ;




            CreateMap<ConsumptionViewModel, ComsumptionUpdateCmd>()
              .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
              .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
              .ForMember(dest => dest.TotalFuel, opt => opt.MapFrom(src => src.TotalFuel))
              .ForMember(dest => dest.WorkingFuelAverage, opt => opt.MapFrom(src => src.WorkingFuelAverage))
              .ForMember(dest => dest.WorkingEmployee, opt => opt.MapFrom(src => src.WorkingEmployee))
              .ForMember(dest => dest.Date, opt => opt.MapFrom(src => src.Date))
              .ForMember(dest => dest.MaxSpeed, opt => opt.MapFrom(src => src.MaxSpeed))
              .ForMember(dest => dest.AvgSpeed, opt => opt.MapFrom(src => src.AvgSpeed))
              .ForMember(dest => dest.FuelLost, opt => opt.MapFrom(src => src.FuelLost))
              .ForMember(dest => dest.IsKmperhr, opt => opt.MapFrom(src => src.IsKmperhr))
              .ForMember(dest => dest.IsNightShift, opt => opt.MapFrom(src => src.IsNightShift))
              .ForMember(dest => dest.SiteID, opt => opt.MapFrom(src => src.SiteID))
              .ForMember(dest => dest.TotalDistance, opt => opt.MapFrom(src => src.TotalDistance))
              .ForMember(dest => dest.FlowMeterFuelUsed, opt => opt.MapFrom(src => src.FlowMeterFuelUsed))
              .ForMember(dest => dest.FlowMeterFuelLost, opt => opt.MapFrom(src => src.FlowMeterFuelLost))
              .ForMember(dest => dest.FlowMeterEffiency, opt => opt.MapFrom(src => src.FlowMeterEffiency))
              .ForMember(dest => dest.EngHours, opt => opt.MapFrom(src => src.EngHours))
              .ForMember(dest => dest.FlowMeterEngineHrs, opt => opt.MapFrom(src => src.FlowMeterEngineHrs))
              .ForMember(dest => dest.FuelEfficiency, opt => opt.MapFrom(src => src.FuelEfficiency))
              .ForMember(dest => dest.ExcessWorkingHrsCost, opt => opt.MapFrom(src => src.ExcessWorkingHrsCost));

            CreateMap<ConsumptionViewModel, ConsumptionCreateCmd>()
              .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
              .ForMember(dest => dest.TotalFuel, opt => opt.MapFrom(src => src.TotalFuel))
              .ForMember(dest => dest.WorkingFuelAverage, opt => opt.MapFrom(src => src.WorkingFuelAverage))
              .ForMember(dest => dest.WorkingEmployee, opt => opt.MapFrom(src => src.WorkingEmployee))
              .ForMember(dest => dest.Date, opt => opt.MapFrom(src => src.Date))
              .ForMember(dest => dest.MaxSpeed, opt => opt.MapFrom(src => src.MaxSpeed))
              .ForMember(dest => dest.AvgSpeed, opt => opt.MapFrom(src => src.AvgSpeed))
              .ForMember(dest => dest.FuelLost, opt => opt.MapFrom(src => src.FuelLost))
              .ForMember(dest => dest.IsKmperhr, opt => opt.MapFrom(src => src.IsKmperhr))
              .ForMember(dest => dest.IsNightShift, opt => opt.MapFrom(src => src.IsNightShift))
              .ForMember(dest => dest.SiteID, opt => opt.MapFrom(src => src.SiteID))
              .ForMember(dest => dest.TotalDistance, opt => opt.MapFrom(src => src.TotalDistance))
              .ForMember(dest => dest.FlowMeterFuelUsed, opt => opt.MapFrom(src => src.FlowMeterFuelUsed))
              .ForMember(dest => dest.FlowMeterFuelLost, opt => opt.MapFrom(src => src.FlowMeterFuelLost))
              .ForMember(dest => dest.FlowMeterEffiency, opt => opt.MapFrom(src => src.FlowMeterEffiency))
              .ForMember(dest => dest.EngHours, opt => opt.MapFrom(src => src.EngHours))
              .ForMember(dest => dest.FlowMeterEngineHrs, opt => opt.MapFrom(src => src.FlowMeterEngineHrs))
              .ForMember(dest => dest.ExcessWorkingHrsCost, opt => opt.MapFrom(src => src.ExcessWorkingHrsCost));
        
    }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Models\DatabaseViewModel\ConsumptionViewModel.cs

using System;
using System.Text.Json.Serialization;
namespace FMS.WebClient.Models.DatabaseViewModel;

public class ConsumptionViewModel
{

    [JsonPropertyName("id")]
    public int Id { get; set; } 

    [JsonPropertyName("vehicleId")]
    public int VehicleId { get; set; }


    [JsonPropertyName("totalFuel")]
    public decimal? TotalFuel { get; set; }

    [JsonPropertyName("workingExpectedAverage")]
    public int? WorkingFuelAverage { get; set; }


    [JsonPropertyName("FuelEfficiency")]
    public decimal? FuelEfficiency { get; set; }

    [JsonPropertyName("workingEmployeesID")]

    public int WorkingEmployee { get; set; }

    [JsonPropertyName("date")]

    public DateTime Date { get; set; }

    [JsonPropertyName("maxSpeed")]

    public decimal? MaxSpeed { get; set; }

    [JsonPropertyName("avgSpeed")]

    public decimal? AvgSpeed { get; set; }

    [JsonPropertyName("fuelLost")]

    public decimal? FuelLost { get; set; }

    [JsonPropertyName("isKmperhr")]

    public bool IsKmperhr { get; set; }

    [JsonPropertyName("isNightShift")]

    public bool IsNightShift { get; set; }

    [JsonPropertyName("workingSiteID")]
    public int SiteID { get; set; }

    [JsonPropertyName("totalDistance")]
    public decimal? TotalDistance { get; set; }

    [JsonPropertyName("flowMeterFuelUsed")]
    public decimal? FlowMeterFuelUsed { get; set; }

    [JsonPropertyName("flowMeterFuelLost")]
    public decimal? FlowMeterFuelLost { get; set; }

    [JsonPropertyName("flowMeterEffiency")]
    public decimal? FlowMeterEffiency { get; set; }

    [JsonPropertyName("engHours")]
    public decimal? EngHours { get; set; }

    [JsonPropertyName("flowMeterEngineHrs")]
    public decimal? FlowMeterEngineHrs { get; set; }

    [JsonPropertyName("excessWorkingHrsCost")]
    public decimal? ExcessWorkingHrsCost { get; set; }
    [JsonPropertyName("isModified")]
    public bool? isModified { get; set; }

}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Models\DatabaseViewModel\ExpectedViewModel\ExpectedAVGViewModel.cs

﻿using System.Text.Json.Serialization;

namespace FMS.WebClient.Models.DatabaseViewModel.ExpectedViewModel
{

    public class ExpectedAVGViewModel
    {
      

        [JsonPropertyName("expectedValue")]
        public decimal ExpectedAverageValue { get; set; }

        [JsonPropertyName("classification")]
        public int ExpectedAverageClassificationId { get; set; }

        [JsonPropertyName("vehicleId")]
        public int VehicleId { get; set; }

        [JsonPropertyName("workingSiteId")]
        public int? SiteId { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Models\DatabaseViewModel\VehicleViewModel\VehicleViewModel.cs

﻿using FMS.Domain.Entities;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace FMS.WebClient.Models.DatabaseViewModel.VehicleViewModel
{
    public class VehicleViewModel
    {
        [JsonPropertyName("vehicleId")]
        public int VehicleId { get; set; }

        [JsonPropertyName("hyoungNo")]
        public string? HyoungNo { get; set; }

        [JsonPropertyName("vehicleTypeId")]
        public int VehicleTypeId { get; set; }

        [JsonPropertyName("vehicleModelId")]
        public int? VehicleModelId { get; set; }

        [JsonPropertyName("vehicleManufacturerId")]
        public int? VehicleManufacturerId { get; set; }

        [JsonPropertyName("yom")]
        public string? Yom { get; set; }

        [JsonPropertyName("workingExpectedAveraged")]
        public decimal WorkingExpectedAveraged { get; set; }

        [JsonPropertyName("defaultEmployeeId")]
        public int? DefaultEmployeeId { get; set; }

        [JsonPropertyName("workingSiteId")]
        public int? WorkingSiteId { get; set; }

        [JsonPropertyName("excessWorkingHrCost")]
        public decimal? ExcessWorkingHrCost { get; set; }

        [JsonPropertyName("averageKmL")]
        public bool AverageKmL { get; set; }



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Pages\Error.cshtml.cs

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.Diagnostics;

namespace FMS.WebClient.Pages
{
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public class ErrorModel : PageModel
    {
        private readonly ILogger<ErrorModel> _logger;

        public ErrorModel(ILogger<ErrorModel> logger)
        {
            _logger = logger;
        }

        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

        public void OnGet()
        {
            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
        }
    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Signal\PtsStatusHub.cs

﻿using Microsoft.AspNetCore.SignalR;
using System.CodeDom;
namespace FMS.WebClient.Signal
{
    public class PtsStatusHub:Hub
    {

        private readonly PtsStatusService _statusService;

        public PtsStatusHub(PtsStatusService statusService)
        {
            _statusService = statusService;
        }
        public async Task SendStatusUpdate()
        {

            var status = _statusService.GetCurrentStatus();
            await Clients.All.SendAsync("ReceiveStatus", status);
        }



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/FMS.WebClient\Signal\PtsStatusService.cs

﻿using FMS.Domain.ATGStatus;
using System;

namespace FMS.WebClient.Signal;

public class PtsStatusService
{

    private UploadStatus? _currentStatus;

    public void UpdateStatus(UploadStatus status)
    {
        _currentStatus = status;
        // Consider triggering SignalR hub to send updates to clients
         
     }

    public UploadStatus GetCurrentStatus()
    {
        return _currentStatus;
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\.NETCoreApp,Version=v3.1.AssemblyAttributes.cs

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v3.1", FrameworkDisplayName = "")]


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\.NETCoreApp,Version=v6.0.AssemblyAttributes.cs

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v6.0", FrameworkDisplayName = "")]


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\.NETCoreApp,Version=v7.0.AssemblyAttributes.cs

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ComsumptionUpdate.cs

﻿using AutoMapper;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ConsumtionCmd.Update
{
    public class ComsumptionUpdateCmd : IRequest<Unit>
    {
        public int Id { get; set; }
        public int VehicleId { get; set; }
   
        public decimal? TotalFuel { get; set; }

        public int? WorkingFuelAverage { get; set; }

        public int WorkingEmployee { get; set; }

        public decimal? FuelEfficiency { get; set; }
        public DateTime Date { get; set; }
        public decimal? MaxSpeed { get; set; }
        public decimal? AvgSpeed { get; set; }
       public decimal? FuelLost { get; set; }

        public bool IsKmperhr { get; set; }

        public bool IsNightShift { get; set; }

        public int SiteID { get; set; }

        public decimal? TotalDistance { get; set; }

        public decimal? FlowMeterFuelUsed { get; set; }

        public decimal? FlowMeterFuelLost { get; set; }

        public decimal? FlowMeterEffiency { get; set; }

        public decimal? EngHours { get; set; }

        public decimal? FlowMeterEngineHrs { get; set; }

        public decimal? ExcessWorkingHrsCost { get; set; }
        public bool? isModified { get; set; }
    }


    public class ComsumptionUpdatebyKeyHandler : IRequestHandler<ComsumptionUpdateCmd,Unit>
    {


        private readonly GpsdataContext _gpsdataContext;
        private readonly IMapper _mapper;


        public ComsumptionUpdatebyKeyHandler(GpsdataContext gpsdataContext, IMapper mapper)
        {
            _gpsdataContext = gpsdataContext;
            _mapper = mapper;
        }


        public async  Task<Unit> Handle(ComsumptionUpdateCmd request, CancellationToken cancellationToken)
        {
            var comsumption = await _gpsdataContext.Vehicleconsumptions.FindAsync(request.Id);

            if(comsumption == null)
            {
                throw new Exception("Could not find the comsumption");
            }

            //map the request to the entity
            _mapper.Map(request, comsumption);

            //update the entity 
            await _gpsdataContext.SaveChangesAsync(cancellationToken);

            return Unit.Value;
 
      }

       
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ConsumptionCreateCmd.cs

using System;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;

namespace FMS.Application.Command.DatabaseCommand.ConsumptionCmd;

public class ConsumptionCreateCmd : IRequest<Unit>

{

    public int VehicleId { get; set; }

    public decimal? TotalFuel { get; set; }

    public int? WorkingFuelAverage { get; set; }

    public int WorkingEmployee { get; set; }

    public DateTime Date { get; set; }


    public decimal? MaxSpeed { get; set; }

    public decimal? AvgSpeed { get; set; }


    public decimal? FuelLost { get; set; }

    public bool IsKmperhr { get; set; }
    public bool IsNightShift { get; set; }

    public int SiteID { get; set; }

    public decimal? TotalDistance { get; set; }

    public decimal? FlowMeterFuelUsed { get; set; }

    public decimal? FlowMeterFuelLost { get; set; }

    public decimal? FlowMeterEffiency { get; set; }

    public decimal? EngHours { get; set; }

    public decimal? FlowMeterEngineHrs { get; set; }

    public decimal? ExcessWorkingHrsCost { get; set; }


}


public class ConsumptionCmdCreateHandler : IRequestHandler<ConsumptionCreateCmd, Unit>

{

    private readonly GpsdataContext _context;
    private readonly IMapper _mapper;


    public ConsumptionCmdCreateHandler(GpsdataContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;

    }



    public async Task<Unit> Handle(ConsumptionCreateCmd request, CancellationToken cancellationToken)
    {
        var vehicleConsumption = new Vehicleconsumption
        {
            VehicleId = request.VehicleId,
            TotalFuel = request.TotalFuel,
            ExpectedConsumption = request.WorkingFuelAverage,
            EmployeeId = request.WorkingEmployee,
            Date = request.Date,
            MaxSpeed = request.MaxSpeed,
            AvgSpeed = request.AvgSpeed,
            FuelLost = request.FuelLost,
            IsKmperhr = request.IsKmperhr ? 1UL : 0UL,
            IsNightShift = request.IsNightShift ? 1UL : 0UL,
            SiteId = request.SiteID,
            TotalDistance = request.TotalDistance,
            FlowMeterFuelUsed = request.FlowMeterFuelUsed,
            FlowMeterFuelLost = request.FlowMeterFuelLost,
            FlowMeterEffiency = request.FlowMeterEffiency,
            EngHours = request.EngHours,
            FlowMeterEngineHrs = request.FlowMeterEngineHrs,
            ExcessWorkingHrsCost = request.ExcessWorkingHrsCost
        };

        _context.Vehicleconsumptions.Add(vehicleConsumption);
        await _context.SaveChangesAsync(cancellationToken);

        return Unit.Value;

    }
}

//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\CreateVehicleModelCommand.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.VehicleModelCmd
{
    public class CreateVehicleModelCommand : IRequest<int>
    {
        // Add properties for each required field in your vehicle model entity
        public string Name { get; set; }
        public int ManufacturerId { get; set; }
    }
    public class CreateVehicleModelCommandHandler : IRequestHandler<CreateVehicleModelCommand, int>
    {
        private readonly GpsdataContext _context;

        public CreateVehicleModelCommandHandler(GpsdataContext context)
        {
            _context = context;
        }

        public async Task<int> Handle(CreateVehicleModelCommand request, CancellationToken cancellationToken)
        {
            var vehicleModel = new Vehiclemodel
            {
                Name = request.Name,
                ManufacturerId = request.ManufacturerId,
                // Set other properties as needed
            };

            _context.Vehiclemodels.Add(vehicleModel);
            await _context.SaveChangesAsync(cancellationToken);

            return vehicleModel.Id;
        }
    }



}



//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\EmployeeCreateCmd.cs

﻿using AutoMapper;
using FMS.Application.Models.Employee;
using FMS.Application.Models.Vehicle;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.EmployeeCmd
{
    public class EmployeeCreateCmd:IRequest<int>
    {
        public EmployeeDto EmployeeDto { get; set; } 
    }

    public class EmployeeCreateCmdHandler : IRequestHandler<EmployeeCreateCmd, int>
    {
        private readonly GpsdataContext context;
        private readonly IMapper _mapper;

        public EmployeeCreateCmdHandler(GpsdataContext context, IMapper mapper)
        {
            this.context = context;
            _mapper = mapper;
        }


        public Task<int> Handle(EmployeeCreateCmd request, CancellationToken cancellationToken)
        {
           var employee= _mapper.Map<Employee>(request.EmployeeDto);


            foreach (var vehicle in request.EmployeeDto.Vehicles)
            {
                var result = context.Vehicles.Find(vehicle.VehicleId);
                if (result != null)
                {
                    employee.Vehicles.Add(result);
                }
            }
            context.Employees.Add(employee);
            context.SaveChanges();
            return Task.FromResult(employee.Id);

        }
    }





}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\EmployeeDTO.cs

﻿#nullable disable
using FMS.Application.Models.Vehicle;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.Models.Employee
{
    public class EmployeeDto
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("fullName")]
        public string FullName { get; set; }

        [JsonPropertyName("employeeWorkNo")]
        public string EmployeeWorkNo { get; set; } = string.Empty;

        [JsonPropertyName("employeephoneNumber")]
        public string EmployeephoneNumber { get; set; } = string.Empty;

        [JsonPropertyName("nationalId")]
        public long? NationalId { get; set; }

        [JsonPropertyName("employeestatus")]
        public string Employeestatus { get; set; } = "Active";

        [JsonPropertyName("siteId")]
        public int? SiteId { get; set; }

        //<todo> this is wrong: change from SimplevehicleDto to Vehicle
        //</todo>
        /// <summary>
        /// this is wrong
        /// </summary>
        [JsonPropertyName("vehicles")]
        public ICollection<SimpleVehicleDto> Vehicles { get; set; } = new List<SimpleVehicleDto>();
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\EmployeeUpdateCmd.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using FMS.Application.Models.Employee;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace FMS.Application.Command.DatabaseCommand.EmployeeCmd
{
    public class EmployeeUpdateCmd : IRequest<bool>
    {
        public int ID { get; set; }
        public EmployeeDto EmployeeDto { get; set; }
    }
    public class EmployeeUpdateCmdHandler : IRequestHandler<EmployeeUpdateCmd, bool>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public EmployeeUpdateCmdHandler(GpsdataContext context,IMapper mapper)
        {
            _context = context;

            _mapper = mapper;
        }

        public async Task<bool> Handle(EmployeeUpdateCmd request, CancellationToken cancellationToken)
        {
            var employee = await _context.Employees.Include(e=>e.Vehicles)
                .FirstOrDefaultAsync(e=>e.Id == request.EmployeeDto.Id,cancellationToken);

            if (employee == null)
            {
                return false;
            }

            //use mapper fpr EmployeeDTo to Employee

            _mapper.Map(request.EmployeeDto,employee);



            employee.Vehicles.Clear();

            foreach(var vehicle in request.EmployeeDto.Vehicles)
            {
                var result = await _context.Vehicles.FindAsync(vehicle.VehicleId);
                if(result != null)
                {
                    employee.Vehicles.Add(result);
                }
            }

            _context.Employees.Update(employee);




            await _context.SaveChangesAsync(cancellationToken);

            return true;
            }
    }



}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ExpctAVGClassficationDTO.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.Models
{
    public class ExpectedAVGClassficationDTO
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("description")]
         public string Description { get; set; } = string.Empty;


    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ExpectedAVGClassificationUpdateCmd.cs

﻿using AutoMapper;
using FMS.Application.Common;
using FMS.Application.Models;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ExptAVGClassification
{
    public class ExpectedAVGClassificationUpdateCmd :IRequest<int>
    {

        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;

    }

    public class ExpectedAVGClassificationUpdateCmdHandler : IRequestHandler<ExpectedAVGClassificationUpdateCmd, int>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public ExpectedAVGClassificationUpdateCmdHandler(GpsdataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<int> Handle(ExpectedAVGClassificationUpdateCmd request, CancellationToken cancellationToken)
        {
            var entity = await _context.Expectedaverageclassifications.FindAsync(request.Id, cancellationToken);

            if (entity == null)
            {
                throw new NotFoundException(nameof(Expectedaverageclassification), request.Id);
            }

            entity.Name = request.Name;
            entity.Description = request.Description;
            _context.Expectedaverageclassifications.Update(entity);
            await _context.SaveChangesAsync(cancellationToken);

            return entity.Id;
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ExpectedAVGCreateCmd.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ExpectedAVGCmd
{
    public class ExpectedAVGCreateCmd : IRequest<List<ExpectedAVGDto>>
    {

        public List<ExpectedAVGDto> ExpectedAVGDto { get; set; }
    }

    public class ExpectedAVGCreateCmdHandler : IRequestHandler<ExpectedAVGCreateCmd, List<ExpectedAVGDto>>
    {
        private readonly GpsdataContext context;

        private readonly IMapper _mapper;
        public ExpectedAVGCreateCmdHandler(GpsdataContext context, IMapper mapper)
        {
            this.context = context;
            _mapper = mapper;
        }

        public async Task<List<ExpectedAVGDto>> Handle(ExpectedAVGCreateCmd request, CancellationToken cancellationToken)
        {
            var expectedAVGs = _mapper.Map<List<Expectedaverage>>(request.ExpectedAVGDto);
            var createdExpectedAVGs = new List<ExpectedAVGDto>();

            foreach (var expectedAVG in expectedAVGs)
            {
                try
                {
                    context.Expectedaverages.Add(expectedAVG);
                    await context.SaveChangesAsync(cancellationToken);
                    createdExpectedAVGs.Add(_mapper.Map<ExpectedAVGDto>(expectedAVG));
                }
                catch (DbUpdateException ex)
                when (ex.InnerException is MySqlException mysqlEx && mysqlEx.Number == 1062)
                {
                    throw new Exception("The vehicle selected already has an expected average for the site", ex);
                }
            }

            return createdExpectedAVGs;
        }

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ExpectedAVGDto.cs

﻿using FMS.Application.Models.Vehicle;
using FMS.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.ModelsDTOs.ExpectedAVG
{
    public class ExpectedAVGDto
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("ExpectedAverage1")]
        public decimal ExpectedAverage1 { get; set; }

        [JsonPropertyName("expectedAverageClassificationId")]
        public int ExpectedAverageClassificationId { get; set; }

        [JsonPropertyName("vehicleId")]
        public int VehicleId { get; set; }

        [JsonPropertyName("site")]
        public int? SiteId { get; set; }



    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ExpectedAVGUpdateCmd.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ExpectedAVGCmd
{
    public class ExpectedAVGUpdateCmd : IRequest<bool>
    {
        public int Id { get; set; }

        public  ExpectedAVGDto ExpectedAVGDto { get; set; }
    }

    public class ExpectedAVGUpdateCmdHandler : IRequestHandler<ExpectedAVGUpdateCmd, bool>
    {

        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;
        

        public ExpectedAVGUpdateCmdHandler(GpsdataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<bool> Handle(ExpectedAVGUpdateCmd request, CancellationToken cancellationToken)
        {
            //find  exsisting record
            var results = await _context.Expectedaverages.FindAsync(request.Id,cancellationToken);
                
            if (results == null)
            {
                return false;
            }
                
            //user mapper for ExpectedAVGDto to ExpectedAVG
            _mapper.Map(request.ExpectedAVGDto, results);
            

            _context.Expectedaverages.Update(results);
            try
            {
                await _context.SaveChangesAsync(cancellationToken);
            }catch (DbUpdateException ex)
            {
                throw;
            }
            return true;
        }
    }
}




//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ExpectedAVGVehicleDetailsDTO.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.ModelsDTOs.ExpectedAVG
{
    public class ExpectedAVGVehicleDetailsDTO
    {

        public int id { get; set; }
        public string HyoungNo { get; set; } = null!;

        public int? vehicleID { get; set; }

        public int? expectedAverageClassificationId { get; set; } 

        public string expectedAverageClassificationName { get; set; } = null!;

        public decimal expectedAveragevalue { get; set; }
        public int? siteId { get; set; }

        public string site { get; set; } = null!;

        public string vehicleModel { get; set; } = null!;

        public string vehicleManufacturer { get; set; } = null!;
        public string vehicleType { get; set; } =   null!;

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ExptAVGClassificationCreateCmd.cs

﻿using AutoMapper;
using FMS.Application.Models;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.ExptAVGClassification
{
    public class ExptAVGClassificationCreateCmd : IRequest<ExpectedAVGClassficationDTO>
    {

        public ExpectedAVGClassficationDTO ExpctAVGClassficationDTO { get; set; }
    }

    public class ExptAVGClassificationCreateCmdHandler : IRequestHandler<ExptAVGClassificationCreateCmd, ExpectedAVGClassficationDTO>
    {
        private readonly GpsdataContext context;

        private readonly IMapper _mapper;
        public ExptAVGClassificationCreateCmdHandler(GpsdataContext context, IMapper mapper)
        {
            this.context = context;
            _mapper = mapper;
        }


        public async Task<ExpectedAVGClassficationDTO> Handle(ExptAVGClassificationCreateCmd request, CancellationToken cancellationToken)
        {
            var expectedAVGclassfication = _mapper.Map<Expectedaverageclassification>(request.ExpctAVGClassficationDTO);
            context.Expectedaverageclassifications.Add(expectedAVGclassfication);
            await context.SaveChangesAsync(cancellationToken);
            return _mapper.Map<ExpectedAVGClassficationDTO>(expectedAVGclassfication);
        }
    }
}
    


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\FMS.Application.AssemblyInfo.cs

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("FMS.Application")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("FMS.Application")]
[assembly: System.Reflection.AssemblyTitleAttribute("FMS.Application")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.



//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetConsumptionReportQuery.cs

﻿using FMS.Application.Models;
using FMS.Domain.Entities;
using FMS.Domain.Entities.Auth;
using MediatR;
using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Application.Queries.GPSGATEServer.GetconsumptionReport
{
    public class GetConsumptionReportQuery : IRequest<List<VehicleConsumptionInfoDTO>>
    {
        public GetConsumptionReportQuery(GPSGateConections conn, int fuelConsumptionReportId, DateTime from, DateTime to)
        {
            this.conn = conn;
            FuelConsumptionReportId = fuelConsumptionReportId;
            From = from;
            To = to;
        }

        public GPSGateConections conn { get; set; }

        public int? FuelConsumptionReportId { get; set; }


        public DateTime From { get; set; }

        public DateTime To { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetConsumptionReportQueryHandler.cs

﻿using AutoMapper;
using AutoMapper.Configuration.Annotations;
using FMS.Application.Models;
using FMS.Application.Models.Employee;
using FMS.Domain.Entities;
using FMS.Domain.Entities.Common;
using FMS.Infrastructure.DependancyInjection;
using FMS.Infrastructure.Webservice;
using FMS.Persistence.DataAccess;
using FMS.Services.Model;
using MediatR;
using Microsoft.AspNetCore.Server.IIS.Core;
using Microsoft.EntityFrameworkCore;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;


namespace FMS.Application.Queries.GPSGATEServer.GetconsumptionReport;

    public class GetConsumptionReportQueryHandler : IRequestHandler<GetConsumptionReportQuery, List<VehicleConsumptionInfoDTO>>
    {

        private readonly IGPSGateDirectoryWebservice _gpsGateDirectoryWebservice;
        private readonly GpsdataContext _Context;
        private readonly IMapper _mapper;

        public GetConsumptionReportQueryHandler(IGPSGateDirectoryWebservice gPSGateDirectoryWebservice, GpsdataContext gpsdataContext,IMapper mapper)
        {
            _gpsGateDirectoryWebservice = gPSGateDirectoryWebservice;
            _Context = gpsdataContext;
            _mapper = mapper;
        }

    /// <summary>
    /// Fa
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task<List<VehicleConsumptionInfoDTO>> Handle(GetConsumptionReportQuery request, CancellationToken cancellationToken)
    {
        //get the consumption report from GPSGate server
        var (consumptionReport,vehicles) = await FetchDataAsync(request);

        //process the data to be saved in the database
        var VehicleconsumptionBatch  = ProcessData(consumptionReport, vehicles);

        //save the data to the database
        await SaveData(VehicleconsumptionBatch, request, cancellationToken);

        return await ReturnResults(request);


    }

    /// <summary>
    /// Get or fetch consumption report from GPSGate server
    /// </summary>
    /// <param name="request"></param>
    /// <returns> A list of Vehicle Consumption </returns>
    /// <exception cref="ArgumentNullException"></exception>
    private async Task<(IEnumerable<VehicleConsumptionServiceModel>, List<Vehicle>)> FetchDataAsync(GetConsumptionReportQuery request)
    {
       var consumptionReport = await _gpsGateDirectoryWebservice.GetFuelConsumptionReportAsync(request.conn, request.FuelConsumptionReportId.Value, request.From, request.To);
       

        if(consumptionReport == null) throw new ArgumentNullException(nameof(consumptionReport));
     
        var vehicleIds = consumptionReport.Select(x => x.VehicleId).ToList();
        var vehicles = await _Context.Vehicles.Where(x => vehicleIds.Contains(x.VehicleId)).ToListAsync();
        if (vehicles == null) throw new ArgumentNullException(nameof(vehicles));

        return (consumptionReport,vehicles);

    }
    /// <summary>
    /// Convert the consumption report from GPSGate server to Vehicle Consumption to be saved in the database
    /// </summary>
    /// <param name="VCconsumptionReports">Processed  data from vehicle consumption Service model . Any changes to be doone here  </param>
    /// <param name="vehicles"></param>
    /// <returns></returns>
    private List<Vehicleconsumption> ProcessData(IEnumerable<VehicleConsumptionServiceModel> VCconsumptionReports ,List<Vehicle> vehicles)
    {

        var vehicleConsumptionBatch = new List<Vehicleconsumption>();

        foreach (var VCserviceModel in VCconsumptionReports)
        {

             var vehicle = vehicles.FirstOrDefault(v => v.VehicleId == VCserviceModel.VehicleId);

            if(vehicle != null)
            {
                var savedConsumption = new Vehicleconsumption
                {
                    VehicleId = vehicle.VehicleId,
                    SiteId = 1,
                    Date = VCserviceModel.Date,
                    MaxSpeed = VCserviceModel.MaxSpeed,
                    AvgSpeed = VCserviceModel.AvgSpeed,
                    ExpectedConsumption = 0,
                    TotalDistance = VCserviceModel.TotalDistance,
                    EmployeeId = 28459,
                    Comments = "Demo data",
                    FuelLost = VCserviceModel.FuelLost,
                    FuelEfficiency = 0,
                    TotalFuel = VCserviceModel.TotalFuel,
                    FlowMeterFuelUsed = VCserviceModel.FlowMeterFuelUsed,
                    FlowMeterFuelLost = 0,
                    FlowMeterEffiency = 0,
                    EngHours = VCserviceModel.EngHours,
                    FlowMeterEngineHrs = VCserviceModel.FlowMeterEngineHrs,
                    ExcessWorkingHrsCost = 0,
                    IsNightShift = 0,
                    IsKmperhr = vehicle.AverageKmL ? 1UL : 0UL,
                    ModifiedBy = 1,
                    ModifiedDate = DateTime.Now,
                    IsModified = 0
                };

                //check if there is duplicate from the data fetched from GPSGate server : highly unlikely but just in case
                var duplicateInBatch = vehicleConsumptionBatch.FirstOrDefault(vc =>
                       vc.VehicleId == savedConsumption.VehicleId && vc.Date.Date == savedConsumption.Date.Date);

                if (duplicateInBatch == null)
                {
                    vehicleConsumptionBatch.Add(savedConsumption);
                }
            }


        }

        return vehicleConsumptionBatch;

    }

   /// <summary>
   ///  Save the data to the database and check for duplicates
   /// </summary>
   /// <param name="vehicleConsumptionBatch">Vehicle batch from GPSGate </param>
   /// <param name="results">User Parameter</param>
   /// <param name="cancellationToken"></param>
   /// <returns></returns>
    private async Task SaveData(List<Vehicleconsumption> vehicleConsumptionBatch , GetConsumptionReportQuery results , CancellationToken cancellationToken)
    {

        var relevantData = await _Context.Vehicleconsumptions.Where(v => v.Date.Date >= results.From.Date && v.Date.Date <= results.To.Date).ToListAsync(cancellationToken);

        //check for duplicates
        foreach(var consumption in vehicleConsumptionBatch)
        {
            var isAlreadySaved = relevantData.Any(v => v.VehicleId == consumption.VehicleId && v.Date.Date == consumption.Date.Date && v.IsNightShift == consumption.IsNightShift);

            if(!isAlreadySaved)
            {
                _Context.Vehicleconsumptions.Add(consumption);

                await _Context.SaveChangesAsync(cancellationToken);

            }
        }
      }

    /// <summary>
    /// Return the result to the user
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    /// <exception cref="ArgumentNullException"></exception>
     private async Task<List<VehicleConsumptionInfoDTO>> ReturnResults (GetConsumptionReportQuery request)
    {

        var vehicleConsumptionData = await _Context.Vehicleconsumptions
                                      .Include(v => v.Vehicle)
                                      .Include(v=>v.Vehicle.VehicleManufacturer)
                                      .Include(v=>v.Vehicle.VehicleModel)
                                      .Include(v=>v.Vehicle.VehicleType)
                                      .Include(v=>v.Site)
                                      .Include(v=>v.Employee)
                                     .Where(v => v.Date.Date >= request.From.Date && v.Date.Date <= request.To.Date && v.IsModified == 0).ToListAsync();

        if(vehicleConsumptionData.Count == 0) throw new ArgumentNullException(nameof(vehicleConsumptionData));

        return vehicleConsumptionData.Select(v=> _mapper.Map<VehicleConsumptionInfoDTO>(v)).ToList();
    }


    }





    





//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetEmployee.cs

﻿using Autofac.Features.ResolveAnything;
using AutoMapper;
using FMS.Application.Models.Employee;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.EmployeeQuery
{
    public class GetEmployeeQuery:IRequest<List<EmployeeDto>>
    {

    }
    /// <summary>
    /// Get all active employees
    /// </summary>
    public class GetEmployeeHandler : IRequestHandler<GetEmployeeQuery, List<EmployeeDto>>
    {

        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;
        public GetEmployeeHandler(GpsdataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }

        /// <summary>
        /// Return all active employees
        /// </summary>
        /// <param name="request"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public async Task<List<EmployeeDto>> Handle(GetEmployeeQuery request, CancellationToken cancellationToken)
        {
            var employees= await _context.Employees
                .Include(e => e.Vehicles)
                .Where(e => e.Employeestatus == "Active")
                .ToListAsync(cancellationToken);

            return _mapper.Map<List<EmployeeDto>>(employees);

        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetEmployeeByIdQuery.cs

﻿using AutoMapper;
using FMS.Application.Models.Employee;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.EmployeeQuery
{
    public class GetEmployeeByIdQuery :IRequest<EmployeeDto>

    {
        public int Id { get; set; }
    }

    public class GetEmployeeByIdQueryHandler : IRequestHandler<GetEmployeeByIdQuery, EmployeeDto>
    {
        private readonly IMapper _mapper;
        private readonly GpsdataContext _context;

        public GetEmployeeByIdQueryHandler(IMapper mapper, GpsdataContext context)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<EmployeeDto> Handle(GetEmployeeByIdQuery request, CancellationToken cancellationToken)
        {
            var result = await _context.Employees
                .Include(e=>e.Vehicles)
                .FirstOrDefaultAsync(e=>e.Id==request.Id,cancellationToken);


            if (result == null)
            {
                return null;
            }
            var employeeDto = _mapper.Map<EmployeeDto>(result);
            return employeeDto;
        }


    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetExpectAVGClassificationlist.cs

﻿using AutoMapper;
using FMS.Application.Models;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.ExpectedAvg
{
    public class GetExpectAVGClassificationlist:IRequest<List<ExpectedAVGClassficationDTO>>
    {

    }

    public class GetExpectAVGClassificationlistHandler : IRequestHandler<GetExpectAVGClassificationlist, List<ExpectedAVGClassficationDTO>>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper; 

        public GetExpectAVGClassificationlistHandler(GpsdataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }


        public async Task<List<ExpectedAVGClassficationDTO>> Handle(GetExpectAVGClassificationlist request, CancellationToken cancellationToken)
        {

            var results = await _context.Expectedaverageclassifications.ToListAsync(cancellationToken);

            return _mapper.Map<List<ExpectedAVGClassficationDTO>>(results);
       
        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetExpectedAverageByVehicleBySite.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.ExpectedAvg
{
    public class GetExpectedAverageByVehicleBySite :IRequest<List<ExpectedAVGDto>>
    {
        public int VehicleId { get; set; }
        public int SiteId { get; set; }
    }


    public class GetExpectedAverageByVehicleBySiteHandler : IRequestHandler<GetExpectedAverageByVehicleBySite, List<ExpectedAVGDto>>
    {
       
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public GetExpectedAverageByVehicleBySiteHandler(GpsdataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }
        public async Task < List<ExpectedAVGDto>> Handle(GetExpectedAverageByVehicleBySite request, CancellationToken cancellationToken)
        {
         var result = await _context.Expectedaverages
                .Include(e => e.Vehicle)
                .Where(e => e.VehicleId == request.VehicleId && e.SiteId == request.SiteId)
                .ToListAsync(cancellationToken);
            return _mapper.Map<List<ExpectedAVGDto>>(result);

        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetExpectedAVGByIdQuery.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.ExpectedAvg
{
    public class GetExpectedAVGByIdQuery :IRequest<ExpectedAVGDto>
    {
        public  int  Id { get; set; }
    }

    public class GetExpectedAVGbyIdQueryHandler : IRequestHandler<GetExpectedAVGByIdQuery, ExpectedAVGDto>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;
        public GetExpectedAVGbyIdQueryHandler(GpsdataContext context , IMapper mapper)
        {
           _mapper= mapper;
            _context = context; 
        }
        public async Task<ExpectedAVGDto> Handle(GetExpectedAVGByIdQuery request, CancellationToken cancellationToken)
        {
            var result = await _context.Expectedaverages
                .Include(e=>e.Vehicle)
                .FirstOrDefaultAsync(e=>e.Id==request.Id,cancellationToken);
            return _mapper.Map<ExpectedAVGDto>(result);
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetExpectedAVGQuery.cs

﻿using AutoMapper;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.ExpectedAvg
{
    public class GetExpectedAVGQuery : IRequest<List<ExpectedAVGVehicleDetailsDTO>>
    {
    }


    public class GetExpectedAVGQueryHandler : IRequestHandler<GetExpectedAVGQuery, List<ExpectedAVGVehicleDetailsDTO>>
    {
        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;
        public GetExpectedAVGQueryHandler(GpsdataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }
        public async Task<List<ExpectedAVGVehicleDetailsDTO>> Handle(GetExpectedAVGQuery request, CancellationToken cancellationToken)
        {

            var result = await _context.Expectedaverages.
                                   Include(x => x.Vehicle).
                                   Include(x => x.Vehicle.VehicleManufacturer).
                                   Include(x => x.Vehicle.VehicleModel).
                                   Include(x => x.Vehicle.VehicleType).
                                   Include(x => x.Vehicle.WorkingSite).
                                   Select(item => new ExpectedAVGVehicleDetailsDTO
                                   {                                              
                                    id = item.Id,
                                    vehicleID = item.VehicleId,
                                    vehicleModel = item.Vehicle.VehicleModel.Name,
                                    vehicleManufacturer = item.Vehicle.VehicleManufacturer.Name,
                                    vehicleType = item.Vehicle.VehicleType.Name,
                                    HyoungNo = item.Vehicle.HyoungNo,
                                    expectedAverageClassificationId = item.ExpectedAverageClassificationId,
                                    siteId= item.SiteId,
                                    site = item.Vehicle.WorkingSite.Name,
                                    expectedAverageClassificationName = item.ExpectedAverageClassification.Name,
                                    expectedAveragevalue = item.ExpectedAverage1
                                    
                                    }).
                                   ToListAsync(cancellationToken);
       return result;

          
        }
}
   
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetSimpleVehicleQuery.cs

﻿using AutoMapper;
using FMS.Application.Models.Vehicle;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleQuery
{
    public class GetSimpleVehicleQuery: IRequest<List<SimpleVehicleDto>>
    {

    }

    public class GetSimpleVehicleQueryHandler : IRequestHandler<GetSimpleVehicleQuery, List<SimpleVehicleDto>>
    {
        private readonly IMapper _mapper;
        private readonly GpsdataContext _context;

        public GetSimpleVehicleQueryHandler(IMapper mapper, GpsdataContext context)
        {
            _mapper = mapper;
            _context = context;
        }



        public async Task<List<SimpleVehicleDto>> Handle(GetSimpleVehicleQuery request, CancellationToken cancellationToken)
        {
            var results = await _context.Vehicles.ToListAsync(cancellationToken);

            return _mapper.Map<List<SimpleVehicleDto>>(results);

        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetSiteQuery.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.SiteQuery
{
    public class GetSiteQuery : IRequest<List<Site>>

    {
        public GetSiteQuery()
        {
        }
    }

    public class GetSiteQueryHandler : IRequestHandler<GetSiteQuery, List<Site>>
    {


        private readonly GpsdataContext _context;

        public GetSiteQueryHandler(GpsdataContext context)
        {
            _context = context;
        }


        public async Task<List<Site>> Handle(GetSiteQuery request, CancellationToken cancellationToken)
        {
            return await _context.Sites.ToListAsync(cancellationToken);
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetVehicleManufacturer.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleManufacturer
{
    public class GetVehicleManufacturerQuery:IRequest<List<Vehiclemanufacturer>>
    {
    }

    public class GetVehicleManufacturerHandler:IRequestHandler<GetVehicleManufacturerQuery, List<Vehiclemanufacturer>>
    {
        private readonly GpsdataContext _context;
        public GetVehicleManufacturerHandler(GpsdataContext context)
        {
            _context = context;
        }
        public async Task<List<Vehiclemanufacturer>> Handle(GetVehicleManufacturerQuery request, CancellationToken cancellationToken)
        {
            return await _context.Vehiclemanufacturers.ToListAsync(cancellationToken);
        }
    }

    
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetVehicleModelQuery.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleModelQuery
{
    public class GetVehicleModelQuery:IRequest<List<Vehiclemodel>>
    {
    }


    public class GetVehicleModelQueryHandler:IRequestHandler<GetVehicleModelQuery, List<Vehiclemodel>>
    {
        private readonly GpsdataContext _context;
        public GetVehicleModelQueryHandler(GpsdataContext context)
        {
            _context = context;
        }
        public async Task<List<Vehiclemodel>> Handle(GetVehicleModelQuery request, CancellationToken cancellationToken)
        {
            return await _context.Vehiclemodels.ToListAsync(cancellationToken);
        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetVehicleModelsByManufacturerIdQuery.cs

﻿using AutoMapper;
using FMS.Application.Models;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleModelQuery
{
    public class GetVehicleModelsByManufacturerIdQuery : IRequest<List<VehicleModelDto>>
    {
        public int ManufacturerId { get; set; }
    }

    public class GetVehicleModelsByManufacturerIdQueryHandler : IRequestHandler<GetVehicleModelsByManufacturerIdQuery, List<VehicleModelDto>>
    {
        private readonly IMapper _mapper;
        private readonly GpsdataContext _context;

        public GetVehicleModelsByManufacturerIdQueryHandler(IMapper mapper, GpsdataContext context)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<List<VehicleModelDto>> Handle(GetVehicleModelsByManufacturerIdQuery request, CancellationToken cancellationToken)
        {
            var vehicleModels = await _context.Vehiclemodels
                .Where(vm => vm.ManufacturerId == request.ManufacturerId)
                .ToListAsync(cancellationToken);

            return _mapper.Map<List<VehicleModelDto>>(vehicleModels);
        }
    }









}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetVehicleQuery.cs

﻿using FMS.Application.Models.Vehicle;
using FMS.Domain.Entities;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleQuery
{
    public class GetVehicleQuery:IRequest<List<VehicleListDTO>>
    {
            
      
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetVehicleQueryHandler.cs

﻿using AutoMapper;
using AutoMapper.QueryableExtensions;
using FMS.Application.Models.Vehicle;
using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleQuery
{

    public class GetVehicleQueryHandler: IRequestHandler<GetVehicleQuery, List<VehicleListDTO>>
    {

        private readonly GpsdataContext _context;
        private readonly IMapper _mapper;

        public GetVehicleQueryHandler(GpsdataContext context,IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<List<VehicleListDTO>> Handle(GetVehicleQuery request, CancellationToken cancellationToken)
        {
            return await  _context.Vehicles.ProjectTo<VehicleListDTO>(_mapper.ConfigurationProvider).ToListAsync(cancellationToken);
          
        }

   
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\GetVehicleTypeQuery.cs

﻿using FMS.Domain.Entities;
using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.Database.VehicleTypeQuery
{
    public class GetVehicleTypeQuery:IRequest<List<Vehicletype>>
    {

    }

    public class GetVehicleTypeQueryHandler:IRequestHandler<GetVehicleTypeQuery, List<Vehicletype>>
    {
        private readonly GpsdataContext _context;
        public GetVehicleTypeQueryHandler(GpsdataContext context)
        {
            _context = context;
        }
        public async Task<List<Vehicletype>> Handle(GetVehicleTypeQuery request, CancellationToken cancellationToken)
        {
            return await _context.Vehicletypes.ToListAsync(cancellationToken);
        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ICommand.cs

﻿using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Application.Common.Interface
{
    public interface ICommand
    {
        
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\ICommandhandler.cs

﻿using FMS.Application.Common.Interface;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Common.Interfacehandler
{
    public interface ICommandHandler<TCommand> where TCommand : ICommand
    {
        Task HandleAsync(TCommand command);
    }

}



//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\IGpsGateAccessDirectory.cs

﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.CommonInterface
{
    public interface IGpsGateAccessDirectory
    {

        public Task<string> LoginAsync(string userName, string password, int applicationID);

    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\IQuery.cs

﻿using System;
using System.Collections.Generic;
using System.Text;

namespace FMS.Application.Common.Interface
{
    public interface IQuery <TResult>
    {
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\IQueryHandler.cs

﻿using FMS.Application.Common.Interface;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Common.Interfacehandler
{
    public interface IQueryHandler<TQuery, TResult> where TQuery : IQuery<TResult>
    {
        Task<TResult> Handle(TQuery query);
    }
   
    }


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\LoginQuery.cs

﻿using FMS.Domain.Entities.Auth;
using FMS.Infrastructure.DependancyInjection;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Queries.GPSGATEServer.LoginQuery
{
    /// <summary>
    /// To login in to the GPSGate server
    /// </summary>
    public  class LoginQuery : IRequest<GPSGateConections>
    {

   public GPSGateConections GPSGateConections { get; set; }

    }

    /// <summary>
    /// Login Query Handler 
    /// </summary>
    public class LoqinQuery: IRequestHandler<LoginQuery, GPSGateConections>
    {

        private readonly IGPSGateDirectoryWebservice _gpsGateDirectoryWebservice;

        public LoqinQuery(IGPSGateDirectoryWebservice gPSGateDirectoryWebservice)
        {
            _gpsGateDirectoryWebservice = gPSGateDirectoryWebservice;
        }

        /// <summary>
        /// To login in to the GPSGate server
        /// </summary>
        /// <param name="request"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>GPSConnections information conns</returns>
             public async Task<GPSGateConections> Handle(LoginQuery request, CancellationToken cancellationToken)
        {
            var conn = request.GPSGateConections;
            var sessionId = await _gpsGateDirectoryWebservice.LoginAsyn(conn);

            conn.SessionID = sessionId;
            return conn;
        }
    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\MappingProfile.cs

﻿using AutoMapper;
using FMS.Application.Command.DatabaseCommand.ConsumtionCmd.Update;
using FMS.Application.Models;
using FMS.Application.Models.Employee;
using FMS.Application.Models.Vehicle;
using FMS.Application.ModelsDTOs.ExpectedAVG;
using FMS.Domain.Entities;
using FMS.Services.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.MappingProfile
{
    public class MappingProfile:Profile
    {
        public MappingProfile() { 
        
        CreateMap<Vehicle,VehicleListDTO>().ReverseMap();
         CreateMap<Employee,EmployeeDto>()
                .ForMember(dest => dest.SiteId, opt => opt.MapFrom(src => src.SiteId))
                
                .ReverseMap();
            CreateMap<Vehicle, SimpleVehicleDto>()
                .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
                .ForMember(dest => dest.HyoungNo, opt => opt.MapFrom(src => src.HyoungNo)).ReverseMap();
            
         CreateMap<Vehiclemodel, VehicleModelDto>()
                       .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                       .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
                       .ForMember(dest => dest.ManufacturerId, opt => opt.MapFrom(src => src.ManufacturerId));

        CreateMap<VehicleModelDto, Vehiclemodel>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
                .ForMember(dest => dest.ManufacturerId, opt => opt.MapFrom(src => src.ManufacturerId));


            CreateMap <Expectedaverage,ExpectedAVGDto>()
                .ForMember(dest=>dest.Id,opt=>opt.MapFrom(src=>src.Id))
                .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
                .ForMember(dest => dest.ExpectedAverage1, opt => opt.MapFrom(src => src.ExpectedAverage1))
                .ForMember(dest => dest.ExpectedAverageClassificationId, opt => opt.MapFrom(src => src.ExpectedAverageClassificationId))
                
                
                .ReverseMap();

            CreateMap<Expectedaverageclassification, ExpectedAVGClassficationDTO>().ReverseMap();


            CreateMap<ComsumptionUpdateCmd,Vehicleconsumption>()
     .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
    .ForMember(dest => dest.TotalFuel, opt => opt.MapFrom(src => src.TotalFuel))
    .ForMember(dest => dest.ExpectedConsumption, opt => opt.MapFrom(src => src.ExcessWorkingHrsCost)) //watch out for this one
    .ForMember(dest => dest.EmployeeId, opt => opt.MapFrom(src => src.WorkingEmployee))
    .ForMember(dest => dest.Date, opt => opt.MapFrom(src => src.Date))
    .ForMember(dest => dest.MaxSpeed, opt => opt.MapFrom(src => src.MaxSpeed))
    .ForMember(dest => dest.AvgSpeed, opt => opt.MapFrom(src => src.AvgSpeed))
    .ForMember(dest => dest.TotalDistance, opt => opt.MapFrom(src => src.TotalDistance))
    .ForMember(dest => dest.IsKmperhr, opt => opt.MapFrom(src => src.IsKmperhr))
    .ForMember(dest => dest.FuelLost, opt => opt.MapFrom(src => src.FuelLost))
    .ForMember(dest => dest.FlowMeterFuelUsed, opt => opt.MapFrom(src => src.FlowMeterFuelUsed))
    .ForMember(dest => dest.FlowMeterEffiency, opt => opt.MapFrom(src => src.FlowMeterEffiency))
     .ForMember(dest => dest.FuelEfficiency, opt => opt.MapFrom(src => src.FuelEfficiency))
    .ForMember(dest => dest.EngHours, opt => opt.MapFrom(src => src.EngHours))
    //.ForMember(dest => dest.IsModified, opt => opt.MapFrom(src => src.IsModified))

    .ForMember(dest => dest.FlowMeterEngineHrs, opt => opt.MapFrom(src => src.FlowMeterEngineHrs)).ReverseMap();




            CreateMap<Vehicleconsumption, VehicleConsumptionInfoDTO>()
    .ForMember(dest => dest.VehicleId, opt => opt.MapFrom(src => src.VehicleId))
    .ForMember(dest => dest.TotalFuel, opt => opt.MapFrom(src => src.TotalFuel))
    .ForMember(dest=> dest.HyoungNo,opt=>opt.MapFrom(src=>src.Vehicle.HyoungNo))
    //.ForMember(dest=>dest.WorkingExpectedAverage,opt=>opt.MapFrom(src=>src.Vehicle.WorkingExpectedAverage))
    .ForMember(dest => dest.VehicleType , opt => opt.MapFrom(src=>src.Vehicle.VehicleType.Abbvr))
    .ForMember(dest => dest.VehicleManufacturer, opt => opt.MapFrom(src => src.Vehicle.VehicleManufacturer.Name))
    .ForMember(dest => dest.VehicleModel, opt => opt.MapFrom(src => src.Vehicle.VehicleModel.Name))
    //.ForMember(dest=> dest.WorkingEmployeesID,opt=>opt.MapFrom(src=>src.EmployeeId))
    //ForMember(dest => dest.ExpectedAveraged, opt => opt.MapFrom(src => src.ExpectedAveraged))
    .ForMember(dest => dest.Date, opt => opt.MapFrom(src => src.Date))
    .ForMember(dest => dest.MaxSpeed, opt => opt.MapFrom(src => src.MaxSpeed))
    .ForMember(dest => dest.AvgSpeed, opt => opt.MapFrom(src => src.AvgSpeed))
    .ForMember(dest => dest.TotalDistance, opt => opt.MapFrom(src => src.TotalDistance))
    .ForMember(dest => dest.IsAverageKm, opt => opt.MapFrom(src => src.IsKmperhr))
    .ForMember(dest => dest.FuelLost, opt => opt.MapFrom(src => src.FuelLost))
    .ForMember(dest => dest.FlowMeterFuelUsed, opt => opt.MapFrom(src => src.FlowMeterFuelUsed))
    .ForMember(dest => dest.FlowMeterEffiency, opt => opt.MapFrom(src => src.FlowMeterEffiency))
    //ForMember(dest => dest.FuelEfficiency, opt => opt.MapFrom(src => src.FuelEfficiency))
    .ForMember(dest => dest.EngHours, opt => opt.MapFrom(src => src.EngHours))
    .ForMember(dest => dest.IsModified, opt => opt.MapFrom(src => src.IsModified))
    .ForMember(dest => dest.Site, opt => opt.MapFrom(src =>src.Site))
    .ForMember(dest => dest.FlowMeterEngineHrs, opt => opt.MapFrom(src => src.FlowMeterEngineHrs)).ReverseMap();
   



        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\NotFoundException.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Common
{
    public class NotFoundException:Exception
    {
        public NotFoundException(string name, object key)
            : base($"Entity \"{name}\" ({key}) was not found.")
        {

        }
    }
    

    }


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\Program.cs

﻿using System;
using MediatR;

namespace FMS.Application
{
    public class Program
    {
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\SimpleVehicleDto.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.Models.Vehicle
{
    public class SimpleVehicleDto
    {
        [JsonPropertyName("vehicleId")]
        public int VehicleId { get; set; }

        [JsonPropertyName("hyoungNo")]
        public string HyoungNo { get; set; }







    }

}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\UpdatevehicleCommand.cs

﻿using FMS.Domain.Entities;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.UpdateVehicle
{
    /// <summary>
    /// Upate vehicle Commmand
    /// </summary>
    public class UpdatevehicleCommand : IRequest<bool>
    {
        public int VehicleId { get; set; }
        public string HyoungNo { get; set; }
        public int? VehicleTypeId { get; set; }
        public int? VehicleModelId { get; set; }
        public int? VehicleManufacturerId { get; set; }
        public string Yom { get; set; }
        public decimal ExpectedAveraged { get; set; }
        public int? DefaultEmployeeId { get; set; }
        public int? WorkingSiteId { get; set; }
        public decimal? ExcessWorkingHrCost { get; set; }
        public bool AverageKmL { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\UpdateVehicleCommandHandler.cs

﻿using FMS.Persistence.DataAccess;
using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace FMS.Application.Command.DatabaseCommand.UpdateVehicle
{
    public class UpdateVehicleCommandHandler : IRequestHandler<UpdatevehicleCommand, bool>
    {

        private readonly GpsdataContext _context;

        public UpdateVehicleCommandHandler(GpsdataContext context)
        {
            _context = context;
        }

        public async Task<bool> Handle(UpdatevehicleCommand request, CancellationToken cancellationToken)
        {
            //find the existing vehicle in the database
            var existingVehicle = await _context.Vehicles.FindAsync(request.VehicleId);


            if(existingVehicle ==null)
            {
                return false;
            }

               //update the properties of the vehicle using properties of the request
                existingVehicle.VehicleModelId = request.VehicleModelId;
               // existingVehicle.WorkingExpectedAverage = request.ExpectedAveraged;
                existingVehicle.WorkingSiteId = request.WorkingSiteId;
                existingVehicle.ExcessWorkingHrCost = request.ExcessWorkingHrCost;
                existingVehicle.DefaultEmployeeId = request.DefaultEmployeeId;  
                existingVehicle.VehicleManufacturerId = request.VehicleManufacturerId;
                existingVehicle.AverageKmL = request.AverageKmL;
                existingVehicle.VehicleTypeId = request.VehicleTypeId.Value;


            //save the changes
            _context.Vehicles.Update(existingVehicle);

            await _context.SaveChangesAsync(cancellationToken);


            return true;

        }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\VehicleConsumptionInfoDTO.cs

﻿using FMS.Application.Models.Employee;
using FMS.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Models
{
    public class VehicleConsumptionInfoDTO
    {
              

          public int Id { get; set; }
            public int VehicleId { get; set; }


          
            public decimal? TotalFuel
              { get;set; }
            public string HyoungNo { get; set; }
            public String VehicleType { get; set; }
            public string VehicleModel { get; set; }
            public string VehicleManufacturer { get; set; }
            public decimal ExpectedAveraged { get; set; }
            public List<EmployeeDto> DefaultEmployees { get; set; }
            public string Site { get; set; }
            public decimal? ExcessWorkingHrCost { get; set; }
           public DateTime Date { get; set; }

           public decimal? MaxSpeed { get; set; }

           public decimal? AvgSpeed { get; set; }

           public decimal TotalDistance { get; set; }

          public decimal? FuelLost { get; set; }

        public bool IsAverageKm { get; set; }

        //if the vehicle is using averagekm or l/hrs


        public decimal? FlowMeterFuelUsed { get; set; }

        public decimal? FlowMeterFuelLost { get; set; }

        public decimal? FlowMeterEffiency { get;set; }
        public decimal? FuelEfficiency { get; set; }
        public decimal? EngHours { get; set; }

        public decimal? FlowMeterEngineHrs { get; set; }

        public bool IsNightShift { get; set; }

        public string Comments { get; set; }

        public bool IsModified { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\VehicleListDTO.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Application.Models.Vehicle
{
    public class VehicleListDTO
    {
        public int VehicleId { get; set; }

        public string HyoungNo { get; set; } = null!;

        public int VehicleTypeId { get; set; }

        public int? VehicleModelId { get; set; }

        public int? VehicleManufacturerId { get; set; }

        //change to date
        /// <summary>
        /// year of manufacture ...change to date
        /// </summary>
        public string Yom { get; set; }

        public decimal ExpectedAveraged { get; set; }


        public int? DefaultEmployeeId { get; set; }

        public int? WorkingSiteId { get; set; }

        public decimal? ExcessWorkingHrCost { get; set; }

        /// <summary>
        /// Change if vehicle is using km/l or l/hr
        /// </summary>
        public bool AverageKmL { get; set; }
    }
}


//c:/Users/kkagiri/source/repos/Hyoung.Fms/TestResults\fms.application GPT\VehicleModelDTO.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FMS.Application.Models
{
    public class VehicleModelDto
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        public string Name { get; set; }
        public int ManufacturerId { get; set; }
    }
}


