// <auto-generated />
using System;
using FMS.Persistence.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Persistence.Migrations
{
    [DbContext(typeof(GpsdataContext))]
    [Migration("20231221092829_AddedStatusandMulplepacketacception")]
    partial class AddedStatusandMulplepacketacception
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID");

                    b.HasKey("VehicleId", "EmployeeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID_idx");

                    b.ToTable("employeevehicles", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("alarm", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.Property<int?>("TankMeausementId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tankMeausementID");

                    b.Property<int?>("AlarmId")
                        .HasColumnType("int(11)")
                        .HasColumnName("alarmID");

                    b.HasKey("TankMeausementId", "AlarmId");

                    b.HasIndex(new[] { "TankMeausementId" }, "alarmMeasurement_tankmeasurement_idx");

                    b.HasIndex(new[] { "AlarmId" }, "alarmmeasurement_alarm_idx");

                    b.ToTable("alarm_tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.Property<string>("AssetId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AssetID");

                    b.Property<string>("SiteId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SiteID");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID");

                    b.HasKey("AssetId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "VehicleManufacturerID");

                    b.HasIndex(new[] { "VehicleModelId" }, "VehicleModelID");

                    b.HasIndex(new[] { "VehicleTypeId" }, "VehicleTypeID");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("CalibrationData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CalibrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("calibrationDate");

                    b.Property<string>("VehicleId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "calibrationDataRow_idx");

                    b.ToTable("calibrationdata", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Property<int>("DeviceImei")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceIMEI");

                    b.Property<int>("DeviceMakerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceMakerID");

                    b.Property<int>("DevicePhoneNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("DeviceImei")
                        .HasName("PRIMARY");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("devicemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DevicemanufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DevicemanufacturerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DevicemanufacturerId" }, "deviceModel_deviceManufaturer_idx");

                    b.ToTable("devicemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("EmployeeWorkNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'New'");

                    b.Property<string>("EmployeephoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeephoneNumber")
                        .HasDefaultValueSql("'0700000000'");

                    b.Property<string>("Employeestatus")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("employeestatus");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'Employee Name'");

                    b.Property<long?>("NationalId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("NationalID");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SiteId" }, "Employee_site_idx");

                    b.HasIndex(new[] { "NationalId" }, "NationalID_UNIQUE")
                        .IsUnique();

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal>("ExpectedAverage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("ExpectedAverage");

                    b.Property<int>("ExpectedAverageClassificationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ExpectedAverageClassificationID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExpectedAverageClassificationId" }, "Expected_classification_idx");

                    b.HasIndex(new[] { "VehicleId" }, "Expected_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "Site_idx");

                    b.HasIndex(new[] { "VehicleId", "SiteId", "ExpectedAverageClassificationId" }, "UniqueRecord")
                        .IsUnique();

                    b.ToTable("expectedaverage", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(545)
                        .HasColumnType("varchar(545)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("expectedaverageclassification", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Fuelrefil", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Duration")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("GpsfuelRefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("GPSFuelRefil");

                    b.Property<decimal?>("ManualGpsfuelrefil")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("ManualGPSFuelrefil");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("fuelrefil", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuecategory", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Property<int>("Int")
                        .HasColumnType("int(11)")
                        .HasColumnName("int");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Int")
                        .HasName("PRIMARY");

                    b.ToTable("issuepriority", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("issuestatus", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("AssignTo")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("closingDate");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dueDate");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("hyoungNo");

                    b.Property<int>("IssueCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("IssueCategoryID");

                    b.Property<DateTime?>("LastModfield")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("openDate");

                    b.Property<int>("Openby")
                        .HasColumnType("int(11)")
                        .HasColumnName("openby");

                    b.Property<int?>("Priority")
                        .HasColumnType("int(11)")
                        .HasColumnName("priority");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasMaxLength(945)
                        .HasColumnType("varchar(945)")
                        .HasColumnName("problemDescription");

                    b.Property<string>("ProblemTitlte")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("problemTitlte");

                    b.Property<int?>("RelatedIssue")
                        .HasColumnType("int(11)")
                        .HasColumnName("relatedIssue");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("siteID");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Priority" }, "Issuetracker_priority_idx");

                    b.HasIndex(new[] { "Status" }, "Issuetracker_status_idx");

                    b.HasIndex(new[] { "AssignTo" }, "Issuetracker_userAsssignedTo_idx");

                    b.HasIndex(new[] { "Openby" }, "Issuetracker_user_idx");

                    b.HasIndex(new[] { "IssueCategoryId" }, "issetracker_issueID_idx");

                    b.HasIndex(new[] { "HyoungNo" }, "issue_vehicle_idx");

                    b.HasIndex(new[] { "SiteId" }, "issuetracker_site_idx");

                    b.ToTable("issuetracker", null, t =>
                        {
                            t.HasComment("		");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("PtsserialNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("PTSSerialNo");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("TankId");

                    b.HasIndex(new[] { "SiteId" }, "PTS_Site_idx");

                    b.ToTable("pts", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.PtsTank", b =>
                {
                    b.Property<int>("PtsId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TankId")
                        .HasColumnType("int(11)");

                    b.HasKey("PtsId", "TankId");

                    b.HasIndex("TankId");

                    b.ToTable("PtsTanks");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("site", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.TagGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("TagId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tagID");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId" }, "Tag_Vehicle_idx");

                    b.HasIndex(new[] { "TagId" }, "Taggroup_vehicle_idx");

                    b.ToTable("tag_group", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<decimal>("TankHeight")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal>("TankVolume")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tank", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("AlarmNavigationId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConfigurationId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("FuelGradeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("PTSId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<double?>("ProductDensity")
                        .HasColumnType("double");

                    b.Property<double?>("ProductHeight")
                        .HasColumnType("double");

                    b.Property<double?>("ProductMass")
                        .HasColumnType("double");

                    b.Property<double?>("ProductTcvolume")
                        .HasColumnType("double")
                        .HasColumnName("ProductTCVolume");

                    b.Property<double?>("ProductUllage")
                        .HasColumnType("double");

                    b.Property<double?>("ProductVolume")
                        .HasColumnType("double");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Status")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("Tank")
                        .HasColumnType("int");

                    b.Property<int?>("TankFillingPercentage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TankId")
                        .HasColumnType("int(11)");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double");

                    b.Property<double?>("WaterHeight")
                        .HasColumnType("double")
                        .HasColumnName("waterHeight");

                    b.Property<double?>("WaterVolume")
                        .HasColumnType("double");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AlarmNavigationId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TankId");

                    b.ToTable("tankmeasurement", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Full Name");

                    b.Property<string>("Password")
                        .HasMaxLength(1045)
                        .HasColumnType("varchar(1045)")
                        .HasColumnName("password");

                    b.Property<int?>("UserType")
                        .HasColumnType("int(11)")
                        .HasColumnName("userType");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserType" }, "user_usertype_idx");

                    b.ToTable("user", null, t =>
                        {
                            t.HasComment("	");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("usertype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vehicleID");

                    b.Property<bool>("AverageKmL")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Average_km_l");

                    b.Property<string>("Capacity")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("CurrentPhysicalReading")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("DefaultEmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DefaultEmployeeID");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DeviceID");

                    b.Property<decimal?>("ExcessWorkingHrCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("HyoungNo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("NumberPlate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("VehicleManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleManufacturerID");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleModelID");

                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleTypeID")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("WorkingExpectedAverage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("WorkingSiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("WorkingSiteID");

                    b.Property<string>("Yom")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("YOM");

                    b.HasKey("VehicleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HyoungNo" }, "HyoungNo_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "DeviceId" }, "Vehicle_Device_idx");

                    b.HasIndex(new[] { "DefaultEmployeeId" }, "Vehicle_employee_idx");

                    b.HasIndex(new[] { "WorkingExpectedAverage" }, "vehicleExpectedAverage_idx");

                    b.HasIndex(new[] { "VehicleManufacturerId" }, "vehicle_manufacturer_idx");

                    b.HasIndex(new[] { "VehicleModelId" }, "vehicle_model_idx");

                    b.HasIndex(new[] { "WorkingSiteId" }, "vehicle_site_idx");

                    b.HasIndex(new[] { "VehicleTypeId" }, "vehicle_vehicleType_idx");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<decimal?>("AvgSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("EmployeeID")
                        .HasDefaultValueSql("'0'");

                    b.Property<decimal?>("EngHours")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExcessWorkingHrsCost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("ExpectedConsumption")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEffiency")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterEngineHrs")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FlowMeterFuelUsed")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("FuelEfficiency")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("FuelLost")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<ulong>("IsKmperhr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<sbyte?>("IsModified")
                        .HasColumnType("tinyint(4)");

                    b.Property<ulong>("IsNightShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<decimal?>("MaxSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SiteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SiteID");

                    b.Property<decimal?>("TotalDistance")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("TotalFuel")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("VehicleID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleId", "Date", "IsNightShift" }, "vehicle_date_shift_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "EmployeeId" }, "vehicleconsumption_employee_idx");

                    b.HasIndex(new[] { "SiteId" }, "vehicleconsumption_site_idx");

                    b.HasIndex(new[] { "ModifiedBy" }, "vehicleconsumption_user_idx");

                    b.ToTable("vehicleconsumption", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemanufacturer", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehiclemodel", (string)null);
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Abbvr")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Nothinghere")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("vehicletype", null, t =>
                        {
                            t.HasComment("			");
                        });
                });

            modelBuilder.Entity("Employeevehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeID");

                    b.HasOne("FMS.Domain.Entities.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("VehicleID");
                });

            modelBuilder.Entity("FMS.Domain.Entities.AlarmTankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "Alarm")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("alarmmeasurement_alarm");

                    b.HasOne("FMS.Domain.Entities.Tankmeasurement", "TankMeausement")
                        .WithMany("AlarmTankmeasurements")
                        .HasForeignKey("TankMeausementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("alarmMeasurement_tankmeasurement");

                    b.Navigation("Alarm");

                    b.Navigation("TankMeausement");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Asset", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("asset_ibfk_2");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("asset_ibfk_1");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Assets")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("asset_ibfk_3");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Calibrationdatum", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Calibrationdata")
                        .HasForeignKey("VehicleId")
                        .HasPrincipalKey("HyoungNo")
                        .HasConstraintName("calibrationData_vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemodel", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Devicemanufacturer", "Devicemanufacturer")
                        .WithMany("Devicemodels")
                        .HasForeignKey("DevicemanufacturerId")
                        .IsRequired()
                        .HasConstraintName("deviceModel_deviceManufaturer");

                    b.Navigation("Devicemanufacturer");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Employees")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("Employee_site");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Expectedaverageclassification", "ExpectedAverageClassification")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("ExpectedAverageClassificationId")
                        .IsRequired()
                        .HasConstraintName("Expected_classification");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("Expected_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Expectedaverages")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("Expected_vehicle");

                    b.Navigation("ExpectedAverageClassification");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuetracker", b =>
                {
                    b.HasOne("FMS.Domain.Entities.User", "AssignToNavigation")
                        .WithMany("IssuetrackerAssignToNavigations")
                        .HasForeignKey("AssignTo")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_userAsssignedTo");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "HyoungNoNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("HyoungNo")
                        .HasPrincipalKey("HyoungNo")
                        .IsRequired()
                        .HasConstraintName("issue_vehicle");

                    b.HasOne("FMS.Domain.Entities.Issuecategory", "IssueCategory")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("IssueCategoryId")
                        .IsRequired()
                        .HasConstraintName("issuetrcker_issuecategoryID");

                    b.HasOne("FMS.Domain.Entities.User", "OpenbyNavigation")
                        .WithMany("IssuetrackerOpenbyNavigations")
                        .HasForeignKey("Openby")
                        .IsRequired()
                        .HasConstraintName("Issuetracker_useropenby");

                    b.HasOne("FMS.Domain.Entities.Issuepriority", "PriorityNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Priority")
                        .HasConstraintName("Issuetracker_priority");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("issuetracker_site");

                    b.HasOne("FMS.Domain.Entities.Issuestatus", "StatusNavigation")
                        .WithMany("Issuetrackers")
                        .HasForeignKey("Status")
                        .HasConstraintName("Issuetracker_status");

                    b.Navigation("AssignToNavigation");

                    b.Navigation("HyoungNoNavigation");

                    b.Navigation("IssueCategory");

                    b.Navigation("OpenbyNavigation");

                    b.Navigation("PriorityNavigation");

                    b.Navigation("Site");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Pts")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("PTS_Site");

                    b.HasOne("FMS.Domain.Entities.Tank", "Tank")
                        .WithMany("Pts")
                        .HasForeignKey("TankId");

                    b.Navigation("Site");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FMS.Domain.Entities.PtsTank", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Pts", "Pts")
                        .WithMany("PTSTanks")
                        .HasForeignKey("PtsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Domain.Entities.Tank", "Tank")
                        .WithMany("PtsTanks")
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pts");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Alarm", "AlarmNavigation")
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("AlarmNavigationId");

                    b.HasOne("FMS.Domain.Entities.Site", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("SiteId");

                    b.HasOne("FMS.Domain.Entities.Tank", null)
                        .WithMany("Tankmeasurements")
                        .HasForeignKey("TankId");

                    b.Navigation("AlarmNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Usertype", "UserTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserType")
                        .HasConstraintName("user_usertype");

                    b.Navigation("UserTypeNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "DefaultEmployee")
                        .WithMany("VehiclesNavigation")
                        .HasForeignKey("DefaultEmployeeId")
                        .HasConstraintName("Vehicle_employee");

                    b.HasOne("FMS.Domain.Entities.Device", "Device")
                        .WithMany("Vehicles")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("Vehicle_Device");

                    b.HasOne("FMS.Domain.Entities.Vehiclemanufacturer", "VehicleManufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleManufacturerId")
                        .HasConstraintName("vehicle_manufacturer");

                    b.HasOne("FMS.Domain.Entities.Vehiclemodel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("vehicle_model");

                    b.HasOne("FMS.Domain.Entities.Vehicletype", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .IsRequired()
                        .HasConstraintName("vehicle_vehicleType");

                    b.HasOne("FMS.Domain.Entities.Expectedaverage", "WorkingExpectedAverageNavigation")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingExpectedAverage")
                        .HasConstraintName("vehicleExpectedAverage");

                    b.HasOne("FMS.Domain.Entities.Site", "WorkingSite")
                        .WithMany("Vehicles")
                        .HasForeignKey("WorkingSiteId")
                        .HasConstraintName("vehicle_site");

                    b.Navigation("DefaultEmployee");

                    b.Navigation("Device");

                    b.Navigation("VehicleManufacturer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");

                    b.Navigation("WorkingExpectedAverageNavigation");

                    b.Navigation("WorkingSite");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicleconsumption", b =>
                {
                    b.HasOne("FMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("vehicleconsumption_employee");

                    b.HasOne("FMS.Domain.Entities.User", "ModifiedByNavigation")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("vehicleconsumption_user");

                    b.HasOne("FMS.Domain.Entities.Site", "Site")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_site");

                    b.HasOne("FMS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Vehicleconsumptions")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("vehicleconsumption_vehicle");

                    b.Navigation("Employee");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Site");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Alarm", b =>
                {
                    b.Navigation("AlarmTankmeasurements");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Device", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Devicemanufacturer", b =>
                {
                    b.Navigation("Devicemodels");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("VehiclesNavigation");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverage", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Expectedaverageclassification", b =>
                {
                    b.Navigation("Expectedaverages");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuecategory", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuepriority", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Issuestatus", b =>
                {
                    b.Navigation("Issuetrackers");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Pts", b =>
                {
                    b.Navigation("PTSTanks");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Site", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Pts");

                    b.Navigation("Tankmeasurements");

                    b.Navigation("Vehicleconsumptions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tank", b =>
                {
                    b.Navigation("Pts");

                    b.Navigation("PtsTanks");

                    b.Navigation("Tankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Tankmeasurement", b =>
                {
                    b.Navigation("AlarmTankmeasurements");
                });

            modelBuilder.Entity("FMS.Domain.Entities.User", b =>
                {
                    b.Navigation("IssuetrackerAssignToNavigations");

                    b.Navigation("IssuetrackerOpenbyNavigations");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Usertype", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Calibrationdata");

                    b.Navigation("Expectedaverages");

                    b.Navigation("Issuetrackers");

                    b.Navigation("Vehicleconsumptions");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemanufacturer", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehiclemodel", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FMS.Domain.Entities.Vehicletype", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
