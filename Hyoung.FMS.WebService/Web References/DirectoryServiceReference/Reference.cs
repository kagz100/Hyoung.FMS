//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Hyoung.FMS.WebService.DirectoryServiceReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DirectorySoap", Namespace="http://gpsgate.com/services/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ViewBag))]
    public partial class Directory : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGateMessagesByTrackInfoIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestGateRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpdatedUsersInGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersInGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersInUserTagOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersInUserTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserMarkerColorOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserExpectedFuelConsumptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTagsInApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTagOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDevicesByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceCommandStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetCommandQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetManageableDeviceDefinitionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserWithUserTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeUsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeUserDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeUserSurnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeDriverIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccumulatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccumulatorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccumulatorValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestAccumulatorValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAccumulatorValueOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Directory() {
            this.Url = global::Hyoung.FMS.WebService.Properties.Settings.Default.Hyoung_FMS_WebService_DirectoryServiceReference_Directory;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GetLicenseStatusCompletedEventHandler GetLicenseStatusCompleted;
        
        /// <remarks/>
        public event GetGateMessagesByTrackInfoIdCompletedEventHandler GetGateMessagesByTrackInfoIdCompleted;
        
        /// <remarks/>
        public event GetLatestGateRecordsCompletedEventHandler GetLatestGateRecordsCompleted;
        
        /// <remarks/>
        public event GetUpdatedUsersInGroupCompletedEventHandler GetUpdatedUsersInGroupCompleted;
        
        /// <remarks/>
        public event GetUsersInGroupCompletedEventHandler GetUsersInGroupCompleted;
        
        /// <remarks/>
        public event GetUsersInUserTagCompletedEventHandler GetUsersInUserTagCompleted;
        
        /// <remarks/>
        public event GetUsersInUserTemplateCompletedEventHandler GetUsersInUserTemplateCompleted;
        
        /// <remarks/>
        public event GetCurrentApplicationsCompletedEventHandler GetCurrentApplicationsCompleted;
        
        /// <remarks/>
        public event SetUserMarkerColorCompletedEventHandler SetUserMarkerColorCompleted;
        
        /// <remarks/>
        public event SetUserExpectedFuelConsumptionCompletedEventHandler SetUserExpectedFuelConsumptionCompleted;
        
        /// <remarks/>
        public event RemoveUserCompletedEventHandler RemoveUserCompleted;
        
        /// <remarks/>
        public event SetUserPasswordCompletedEventHandler SetUserPasswordCompleted;
        
        /// <remarks/>
        public event GetViewsCompletedEventHandler GetViewsCompleted;
        
        /// <remarks/>
        public event GetTagsInApplicationCompletedEventHandler GetTagsInApplicationCompleted;
        
        /// <remarks/>
        public event SaveTagCompletedEventHandler SaveTagCompleted;
        
        /// <remarks/>
        public event GetDevicesByUserCompletedEventHandler GetDevicesByUserCompleted;
        
        /// <remarks/>
        public event GetDeviceCommandStatusCompletedEventHandler GetDeviceCommandStatusCompleted;
        
        /// <remarks/>
        public event ResetCommandQueueCompletedEventHandler ResetCommandQueueCompleted;
        
        /// <remarks/>
        public event GetManageableDeviceDefinitionsCompletedEventHandler GetManageableDeviceDefinitionsCompleted;
        
        /// <remarks/>
        public event GetUserTemplatesCompletedEventHandler GetUserTemplatesCompleted;
        
        /// <remarks/>
        public event AddUserWithUserTemplateCompletedEventHandler AddUserWithUserTemplateCompleted;
        
        /// <remarks/>
        public event AddDeviceCompletedEventHandler AddDeviceCompleted;
        
        /// <remarks/>
        public event ChangeUsernameCompletedEventHandler ChangeUsernameCompleted;
        
        /// <remarks/>
        public event ChangeUserDescriptionCompletedEventHandler ChangeUserDescriptionCompleted;
        
        /// <remarks/>
        public event ChangeUserSurnameCompletedEventHandler ChangeUserSurnameCompleted;
        
        /// <remarks/>
        public event ChangeDriverIDCompletedEventHandler ChangeDriverIDCompleted;
        
        /// <remarks/>
        public event ChangeEmailCompletedEventHandler ChangeEmailCompleted;
        
        /// <remarks/>
        public event GetAccumulatorCompletedEventHandler GetAccumulatorCompleted;
        
        /// <remarks/>
        public event GetAccumulatorsCompletedEventHandler GetAccumulatorsCompleted;
        
        /// <remarks/>
        public event GetAccumulatorValueCompletedEventHandler GetAccumulatorValueCompleted;
        
        /// <remarks/>
        public event GetLatestAccumulatorValueCompletedEventHandler GetLatestAccumulatorValueCompleted;
        
        /// <remarks/>
        public event SetAccumulatorValueCompletedEventHandler SetAccumulatorValueCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/Login", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Login(string strUsername, string strPassword, int iApplicationID) {
            object[] results = this.Invoke("Login", new object[] {
                        strUsername,
                        strPassword,
                        iApplicationID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string strUsername, string strPassword, int iApplicationID) {
            this.LoginAsync(strUsername, strPassword, iApplicationID, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string strUsername, string strPassword, int iApplicationID, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        strUsername,
                        strPassword,
                        iApplicationID}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetLicenseStatus", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLicenseStatus(string strSessionID) {
            object[] results = this.Invoke("GetLicenseStatus", new object[] {
                        strSessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseStatusAsync(string strSessionID) {
            this.GetLicenseStatusAsync(strSessionID, null);
        }
        
        /// <remarks/>
        public void GetLicenseStatusAsync(string strSessionID, object userState) {
            if ((this.GetLicenseStatusOperationCompleted == null)) {
                this.GetLicenseStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseStatusOperationCompleted);
            }
            this.InvokeAsync("GetLicenseStatus", new object[] {
                        strSessionID}, this.GetLicenseStatusOperationCompleted, userState);
        }
        
        private void OnGetLicenseStatusOperationCompleted(object arg) {
            if ((this.GetLicenseStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseStatusCompleted(this, new GetLicenseStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetGateMessagesByTrackInfoId", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetGateMessagesByTrackInfoId(string strSessionID, int iApplicationID, int iTrackInfoID, System.DateTime dtStart, System.DateTime dtEnd, int iStartIndex, int iStopIndex, bool bFilterNoneValid, string[] arrFields) {
            object[] results = this.Invoke("GetGateMessagesByTrackInfoId", new object[] {
                        strSessionID,
                        iApplicationID,
                        iTrackInfoID,
                        dtStart,
                        dtEnd,
                        iStartIndex,
                        iStopIndex,
                        bFilterNoneValid,
                        arrFields});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetGateMessagesByTrackInfoIdAsync(string strSessionID, int iApplicationID, int iTrackInfoID, System.DateTime dtStart, System.DateTime dtEnd, int iStartIndex, int iStopIndex, bool bFilterNoneValid, string[] arrFields) {
            this.GetGateMessagesByTrackInfoIdAsync(strSessionID, iApplicationID, iTrackInfoID, dtStart, dtEnd, iStartIndex, iStopIndex, bFilterNoneValid, arrFields, null);
        }
        
        /// <remarks/>
        public void GetGateMessagesByTrackInfoIdAsync(string strSessionID, int iApplicationID, int iTrackInfoID, System.DateTime dtStart, System.DateTime dtEnd, int iStartIndex, int iStopIndex, bool bFilterNoneValid, string[] arrFields, object userState) {
            if ((this.GetGateMessagesByTrackInfoIdOperationCompleted == null)) {
                this.GetGateMessagesByTrackInfoIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGateMessagesByTrackInfoIdOperationCompleted);
            }
            this.InvokeAsync("GetGateMessagesByTrackInfoId", new object[] {
                        strSessionID,
                        iApplicationID,
                        iTrackInfoID,
                        dtStart,
                        dtEnd,
                        iStartIndex,
                        iStopIndex,
                        bFilterNoneValid,
                        arrFields}, this.GetGateMessagesByTrackInfoIdOperationCompleted, userState);
        }
        
        private void OnGetGateMessagesByTrackInfoIdOperationCompleted(object arg) {
            if ((this.GetGateMessagesByTrackInfoIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGateMessagesByTrackInfoIdCompleted(this, new GetGateMessagesByTrackInfoIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetLatestGateRecords", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLatestGateRecords(string strSessionID, int iApplicationID, int iUserID, bool bFilterNotUsed) {
            object[] results = this.Invoke("GetLatestGateRecords", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        bFilterNotUsed});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestGateRecordsAsync(string strSessionID, int iApplicationID, int iUserID, bool bFilterNotUsed) {
            this.GetLatestGateRecordsAsync(strSessionID, iApplicationID, iUserID, bFilterNotUsed, null);
        }
        
        /// <remarks/>
        public void GetLatestGateRecordsAsync(string strSessionID, int iApplicationID, int iUserID, bool bFilterNotUsed, object userState) {
            if ((this.GetLatestGateRecordsOperationCompleted == null)) {
                this.GetLatestGateRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestGateRecordsOperationCompleted);
            }
            this.InvokeAsync("GetLatestGateRecords", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        bFilterNotUsed}, this.GetLatestGateRecordsOperationCompleted, userState);
        }
        
        private void OnGetLatestGateRecordsOperationCompleted(object arg) {
            if ((this.GetLatestGateRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestGateRecordsCompleted(this, new GetLatestGateRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetUpdatedUsersInGroup", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUpdatedUsersInGroup(string strSessionID, int iApplicationID, string strGroupName, int iStartIndex, int iStopIndex, int iViewID, System.DateTime dtSince) {
            object[] results = this.Invoke("GetUpdatedUsersInGroup", new object[] {
                        strSessionID,
                        iApplicationID,
                        strGroupName,
                        iStartIndex,
                        iStopIndex,
                        iViewID,
                        dtSince});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUpdatedUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iStartIndex, int iStopIndex, int iViewID, System.DateTime dtSince) {
            this.GetUpdatedUsersInGroupAsync(strSessionID, iApplicationID, strGroupName, iStartIndex, iStopIndex, iViewID, dtSince, null);
        }
        
        /// <remarks/>
        public void GetUpdatedUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iStartIndex, int iStopIndex, int iViewID, System.DateTime dtSince, object userState) {
            if ((this.GetUpdatedUsersInGroupOperationCompleted == null)) {
                this.GetUpdatedUsersInGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpdatedUsersInGroupOperationCompleted);
            }
            this.InvokeAsync("GetUpdatedUsersInGroup", new object[] {
                        strSessionID,
                        iApplicationID,
                        strGroupName,
                        iStartIndex,
                        iStopIndex,
                        iViewID,
                        dtSince}, this.GetUpdatedUsersInGroupOperationCompleted, userState);
        }
        
        private void OnGetUpdatedUsersInGroupOperationCompleted(object arg) {
            if ((this.GetUpdatedUsersInGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpdatedUsersInGroupCompleted(this, new GetUpdatedUsersInGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetUsersInGroup", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUsersInGroup(string strSessionID, int iApplicationID, string strGroupName, int iViewID) {
            object[] results = this.Invoke("GetUsersInGroup", new object[] {
                        strSessionID,
                        iApplicationID,
                        strGroupName,
                        iViewID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iViewID) {
            this.GetUsersInGroupAsync(strSessionID, iApplicationID, strGroupName, iViewID, null);
        }
        
        /// <remarks/>
        public void GetUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iViewID, object userState) {
            if ((this.GetUsersInGroupOperationCompleted == null)) {
                this.GetUsersInGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersInGroupOperationCompleted);
            }
            this.InvokeAsync("GetUsersInGroup", new object[] {
                        strSessionID,
                        iApplicationID,
                        strGroupName,
                        iViewID}, this.GetUsersInGroupOperationCompleted, userState);
        }
        
        private void OnGetUsersInGroupOperationCompleted(object arg) {
            if ((this.GetUsersInGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersInGroupCompleted(this, new GetUsersInGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetUsersInUserTag", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUsersInUserTag(string strSessionID, int iApplicationID, string strTagName) {
            object[] results = this.Invoke("GetUsersInUserTag", new object[] {
                        strSessionID,
                        iApplicationID,
                        strTagName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersInUserTagAsync(string strSessionID, int iApplicationID, string strTagName) {
            this.GetUsersInUserTagAsync(strSessionID, iApplicationID, strTagName, null);
        }
        
        /// <remarks/>
        public void GetUsersInUserTagAsync(string strSessionID, int iApplicationID, string strTagName, object userState) {
            if ((this.GetUsersInUserTagOperationCompleted == null)) {
                this.GetUsersInUserTagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersInUserTagOperationCompleted);
            }
            this.InvokeAsync("GetUsersInUserTag", new object[] {
                        strSessionID,
                        iApplicationID,
                        strTagName}, this.GetUsersInUserTagOperationCompleted, userState);
        }
        
        private void OnGetUsersInUserTagOperationCompleted(object arg) {
            if ((this.GetUsersInUserTagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersInUserTagCompleted(this, new GetUsersInUserTagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetUsersInUserTemplate", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUsersInUserTemplate(string strSessionID, int iApplicationID, int iUserTemplateID) {
            object[] results = this.Invoke("GetUsersInUserTemplate", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserTemplateID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersInUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID) {
            this.GetUsersInUserTemplateAsync(strSessionID, iApplicationID, iUserTemplateID, null);
        }
        
        /// <remarks/>
        public void GetUsersInUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID, object userState) {
            if ((this.GetUsersInUserTemplateOperationCompleted == null)) {
                this.GetUsersInUserTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersInUserTemplateOperationCompleted);
            }
            this.InvokeAsync("GetUsersInUserTemplate", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserTemplateID}, this.GetUsersInUserTemplateOperationCompleted, userState);
        }
        
        private void OnGetUsersInUserTemplateOperationCompleted(object arg) {
            if ((this.GetUsersInUserTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersInUserTemplateCompleted(this, new GetUsersInUserTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetCurrentApplications", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCurrentApplications(string strSessionID, int iApplicationID) {
            object[] results = this.Invoke("GetCurrentApplications", new object[] {
                        strSessionID,
                        iApplicationID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentApplicationsAsync(string strSessionID, int iApplicationID) {
            this.GetCurrentApplicationsAsync(strSessionID, iApplicationID, null);
        }
        
        /// <remarks/>
        public void GetCurrentApplicationsAsync(string strSessionID, int iApplicationID, object userState) {
            if ((this.GetCurrentApplicationsOperationCompleted == null)) {
                this.GetCurrentApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetCurrentApplications", new object[] {
                        strSessionID,
                        iApplicationID}, this.GetCurrentApplicationsOperationCompleted, userState);
        }
        
        private void OnGetCurrentApplicationsOperationCompleted(object arg) {
            if ((this.GetCurrentApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentApplicationsCompleted(this, new GetCurrentApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/SetUserMarkerColor", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SetUserMarkerColor(string strSessionID, int iApplicationID, int iUserID, string strMarkerColor) {
            object[] results = this.Invoke("SetUserMarkerColor", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strMarkerColor});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserMarkerColorAsync(string strSessionID, int iApplicationID, int iUserID, string strMarkerColor) {
            this.SetUserMarkerColorAsync(strSessionID, iApplicationID, iUserID, strMarkerColor, null);
        }
        
        /// <remarks/>
        public void SetUserMarkerColorAsync(string strSessionID, int iApplicationID, int iUserID, string strMarkerColor, object userState) {
            if ((this.SetUserMarkerColorOperationCompleted == null)) {
                this.SetUserMarkerColorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserMarkerColorOperationCompleted);
            }
            this.InvokeAsync("SetUserMarkerColor", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strMarkerColor}, this.SetUserMarkerColorOperationCompleted, userState);
        }
        
        private void OnSetUserMarkerColorOperationCompleted(object arg) {
            if ((this.SetUserMarkerColorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserMarkerColorCompleted(this, new SetUserMarkerColorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/SetUserExpectedFuelConsumption", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SetUserExpectedFuelConsumption(string strSessionID, int iApplicationID, int iUserID, double dExpectedFuelConsumption) {
            object[] results = this.Invoke("SetUserExpectedFuelConsumption", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        dExpectedFuelConsumption});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserExpectedFuelConsumptionAsync(string strSessionID, int iApplicationID, int iUserID, double dExpectedFuelConsumption) {
            this.SetUserExpectedFuelConsumptionAsync(strSessionID, iApplicationID, iUserID, dExpectedFuelConsumption, null);
        }
        
        /// <remarks/>
        public void SetUserExpectedFuelConsumptionAsync(string strSessionID, int iApplicationID, int iUserID, double dExpectedFuelConsumption, object userState) {
            if ((this.SetUserExpectedFuelConsumptionOperationCompleted == null)) {
                this.SetUserExpectedFuelConsumptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserExpectedFuelConsumptionOperationCompleted);
            }
            this.InvokeAsync("SetUserExpectedFuelConsumption", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        dExpectedFuelConsumption}, this.SetUserExpectedFuelConsumptionOperationCompleted, userState);
        }
        
        private void OnSetUserExpectedFuelConsumptionOperationCompleted(object arg) {
            if ((this.SetUserExpectedFuelConsumptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserExpectedFuelConsumptionCompleted(this, new SetUserExpectedFuelConsumptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/RemoveUser", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode RemoveUser(string strSessionID, int iApplicationID, int iUserID) {
            object[] results = this.Invoke("RemoveUser", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveUserAsync(string strSessionID, int iApplicationID, int iUserID) {
            this.RemoveUserAsync(strSessionID, iApplicationID, iUserID, null);
        }
        
        /// <remarks/>
        public void RemoveUserAsync(string strSessionID, int iApplicationID, int iUserID, object userState) {
            if ((this.RemoveUserOperationCompleted == null)) {
                this.RemoveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserOperationCompleted);
            }
            this.InvokeAsync("RemoveUser", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID}, this.RemoveUserOperationCompleted, userState);
        }
        
        private void OnRemoveUserOperationCompleted(object arg) {
            if ((this.RemoveUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserCompleted(this, new RemoveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/SetUserPassword", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SetUserPassword(string strSessionID, int iApplicationID, int iUserID, string strNewPassword) {
            object[] results = this.Invoke("SetUserPassword", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strNewPassword});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserPasswordAsync(string strSessionID, int iApplicationID, int iUserID, string strNewPassword) {
            this.SetUserPasswordAsync(strSessionID, iApplicationID, iUserID, strNewPassword, null);
        }
        
        /// <remarks/>
        public void SetUserPasswordAsync(string strSessionID, int iApplicationID, int iUserID, string strNewPassword, object userState) {
            if ((this.SetUserPasswordOperationCompleted == null)) {
                this.SetUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPasswordOperationCompleted);
            }
            this.InvokeAsync("SetUserPassword", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strNewPassword}, this.SetUserPasswordOperationCompleted, userState);
        }
        
        private void OnSetUserPasswordOperationCompleted(object arg) {
            if ((this.SetUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserPasswordCompleted(this, new SetUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetViews", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetViews(string strSessionID, int iApplicationID) {
            object[] results = this.Invoke("GetViews", new object[] {
                        strSessionID,
                        iApplicationID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewsAsync(string strSessionID, int iApplicationID) {
            this.GetViewsAsync(strSessionID, iApplicationID, null);
        }
        
        /// <remarks/>
        public void GetViewsAsync(string strSessionID, int iApplicationID, object userState) {
            if ((this.GetViewsOperationCompleted == null)) {
                this.GetViewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewsOperationCompleted);
            }
            this.InvokeAsync("GetViews", new object[] {
                        strSessionID,
                        iApplicationID}, this.GetViewsOperationCompleted, userState);
        }
        
        private void OnGetViewsOperationCompleted(object arg) {
            if ((this.GetViewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewsCompleted(this, new GetViewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetTagsInApplication", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetTagsInApplication(string strSessionID, int iApplicationID) {
            object[] results = this.Invoke("GetTagsInApplication", new object[] {
                        strSessionID,
                        iApplicationID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetTagsInApplicationAsync(string strSessionID, int iApplicationID) {
            this.GetTagsInApplicationAsync(strSessionID, iApplicationID, null);
        }
        
        /// <remarks/>
        public void GetTagsInApplicationAsync(string strSessionID, int iApplicationID, object userState) {
            if ((this.GetTagsInApplicationOperationCompleted == null)) {
                this.GetTagsInApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTagsInApplicationOperationCompleted);
            }
            this.InvokeAsync("GetTagsInApplication", new object[] {
                        strSessionID,
                        iApplicationID}, this.GetTagsInApplicationOperationCompleted, userState);
        }
        
        private void OnGetTagsInApplicationOperationCompleted(object arg) {
            if ((this.GetTagsInApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTagsInApplicationCompleted(this, new GetTagsInApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/SaveTag", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SaveTag(string strSessionID, int iApplicationID, int iTagID, string strName, string strDescription, int[] arrUserIDs) {
            object[] results = this.Invoke("SaveTag", new object[] {
                        strSessionID,
                        iApplicationID,
                        iTagID,
                        strName,
                        strDescription,
                        arrUserIDs});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SaveTagAsync(string strSessionID, int iApplicationID, int iTagID, string strName, string strDescription, int[] arrUserIDs) {
            this.SaveTagAsync(strSessionID, iApplicationID, iTagID, strName, strDescription, arrUserIDs, null);
        }
        
        /// <remarks/>
        public void SaveTagAsync(string strSessionID, int iApplicationID, int iTagID, string strName, string strDescription, int[] arrUserIDs, object userState) {
            if ((this.SaveTagOperationCompleted == null)) {
                this.SaveTagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTagOperationCompleted);
            }
            this.InvokeAsync("SaveTag", new object[] {
                        strSessionID,
                        iApplicationID,
                        iTagID,
                        strName,
                        strDescription,
                        arrUserIDs}, this.SaveTagOperationCompleted, userState);
        }
        
        private void OnSaveTagOperationCompleted(object arg) {
            if ((this.SaveTagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTagCompleted(this, new SaveTagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetDevicesByUser", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetDevicesByUser(string strSessionID, int iApplicationID, int iUserID) {
            object[] results = this.Invoke("GetDevicesByUser", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetDevicesByUserAsync(string strSessionID, int iApplicationID, int iUserID) {
            this.GetDevicesByUserAsync(strSessionID, iApplicationID, iUserID, null);
        }
        
        /// <remarks/>
        public void GetDevicesByUserAsync(string strSessionID, int iApplicationID, int iUserID, object userState) {
            if ((this.GetDevicesByUserOperationCompleted == null)) {
                this.GetDevicesByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDevicesByUserOperationCompleted);
            }
            this.InvokeAsync("GetDevicesByUser", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID}, this.GetDevicesByUserOperationCompleted, userState);
        }
        
        private void OnGetDevicesByUserOperationCompleted(object arg) {
            if ((this.GetDevicesByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDevicesByUserCompleted(this, new GetDevicesByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetDeviceCommandStatus", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetDeviceCommandStatus(string strSessionID, int iApplicationID, int iDeviceID) {
            object[] results = this.Invoke("GetDeviceCommandStatus", new object[] {
                        strSessionID,
                        iApplicationID,
                        iDeviceID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceCommandStatusAsync(string strSessionID, int iApplicationID, int iDeviceID) {
            this.GetDeviceCommandStatusAsync(strSessionID, iApplicationID, iDeviceID, null);
        }
        
        /// <remarks/>
        public void GetDeviceCommandStatusAsync(string strSessionID, int iApplicationID, int iDeviceID, object userState) {
            if ((this.GetDeviceCommandStatusOperationCompleted == null)) {
                this.GetDeviceCommandStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceCommandStatusOperationCompleted);
            }
            this.InvokeAsync("GetDeviceCommandStatus", new object[] {
                        strSessionID,
                        iApplicationID,
                        iDeviceID}, this.GetDeviceCommandStatusOperationCompleted, userState);
        }
        
        private void OnGetDeviceCommandStatusOperationCompleted(object arg) {
            if ((this.GetDeviceCommandStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceCommandStatusCompleted(this, new GetDeviceCommandStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/ResetCommandQueue", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ResetCommandQueue(string strSessionID, int iApplicationID, int iDeviceID) {
            object[] results = this.Invoke("ResetCommandQueue", new object[] {
                        strSessionID,
                        iApplicationID,
                        iDeviceID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ResetCommandQueueAsync(string strSessionID, int iApplicationID, int iDeviceID) {
            this.ResetCommandQueueAsync(strSessionID, iApplicationID, iDeviceID, null);
        }
        
        /// <remarks/>
        public void ResetCommandQueueAsync(string strSessionID, int iApplicationID, int iDeviceID, object userState) {
            if ((this.ResetCommandQueueOperationCompleted == null)) {
                this.ResetCommandQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetCommandQueueOperationCompleted);
            }
            this.InvokeAsync("ResetCommandQueue", new object[] {
                        strSessionID,
                        iApplicationID,
                        iDeviceID}, this.ResetCommandQueueOperationCompleted, userState);
        }
        
        private void OnResetCommandQueueOperationCompleted(object arg) {
            if ((this.ResetCommandQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetCommandQueueCompleted(this, new ResetCommandQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetManageableDeviceDefinitions", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SoapDeviceDefinition[] GetManageableDeviceDefinitions(string strSessionID, int iApplicationID) {
            object[] results = this.Invoke("GetManageableDeviceDefinitions", new object[] {
                        strSessionID,
                        iApplicationID});
            return ((SoapDeviceDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void GetManageableDeviceDefinitionsAsync(string strSessionID, int iApplicationID) {
            this.GetManageableDeviceDefinitionsAsync(strSessionID, iApplicationID, null);
        }
        
        /// <remarks/>
        public void GetManageableDeviceDefinitionsAsync(string strSessionID, int iApplicationID, object userState) {
            if ((this.GetManageableDeviceDefinitionsOperationCompleted == null)) {
                this.GetManageableDeviceDefinitionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetManageableDeviceDefinitionsOperationCompleted);
            }
            this.InvokeAsync("GetManageableDeviceDefinitions", new object[] {
                        strSessionID,
                        iApplicationID}, this.GetManageableDeviceDefinitionsOperationCompleted, userState);
        }
        
        private void OnGetManageableDeviceDefinitionsOperationCompleted(object arg) {
            if ((this.GetManageableDeviceDefinitionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetManageableDeviceDefinitionsCompleted(this, new GetManageableDeviceDefinitionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetUserTemplates", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SoapUserTemplate[] GetUserTemplates(string strSessionID, int iApplicationID) {
            object[] results = this.Invoke("GetUserTemplates", new object[] {
                        strSessionID,
                        iApplicationID});
            return ((SoapUserTemplate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserTemplatesAsync(string strSessionID, int iApplicationID) {
            this.GetUserTemplatesAsync(strSessionID, iApplicationID, null);
        }
        
        /// <remarks/>
        public void GetUserTemplatesAsync(string strSessionID, int iApplicationID, object userState) {
            if ((this.GetUserTemplatesOperationCompleted == null)) {
                this.GetUserTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetUserTemplates", new object[] {
                        strSessionID,
                        iApplicationID}, this.GetUserTemplatesOperationCompleted, userState);
        }
        
        private void OnGetUserTemplatesOperationCompleted(object arg) {
            if ((this.GetUserTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserTemplatesCompleted(this, new GetUserTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/AddUserWithUserTemplate", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddUserWithUserTemplate(string strSessionID, int iApplicationID, int iUserTemplateID, string strUsername, string strName, string strPassword, string strDescription) {
            object[] results = this.Invoke("AddUserWithUserTemplate", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserTemplateID,
                        strUsername,
                        strName,
                        strPassword,
                        strDescription});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddUserWithUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID, string strUsername, string strName, string strPassword, string strDescription) {
            this.AddUserWithUserTemplateAsync(strSessionID, iApplicationID, iUserTemplateID, strUsername, strName, strPassword, strDescription, null);
        }
        
        /// <remarks/>
        public void AddUserWithUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID, string strUsername, string strName, string strPassword, string strDescription, object userState) {
            if ((this.AddUserWithUserTemplateOperationCompleted == null)) {
                this.AddUserWithUserTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserWithUserTemplateOperationCompleted);
            }
            this.InvokeAsync("AddUserWithUserTemplate", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserTemplateID,
                        strUsername,
                        strName,
                        strPassword,
                        strDescription}, this.AddUserWithUserTemplateOperationCompleted, userState);
        }
        
        private void OnAddUserWithUserTemplateOperationCompleted(object arg) {
            if ((this.AddUserWithUserTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserWithUserTemplateCompleted(this, new AddUserWithUserTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/AddDevice", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddDevice(
                    string strSessionID, 
                    int iApplicationID, 
                    int iOwnerID, 
                    string strDeviceName, 
                    string strIMEI, 
                    string strMSISDN, 
                    string strEmail, 
                    string strIP, 
                    string strPort, 
                    string strAPN, 
                    string strGPRSUsername, 
                    string strGPRSPassword, 
                    int iDeviceDefinitionID, 
                    int iMobileNetworkID, 
                    string strDevicePassword, 
                    OneWireBag[] lstOneWireVariables) {
            object[] results = this.Invoke("AddDevice", new object[] {
                        strSessionID,
                        iApplicationID,
                        iOwnerID,
                        strDeviceName,
                        strIMEI,
                        strMSISDN,
                        strEmail,
                        strIP,
                        strPort,
                        strAPN,
                        strGPRSUsername,
                        strGPRSPassword,
                        iDeviceDefinitionID,
                        iMobileNetworkID,
                        strDevicePassword,
                        lstOneWireVariables});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddDeviceAsync(
                    string strSessionID, 
                    int iApplicationID, 
                    int iOwnerID, 
                    string strDeviceName, 
                    string strIMEI, 
                    string strMSISDN, 
                    string strEmail, 
                    string strIP, 
                    string strPort, 
                    string strAPN, 
                    string strGPRSUsername, 
                    string strGPRSPassword, 
                    int iDeviceDefinitionID, 
                    int iMobileNetworkID, 
                    string strDevicePassword, 
                    OneWireBag[] lstOneWireVariables) {
            this.AddDeviceAsync(strSessionID, iApplicationID, iOwnerID, strDeviceName, strIMEI, strMSISDN, strEmail, strIP, strPort, strAPN, strGPRSUsername, strGPRSPassword, iDeviceDefinitionID, iMobileNetworkID, strDevicePassword, lstOneWireVariables, null);
        }
        
        /// <remarks/>
        public void AddDeviceAsync(
                    string strSessionID, 
                    int iApplicationID, 
                    int iOwnerID, 
                    string strDeviceName, 
                    string strIMEI, 
                    string strMSISDN, 
                    string strEmail, 
                    string strIP, 
                    string strPort, 
                    string strAPN, 
                    string strGPRSUsername, 
                    string strGPRSPassword, 
                    int iDeviceDefinitionID, 
                    int iMobileNetworkID, 
                    string strDevicePassword, 
                    OneWireBag[] lstOneWireVariables, 
                    object userState) {
            if ((this.AddDeviceOperationCompleted == null)) {
                this.AddDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDeviceOperationCompleted);
            }
            this.InvokeAsync("AddDevice", new object[] {
                        strSessionID,
                        iApplicationID,
                        iOwnerID,
                        strDeviceName,
                        strIMEI,
                        strMSISDN,
                        strEmail,
                        strIP,
                        strPort,
                        strAPN,
                        strGPRSUsername,
                        strGPRSPassword,
                        iDeviceDefinitionID,
                        iMobileNetworkID,
                        strDevicePassword,
                        lstOneWireVariables}, this.AddDeviceOperationCompleted, userState);
        }
        
        private void OnAddDeviceOperationCompleted(object arg) {
            if ((this.AddDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDeviceCompleted(this, new AddDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/ChangeUsername", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ChangeUsername(string strSessionID, int iApplicationID, int iUserID, string strUsername, string strName) {
            object[] results = this.Invoke("ChangeUsername", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strUsername,
                        strName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeUsernameAsync(string strSessionID, int iApplicationID, int iUserID, string strUsername, string strName) {
            this.ChangeUsernameAsync(strSessionID, iApplicationID, iUserID, strUsername, strName, null);
        }
        
        /// <remarks/>
        public void ChangeUsernameAsync(string strSessionID, int iApplicationID, int iUserID, string strUsername, string strName, object userState) {
            if ((this.ChangeUsernameOperationCompleted == null)) {
                this.ChangeUsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUsernameOperationCompleted);
            }
            this.InvokeAsync("ChangeUsername", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strUsername,
                        strName}, this.ChangeUsernameOperationCompleted, userState);
        }
        
        private void OnChangeUsernameOperationCompleted(object arg) {
            if ((this.ChangeUsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeUsernameCompleted(this, new ChangeUsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/ChangeUserDescription", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ChangeUserDescription(string strSessionID, int iApplicationID, int iUserID, string strDescription) {
            object[] results = this.Invoke("ChangeUserDescription", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strDescription});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeUserDescriptionAsync(string strSessionID, int iApplicationID, int iUserID, string strDescription) {
            this.ChangeUserDescriptionAsync(strSessionID, iApplicationID, iUserID, strDescription, null);
        }
        
        /// <remarks/>
        public void ChangeUserDescriptionAsync(string strSessionID, int iApplicationID, int iUserID, string strDescription, object userState) {
            if ((this.ChangeUserDescriptionOperationCompleted == null)) {
                this.ChangeUserDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUserDescriptionOperationCompleted);
            }
            this.InvokeAsync("ChangeUserDescription", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strDescription}, this.ChangeUserDescriptionOperationCompleted, userState);
        }
        
        private void OnChangeUserDescriptionOperationCompleted(object arg) {
            if ((this.ChangeUserDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeUserDescriptionCompleted(this, new ChangeUserDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/ChangeUserSurname", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ChangeUserSurname(string strSessionID, int iApplicationID, int iUserID, string strSurname) {
            object[] results = this.Invoke("ChangeUserSurname", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strSurname});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeUserSurnameAsync(string strSessionID, int iApplicationID, int iUserID, string strSurname) {
            this.ChangeUserSurnameAsync(strSessionID, iApplicationID, iUserID, strSurname, null);
        }
        
        /// <remarks/>
        public void ChangeUserSurnameAsync(string strSessionID, int iApplicationID, int iUserID, string strSurname, object userState) {
            if ((this.ChangeUserSurnameOperationCompleted == null)) {
                this.ChangeUserSurnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUserSurnameOperationCompleted);
            }
            this.InvokeAsync("ChangeUserSurname", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strSurname}, this.ChangeUserSurnameOperationCompleted, userState);
        }
        
        private void OnChangeUserSurnameOperationCompleted(object arg) {
            if ((this.ChangeUserSurnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeUserSurnameCompleted(this, new ChangeUserSurnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/ChangeDriverID", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ChangeDriverID(string strSessionID, int iApplicationID, int iUserID, string strDriverID) {
            object[] results = this.Invoke("ChangeDriverID", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strDriverID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeDriverIDAsync(string strSessionID, int iApplicationID, int iUserID, string strDriverID) {
            this.ChangeDriverIDAsync(strSessionID, iApplicationID, iUserID, strDriverID, null);
        }
        
        /// <remarks/>
        public void ChangeDriverIDAsync(string strSessionID, int iApplicationID, int iUserID, string strDriverID, object userState) {
            if ((this.ChangeDriverIDOperationCompleted == null)) {
                this.ChangeDriverIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeDriverIDOperationCompleted);
            }
            this.InvokeAsync("ChangeDriverID", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strDriverID}, this.ChangeDriverIDOperationCompleted, userState);
        }
        
        private void OnChangeDriverIDOperationCompleted(object arg) {
            if ((this.ChangeDriverIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeDriverIDCompleted(this, new ChangeDriverIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/ChangeEmail", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ChangeEmail(string strSessionID, int iApplicationID, int iUserID, string strEmail) {
            object[] results = this.Invoke("ChangeEmail", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strEmail});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeEmailAsync(string strSessionID, int iApplicationID, int iUserID, string strEmail) {
            this.ChangeEmailAsync(strSessionID, iApplicationID, iUserID, strEmail, null);
        }
        
        /// <remarks/>
        public void ChangeEmailAsync(string strSessionID, int iApplicationID, int iUserID, string strEmail, object userState) {
            if ((this.ChangeEmailOperationCompleted == null)) {
                this.ChangeEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeEmailOperationCompleted);
            }
            this.InvokeAsync("ChangeEmail", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strEmail}, this.ChangeEmailOperationCompleted, userState);
        }
        
        private void OnChangeEmailOperationCompleted(object arg) {
            if ((this.ChangeEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeEmailCompleted(this, new ChangeEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetAccumulator", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SoapAccumulator GetAccumulator(string strSessionID, int iApplicationID, int iUserID, string strName) {
            object[] results = this.Invoke("GetAccumulator", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strName});
            return ((SoapAccumulator)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccumulatorAsync(string strSessionID, int iApplicationID, int iUserID, string strName) {
            this.GetAccumulatorAsync(strSessionID, iApplicationID, iUserID, strName, null);
        }
        
        /// <remarks/>
        public void GetAccumulatorAsync(string strSessionID, int iApplicationID, int iUserID, string strName, object userState) {
            if ((this.GetAccumulatorOperationCompleted == null)) {
                this.GetAccumulatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccumulatorOperationCompleted);
            }
            this.InvokeAsync("GetAccumulator", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID,
                        strName}, this.GetAccumulatorOperationCompleted, userState);
        }
        
        private void OnGetAccumulatorOperationCompleted(object arg) {
            if ((this.GetAccumulatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccumulatorCompleted(this, new GetAccumulatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetAccumulators", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAccumulators(string strSessionID, int iApplicationID, int iUserID) {
            object[] results = this.Invoke("GetAccumulators", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccumulatorsAsync(string strSessionID, int iApplicationID, int iUserID) {
            this.GetAccumulatorsAsync(strSessionID, iApplicationID, iUserID, null);
        }
        
        /// <remarks/>
        public void GetAccumulatorsAsync(string strSessionID, int iApplicationID, int iUserID, object userState) {
            if ((this.GetAccumulatorsOperationCompleted == null)) {
                this.GetAccumulatorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccumulatorsOperationCompleted);
            }
            this.InvokeAsync("GetAccumulators", new object[] {
                        strSessionID,
                        iApplicationID,
                        iUserID}, this.GetAccumulatorsOperationCompleted, userState);
        }
        
        private void OnGetAccumulatorsOperationCompleted(object arg) {
            if ((this.GetAccumulatorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccumulatorsCompleted(this, new GetAccumulatorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetAccumulatorValue", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SoapAccumulatorData GetAccumulatorValue(string strSessionID, int iApplicationID, int iAccumulatorID, System.DateTime dtTime) {
            object[] results = this.Invoke("GetAccumulatorValue", new object[] {
                        strSessionID,
                        iApplicationID,
                        iAccumulatorID,
                        dtTime});
            return ((SoapAccumulatorData)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, System.DateTime dtTime) {
            this.GetAccumulatorValueAsync(strSessionID, iApplicationID, iAccumulatorID, dtTime, null);
        }
        
        /// <remarks/>
        public void GetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, System.DateTime dtTime, object userState) {
            if ((this.GetAccumulatorValueOperationCompleted == null)) {
                this.GetAccumulatorValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccumulatorValueOperationCompleted);
            }
            this.InvokeAsync("GetAccumulatorValue", new object[] {
                        strSessionID,
                        iApplicationID,
                        iAccumulatorID,
                        dtTime}, this.GetAccumulatorValueOperationCompleted, userState);
        }
        
        private void OnGetAccumulatorValueOperationCompleted(object arg) {
            if ((this.GetAccumulatorValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccumulatorValueCompleted(this, new GetAccumulatorValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetLatestAccumulatorValue", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SoapAccumulatorData GetLatestAccumulatorValue(string strSessionID, int iApplicationID, int iAccumulatorID) {
            object[] results = this.Invoke("GetLatestAccumulatorValue", new object[] {
                        strSessionID,
                        iApplicationID,
                        iAccumulatorID});
            return ((SoapAccumulatorData)(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID) {
            this.GetLatestAccumulatorValueAsync(strSessionID, iApplicationID, iAccumulatorID, null);
        }
        
        /// <remarks/>
        public void GetLatestAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, object userState) {
            if ((this.GetLatestAccumulatorValueOperationCompleted == null)) {
                this.GetLatestAccumulatorValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestAccumulatorValueOperationCompleted);
            }
            this.InvokeAsync("GetLatestAccumulatorValue", new object[] {
                        strSessionID,
                        iApplicationID,
                        iAccumulatorID}, this.GetLatestAccumulatorValueOperationCompleted, userState);
        }
        
        private void OnGetLatestAccumulatorValueOperationCompleted(object arg) {
            if ((this.GetLatestAccumulatorValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestAccumulatorValueCompleted(this, new GetLatestAccumulatorValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/SetAccumulatorValue", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAccumulatorValue(string strSessionID, int iApplicationID, int iAccumulatorID, double dblValue, System.DateTime dtTimeOfValue) {
            this.Invoke("SetAccumulatorValue", new object[] {
                        strSessionID,
                        iApplicationID,
                        iAccumulatorID,
                        dblValue,
                        dtTimeOfValue});
        }
        
        /// <remarks/>
        public void SetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, double dblValue, System.DateTime dtTimeOfValue) {
            this.SetAccumulatorValueAsync(strSessionID, iApplicationID, iAccumulatorID, dblValue, dtTimeOfValue, null);
        }
        
        /// <remarks/>
        public void SetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, double dblValue, System.DateTime dtTimeOfValue, object userState) {
            if ((this.SetAccumulatorValueOperationCompleted == null)) {
                this.SetAccumulatorValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAccumulatorValueOperationCompleted);
            }
            this.InvokeAsync("SetAccumulatorValue", new object[] {
                        strSessionID,
                        iApplicationID,
                        iAccumulatorID,
                        dblValue,
                        dtTimeOfValue}, this.SetAccumulatorValueOperationCompleted, userState);
        }
        
        private void OnSetAccumulatorValueOperationCompleted(object arg) {
            if ((this.SetAccumulatorValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAccumulatorValueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapDeviceDefinition {
        
        private int idField;
        
        private string nameField;
        
        private string protocolIDField;
        
        private string namespaceNameField;
        
        private string descriptionField;
        
        private string deviceIdentifierLabelField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string ProtocolID {
            get {
                return this.protocolIDField;
            }
            set {
                this.protocolIDField = value;
            }
        }
        
        /// <remarks/>
        public string NamespaceName {
            get {
                return this.namespaceNameField;
            }
            set {
                this.namespaceNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string DeviceIdentifierLabel {
            get {
                return this.deviceIdentifierLabelField;
            }
            set {
                this.deviceIdentifierLabelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapAccumulatorData {
        
        private int accumulatorIDField;
        
        private string accumulatorNameField;
        
        private double valueField;
        
        private System.DateTime timeStampField;
        
        private string measureKeyField;
        
        /// <remarks/>
        public int AccumulatorID {
            get {
                return this.accumulatorIDField;
            }
            set {
                this.accumulatorIDField = value;
            }
        }
        
        /// <remarks/>
        public string AccumulatorName {
            get {
                return this.accumulatorNameField;
            }
            set {
                this.accumulatorNameField = value;
            }
        }
        
        /// <remarks/>
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        public string MeasureKey {
            get {
                return this.measureKeyField;
            }
            set {
                this.measureKeyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapAccumulator {
        
        private int idField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OneWireBag))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public abstract partial class ViewBag {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class OneWireBag : ViewBag {
        
        private int deviceIDField;
        
        private int deviceDefinitionIDField;
        
        private string variableNameField;
        
        private string oneWireIDField;
        
        /// <remarks/>
        public int DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
            }
        }
        
        /// <remarks/>
        public int DeviceDefinitionID {
            get {
                return this.deviceDefinitionIDField;
            }
            set {
                this.deviceDefinitionIDField = value;
            }
        }
        
        /// <remarks/>
        public string VariableName {
            get {
                return this.variableNameField;
            }
            set {
                this.variableNameField = value;
            }
        }
        
        /// <remarks/>
        public string OneWireID {
            get {
                return this.oneWireIDField;
            }
            set {
                this.oneWireIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapUserTemplateItem {
        
        private string fieldIDField;
        
        private bool requiredField;
        
        private bool visibleField;
        
        /// <remarks/>
        public string FieldID {
            get {
                return this.fieldIDField;
            }
            set {
                this.fieldIDField = value;
            }
        }
        
        /// <remarks/>
        public bool Required {
            get {
                return this.requiredField;
            }
            set {
                this.requiredField = value;
            }
        }
        
        /// <remarks/>
        public bool Visible {
            get {
                return this.visibleField;
            }
            set {
                this.visibleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapUserTemplate {
        
        private int idField;
        
        private string nameField;
        
        private SoapUserTemplateItem[] itemsField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public SoapUserTemplateItem[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetLicenseStatusCompletedEventHandler(object sender, GetLicenseStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetGateMessagesByTrackInfoIdCompletedEventHandler(object sender, GetGateMessagesByTrackInfoIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGateMessagesByTrackInfoIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGateMessagesByTrackInfoIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetLatestGateRecordsCompletedEventHandler(object sender, GetLatestGateRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestGateRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestGateRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUpdatedUsersInGroupCompletedEventHandler(object sender, GetUpdatedUsersInGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpdatedUsersInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpdatedUsersInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUsersInGroupCompletedEventHandler(object sender, GetUsersInGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUsersInUserTagCompletedEventHandler(object sender, GetUsersInUserTagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersInUserTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersInUserTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUsersInUserTemplateCompletedEventHandler(object sender, GetUsersInUserTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersInUserTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersInUserTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetCurrentApplicationsCompletedEventHandler(object sender, GetCurrentApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetUserMarkerColorCompletedEventHandler(object sender, SetUserMarkerColorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserMarkerColorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserMarkerColorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetUserExpectedFuelConsumptionCompletedEventHandler(object sender, SetUserExpectedFuelConsumptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserExpectedFuelConsumptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserExpectedFuelConsumptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveUserCompletedEventHandler(object sender, RemoveUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetUserPasswordCompletedEventHandler(object sender, SetUserPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetViewsCompletedEventHandler(object sender, GetViewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTagsInApplicationCompletedEventHandler(object sender, GetTagsInApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTagsInApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTagsInApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SaveTagCompletedEventHandler(object sender, SaveTagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDevicesByUserCompletedEventHandler(object sender, GetDevicesByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDevicesByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDevicesByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDeviceCommandStatusCompletedEventHandler(object sender, GetDeviceCommandStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceCommandStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceCommandStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ResetCommandQueueCompletedEventHandler(object sender, ResetCommandQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetCommandQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetCommandQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetManageableDeviceDefinitionsCompletedEventHandler(object sender, GetManageableDeviceDefinitionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetManageableDeviceDefinitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetManageableDeviceDefinitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SoapDeviceDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SoapDeviceDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUserTemplatesCompletedEventHandler(object sender, GetUserTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SoapUserTemplate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SoapUserTemplate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddUserWithUserTemplateCompletedEventHandler(object sender, AddUserWithUserTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUserWithUserTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUserWithUserTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddDeviceCompletedEventHandler(object sender, AddDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ChangeUsernameCompletedEventHandler(object sender, ChangeUsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ChangeUserDescriptionCompletedEventHandler(object sender, ChangeUserDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeUserDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeUserDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ChangeUserSurnameCompletedEventHandler(object sender, ChangeUserSurnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeUserSurnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeUserSurnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ChangeDriverIDCompletedEventHandler(object sender, ChangeDriverIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeDriverIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeDriverIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ChangeEmailCompletedEventHandler(object sender, ChangeEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAccumulatorCompletedEventHandler(object sender, GetAccumulatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccumulatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccumulatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SoapAccumulator Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SoapAccumulator)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAccumulatorsCompletedEventHandler(object sender, GetAccumulatorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccumulatorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccumulatorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAccumulatorValueCompletedEventHandler(object sender, GetAccumulatorValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccumulatorValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccumulatorValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SoapAccumulatorData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SoapAccumulatorData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetLatestAccumulatorValueCompletedEventHandler(object sender, GetLatestAccumulatorValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestAccumulatorValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestAccumulatorValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SoapAccumulatorData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SoapAccumulatorData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAccumulatorValueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591