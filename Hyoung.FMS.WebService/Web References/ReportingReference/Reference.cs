//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Hyoung.FMS.WebService.ReportingReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ReportingSoap", Namespace="http://gpsgate.com/services/")]
    public partial class Reporting : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetReportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessingReportsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Reporting() {
            this.Url = global::Hyoung.FMS.WebService.Properties.Settings.Default.Hyoung_FMS_WebService_ReportingReference_Reporting;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetReportsCompletedEventHandler GetReportsCompleted;
        
        /// <remarks/>
        public event GenerateReportCompletedEventHandler GenerateReportCompleted;
        
        /// <remarks/>
        public event FetchReportCompletedEventHandler FetchReportCompleted;
        
        /// <remarks/>
        public event GetReportStatusCompletedEventHandler GetReportStatusCompleted;
        
        /// <remarks/>
        public event CancelReportCompletedEventHandler CancelReportCompleted;
        
        /// <remarks/>
        public event GetProcessingReportsCompletedEventHandler GetProcessingReportsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetReports", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetReports(string strSessionID, int iApplicationID) {
            object[] results = this.Invoke("GetReports", new object[] {
                        strSessionID,
                        iApplicationID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportsAsync(string strSessionID, int iApplicationID) {
            this.GetReportsAsync(strSessionID, iApplicationID, null);
        }
        
        /// <remarks/>
        public void GetReportsAsync(string strSessionID, int iApplicationID, object userState) {
            if ((this.GetReportsOperationCompleted == null)) {
                this.GetReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportsOperationCompleted);
            }
            this.InvokeAsync("GetReports", new object[] {
                        strSessionID,
                        iApplicationID}, this.GetReportsOperationCompleted, userState);
        }
        
        private void OnGetReportsOperationCompleted(object arg) {
            if ((this.GetReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportsCompleted(this, new GetReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GenerateReport", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GenerateReport(string strSessionID, int iReportID, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GenerateReport", new object[] {
                        strSessionID,
                        iReportID,
                        startDate,
                        endDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateReportAsync(string strSessionID, int iReportID, System.DateTime startDate, System.DateTime endDate) {
            this.GenerateReportAsync(strSessionID, iReportID, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GenerateReportAsync(string strSessionID, int iReportID, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GenerateReportOperationCompleted == null)) {
                this.GenerateReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateReportOperationCompleted);
            }
            this.InvokeAsync("GenerateReport", new object[] {
                        strSessionID,
                        iReportID,
                        startDate,
                        endDate}, this.GenerateReportOperationCompleted, userState);
        }
        
        private void OnGenerateReportOperationCompleted(object arg) {
            if ((this.GenerateReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateReportCompleted(this, new GenerateReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/FetchReport", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode FetchReport(string strSessionID, int iHandleID) {
            object[] results = this.Invoke("FetchReport", new object[] {
                        strSessionID,
                        iHandleID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void FetchReportAsync(string strSessionID, int iHandleID) {
            this.FetchReportAsync(strSessionID, iHandleID, null);
        }
        
        /// <remarks/>
        public void FetchReportAsync(string strSessionID, int iHandleID, object userState) {
            if ((this.FetchReportOperationCompleted == null)) {
                this.FetchReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchReportOperationCompleted);
            }
            this.InvokeAsync("FetchReport", new object[] {
                        strSessionID,
                        iHandleID}, this.FetchReportOperationCompleted, userState);
        }
        
        private void OnFetchReportOperationCompleted(object arg) {
            if ((this.FetchReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchReportCompleted(this, new FetchReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetReportStatus", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetReportStatus(string strSessionID, int iHandleID) {
            object[] results = this.Invoke("GetReportStatus", new object[] {
                        strSessionID,
                        iHandleID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportStatusAsync(string strSessionID, int iHandleID) {
            this.GetReportStatusAsync(strSessionID, iHandleID, null);
        }
        
        /// <remarks/>
        public void GetReportStatusAsync(string strSessionID, int iHandleID, object userState) {
            if ((this.GetReportStatusOperationCompleted == null)) {
                this.GetReportStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportStatusOperationCompleted);
            }
            this.InvokeAsync("GetReportStatus", new object[] {
                        strSessionID,
                        iHandleID}, this.GetReportStatusOperationCompleted, userState);
        }
        
        private void OnGetReportStatusOperationCompleted(object arg) {
            if ((this.GetReportStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportStatusCompleted(this, new GetReportStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/CancelReport", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CancelReport(string strSessionID, int iHandleID) {
            object[] results = this.Invoke("CancelReport", new object[] {
                        strSessionID,
                        iHandleID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CancelReportAsync(string strSessionID, int iHandleID) {
            this.CancelReportAsync(strSessionID, iHandleID, null);
        }
        
        /// <remarks/>
        public void CancelReportAsync(string strSessionID, int iHandleID, object userState) {
            if ((this.CancelReportOperationCompleted == null)) {
                this.CancelReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelReportOperationCompleted);
            }
            this.InvokeAsync("CancelReport", new object[] {
                        strSessionID,
                        iHandleID}, this.CancelReportOperationCompleted, userState);
        }
        
        private void OnCancelReportOperationCompleted(object arg) {
            if ((this.CancelReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelReportCompleted(this, new CancelReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gpsgate.com/services/GetProcessingReports", RequestNamespace="http://gpsgate.com/services/", ResponseNamespace="http://gpsgate.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProcessingReports(string strSessionID, int iAppplicationID) {
            object[] results = this.Invoke("GetProcessingReports", new object[] {
                        strSessionID,
                        iAppplicationID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessingReportsAsync(string strSessionID, int iAppplicationID) {
            this.GetProcessingReportsAsync(strSessionID, iAppplicationID, null);
        }
        
        /// <remarks/>
        public void GetProcessingReportsAsync(string strSessionID, int iAppplicationID, object userState) {
            if ((this.GetProcessingReportsOperationCompleted == null)) {
                this.GetProcessingReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessingReportsOperationCompleted);
            }
            this.InvokeAsync("GetProcessingReports", new object[] {
                        strSessionID,
                        iAppplicationID}, this.GetProcessingReportsOperationCompleted, userState);
        }
        
        private void OnGetProcessingReportsOperationCompleted(object arg) {
            if ((this.GetProcessingReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessingReportsCompleted(this, new GetProcessingReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetReportsCompletedEventHandler(object sender, GetReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GenerateReportCompletedEventHandler(object sender, GenerateReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void FetchReportCompletedEventHandler(object sender, FetchReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetReportStatusCompletedEventHandler(object sender, GetReportStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CancelReportCompletedEventHandler(object sender, CancelReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetProcessingReportsCompletedEventHandler(object sender, GetProcessingReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessingReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessingReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591