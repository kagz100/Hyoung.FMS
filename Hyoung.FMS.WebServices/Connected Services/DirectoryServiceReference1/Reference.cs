//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DirectoryServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://gpsgate.com/services/", ConfigurationName="DirectoryServiceReference1.DirectorySoap")]
    public interface DirectorySoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoginAsync(string strUsername, string strPassword, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetLicenseStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLicenseStatusAsync(string strSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetGateMessagesByTrackInfoId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetGateMessagesByTrackInfoIdAsync(string strSessionID, int iApplicationID, int iTrackInfoID, System.DateTime dtStart, System.DateTime dtEnd, int iStartIndex, int iStopIndex, bool bFilterNoneValid, string[] arrFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetLatestGateRecords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLatestGateRecordsAsync(string strSessionID, int iApplicationID, int iUserID, bool bFilterNotUsed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUpdatedUsersInGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUpdatedUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iStartIndex, int iStopIndex, int iViewID, System.DateTime dtSince);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUsersInGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iViewID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUsersInUserTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUsersInUserTagAsync(string strSessionID, int iApplicationID, string strTagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUsersInUserTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUsersInUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetCurrentApplications", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetCurrentApplicationsAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SetUserMarkerColor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetUserMarkerColorAsync(string strSessionID, int iApplicationID, int iUserID, string strMarkerColor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SetUserExpectedFuelConsumption", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetUserExpectedFuelConsumptionAsync(string strSessionID, int iApplicationID, int iUserID, double dExpectedFuelConsumption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/RemoveUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserAsync(string strSessionID, int iApplicationID, int iUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SetUserPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetUserPasswordAsync(string strSessionID, int iApplicationID, int iUserID, string strNewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetViews", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetViewsAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetTagsInApplication", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetTagsInApplicationAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SaveTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SaveTagAsync(string strSessionID, int iApplicationID, int iTagID, string strName, string strDescription, int[] arrUserIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetDevicesByUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDevicesByUserAsync(string strSessionID, int iApplicationID, int iUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetDeviceCommandStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDeviceCommandStatusAsync(string strSessionID, int iApplicationID, int iDeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ResetCommandQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ResetCommandQueueAsync(string strSessionID, int iApplicationID, int iDeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetManageableDeviceDefinitions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapDeviceDefinition[]> GetManageableDeviceDefinitionsAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetUserTemplates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapUserTemplate[]> GetUserTemplatesAsync(string strSessionID, int iApplicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/AddUserWithUserTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<int> AddUserWithUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID, string strUsername, string strName, string strPassword, string strDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/AddDevice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddDeviceAsync(
                    string strSessionID, 
                    int iApplicationID, 
                    int iOwnerID, 
                    string strDeviceName, 
                    string strIMEI, 
                    string strMSISDN, 
                    string strEmail, 
                    string strIP, 
                    string strPort, 
                    string strAPN, 
                    string strGPRSUsername, 
                    string strGPRSPassword, 
                    int iDeviceDefinitionID, 
                    int iMobileNetworkID, 
                    string strDevicePassword, 
                    DirectoryServiceReference1.OneWireBag[] lstOneWireVariables);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeUsername", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUsernameAsync(string strSessionID, int iApplicationID, int iUserID, string strUsername, string strName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeUserDescription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUserDescriptionAsync(string strSessionID, int iApplicationID, int iUserID, string strDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeUserSurname", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUserSurnameAsync(string strSessionID, int iApplicationID, int iUserID, string strSurname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeDriverID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeDriverIDAsync(string strSessionID, int iApplicationID, int iUserID, string strDriverID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/ChangeEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeEmailAsync(string strSessionID, int iApplicationID, int iUserID, string strEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetAccumulator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulator> GetAccumulatorAsync(string strSessionID, int iApplicationID, int iUserID, string strName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetAccumulators", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAccumulatorsAsync(string strSessionID, int iApplicationID, int iUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetAccumulatorValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulatorData> GetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, System.DateTime dtTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/GetLatestAccumulatorValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulatorData> GetLatestAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gpsgate.com/services/SetAccumulatorValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ViewBag))]
        System.Threading.Tasks.Task SetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, double dblValue, System.DateTime dtTimeOfValue);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapDeviceDefinition
    {
        
        private int idField;
        
        private string nameField;
        
        private string protocolIDField;
        
        private string namespaceNameField;
        
        private string descriptionField;
        
        private string deviceIdentifierLabelField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ProtocolID
        {
            get
            {
                return this.protocolIDField;
            }
            set
            {
                this.protocolIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string NamespaceName
        {
            get
            {
                return this.namespaceNameField;
            }
            set
            {
                this.namespaceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string DeviceIdentifierLabel
        {
            get
            {
                return this.deviceIdentifierLabelField;
            }
            set
            {
                this.deviceIdentifierLabelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapAccumulatorData
    {
        
        private int accumulatorIDField;
        
        private string accumulatorNameField;
        
        private double valueField;
        
        private System.DateTime timeStampField;
        
        private string measureKeyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int AccumulatorID
        {
            get
            {
                return this.accumulatorIDField;
            }
            set
            {
                this.accumulatorIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AccumulatorName
        {
            get
            {
                return this.accumulatorNameField;
            }
            set
            {
                this.accumulatorNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public double Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime TimeStamp
        {
            get
            {
                return this.timeStampField;
            }
            set
            {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string MeasureKey
        {
            get
            {
                return this.measureKeyField;
            }
            set
            {
                this.measureKeyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapAccumulator
    {
        
        private int idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OneWireBag))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public abstract partial class ViewBag
    {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class OneWireBag : ViewBag
    {
        
        private int deviceIDField;
        
        private int deviceDefinitionIDField;
        
        private string variableNameField;
        
        private string oneWireIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int DeviceID
        {
            get
            {
                return this.deviceIDField;
            }
            set
            {
                this.deviceIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int DeviceDefinitionID
        {
            get
            {
                return this.deviceDefinitionIDField;
            }
            set
            {
                this.deviceDefinitionIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string VariableName
        {
            get
            {
                return this.variableNameField;
            }
            set
            {
                this.variableNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string OneWireID
        {
            get
            {
                return this.oneWireIDField;
            }
            set
            {
                this.oneWireIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapUserTemplateItem
    {
        
        private string fieldIDField;
        
        private bool requiredField;
        
        private bool visibleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string FieldID
        {
            get
            {
                return this.fieldIDField;
            }
            set
            {
                this.fieldIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Required
        {
            get
            {
                return this.requiredField;
            }
            set
            {
                this.requiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool Visible
        {
            get
            {
                return this.visibleField;
            }
            set
            {
                this.visibleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gpsgate.com/services/")]
    public partial class SoapUserTemplate
    {
        
        private int idField;
        
        private string nameField;
        
        private SoapUserTemplateItem[] itemsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public SoapUserTemplateItem[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface DirectorySoapChannel : DirectoryServiceReference1.DirectorySoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class DirectorySoapClient : System.ServiceModel.ClientBase<DirectoryServiceReference1.DirectorySoap>, DirectoryServiceReference1.DirectorySoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DirectorySoapClient(EndpointConfiguration endpointConfiguration) : 
                base(DirectorySoapClient.GetBindingForEndpoint(endpointConfiguration), DirectorySoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DirectorySoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DirectorySoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DirectorySoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DirectorySoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DirectorySoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoginAsync(string strUsername, string strPassword, int iApplicationID)
        {
            return base.Channel.LoginAsync(strUsername, strPassword, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLicenseStatusAsync(string strSessionID)
        {
            return base.Channel.GetLicenseStatusAsync(strSessionID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetGateMessagesByTrackInfoIdAsync(string strSessionID, int iApplicationID, int iTrackInfoID, System.DateTime dtStart, System.DateTime dtEnd, int iStartIndex, int iStopIndex, bool bFilterNoneValid, string[] arrFields)
        {
            return base.Channel.GetGateMessagesByTrackInfoIdAsync(strSessionID, iApplicationID, iTrackInfoID, dtStart, dtEnd, iStartIndex, iStopIndex, bFilterNoneValid, arrFields);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLatestGateRecordsAsync(string strSessionID, int iApplicationID, int iUserID, bool bFilterNotUsed)
        {
            return base.Channel.GetLatestGateRecordsAsync(strSessionID, iApplicationID, iUserID, bFilterNotUsed);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUpdatedUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iStartIndex, int iStopIndex, int iViewID, System.DateTime dtSince)
        {
            return base.Channel.GetUpdatedUsersInGroupAsync(strSessionID, iApplicationID, strGroupName, iStartIndex, iStopIndex, iViewID, dtSince);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUsersInGroupAsync(string strSessionID, int iApplicationID, string strGroupName, int iViewID)
        {
            return base.Channel.GetUsersInGroupAsync(strSessionID, iApplicationID, strGroupName, iViewID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUsersInUserTagAsync(string strSessionID, int iApplicationID, string strTagName)
        {
            return base.Channel.GetUsersInUserTagAsync(strSessionID, iApplicationID, strTagName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUsersInUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID)
        {
            return base.Channel.GetUsersInUserTemplateAsync(strSessionID, iApplicationID, iUserTemplateID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetCurrentApplicationsAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetCurrentApplicationsAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetUserMarkerColorAsync(string strSessionID, int iApplicationID, int iUserID, string strMarkerColor)
        {
            return base.Channel.SetUserMarkerColorAsync(strSessionID, iApplicationID, iUserID, strMarkerColor);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetUserExpectedFuelConsumptionAsync(string strSessionID, int iApplicationID, int iUserID, double dExpectedFuelConsumption)
        {
            return base.Channel.SetUserExpectedFuelConsumptionAsync(strSessionID, iApplicationID, iUserID, dExpectedFuelConsumption);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserAsync(string strSessionID, int iApplicationID, int iUserID)
        {
            return base.Channel.RemoveUserAsync(strSessionID, iApplicationID, iUserID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetUserPasswordAsync(string strSessionID, int iApplicationID, int iUserID, string strNewPassword)
        {
            return base.Channel.SetUserPasswordAsync(strSessionID, iApplicationID, iUserID, strNewPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetViewsAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetViewsAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetTagsInApplicationAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetTagsInApplicationAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SaveTagAsync(string strSessionID, int iApplicationID, int iTagID, string strName, string strDescription, int[] arrUserIDs)
        {
            return base.Channel.SaveTagAsync(strSessionID, iApplicationID, iTagID, strName, strDescription, arrUserIDs);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDevicesByUserAsync(string strSessionID, int iApplicationID, int iUserID)
        {
            return base.Channel.GetDevicesByUserAsync(strSessionID, iApplicationID, iUserID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDeviceCommandStatusAsync(string strSessionID, int iApplicationID, int iDeviceID)
        {
            return base.Channel.GetDeviceCommandStatusAsync(strSessionID, iApplicationID, iDeviceID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ResetCommandQueueAsync(string strSessionID, int iApplicationID, int iDeviceID)
        {
            return base.Channel.ResetCommandQueueAsync(strSessionID, iApplicationID, iDeviceID);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapDeviceDefinition[]> GetManageableDeviceDefinitionsAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetManageableDeviceDefinitionsAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapUserTemplate[]> GetUserTemplatesAsync(string strSessionID, int iApplicationID)
        {
            return base.Channel.GetUserTemplatesAsync(strSessionID, iApplicationID);
        }
        
        public System.Threading.Tasks.Task<int> AddUserWithUserTemplateAsync(string strSessionID, int iApplicationID, int iUserTemplateID, string strUsername, string strName, string strPassword, string strDescription)
        {
            return base.Channel.AddUserWithUserTemplateAsync(strSessionID, iApplicationID, iUserTemplateID, strUsername, strName, strPassword, strDescription);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddDeviceAsync(
                    string strSessionID, 
                    int iApplicationID, 
                    int iOwnerID, 
                    string strDeviceName, 
                    string strIMEI, 
                    string strMSISDN, 
                    string strEmail, 
                    string strIP, 
                    string strPort, 
                    string strAPN, 
                    string strGPRSUsername, 
                    string strGPRSPassword, 
                    int iDeviceDefinitionID, 
                    int iMobileNetworkID, 
                    string strDevicePassword, 
                    DirectoryServiceReference1.OneWireBag[] lstOneWireVariables)
        {
            return base.Channel.AddDeviceAsync(strSessionID, iApplicationID, iOwnerID, strDeviceName, strIMEI, strMSISDN, strEmail, strIP, strPort, strAPN, strGPRSUsername, strGPRSPassword, iDeviceDefinitionID, iMobileNetworkID, strDevicePassword, lstOneWireVariables);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUsernameAsync(string strSessionID, int iApplicationID, int iUserID, string strUsername, string strName)
        {
            return base.Channel.ChangeUsernameAsync(strSessionID, iApplicationID, iUserID, strUsername, strName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUserDescriptionAsync(string strSessionID, int iApplicationID, int iUserID, string strDescription)
        {
            return base.Channel.ChangeUserDescriptionAsync(strSessionID, iApplicationID, iUserID, strDescription);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUserSurnameAsync(string strSessionID, int iApplicationID, int iUserID, string strSurname)
        {
            return base.Channel.ChangeUserSurnameAsync(strSessionID, iApplicationID, iUserID, strSurname);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeDriverIDAsync(string strSessionID, int iApplicationID, int iUserID, string strDriverID)
        {
            return base.Channel.ChangeDriverIDAsync(strSessionID, iApplicationID, iUserID, strDriverID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeEmailAsync(string strSessionID, int iApplicationID, int iUserID, string strEmail)
        {
            return base.Channel.ChangeEmailAsync(strSessionID, iApplicationID, iUserID, strEmail);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulator> GetAccumulatorAsync(string strSessionID, int iApplicationID, int iUserID, string strName)
        {
            return base.Channel.GetAccumulatorAsync(strSessionID, iApplicationID, iUserID, strName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAccumulatorsAsync(string strSessionID, int iApplicationID, int iUserID)
        {
            return base.Channel.GetAccumulatorsAsync(strSessionID, iApplicationID, iUserID);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulatorData> GetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, System.DateTime dtTime)
        {
            return base.Channel.GetAccumulatorValueAsync(strSessionID, iApplicationID, iAccumulatorID, dtTime);
        }
        
        public System.Threading.Tasks.Task<DirectoryServiceReference1.SoapAccumulatorData> GetLatestAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID)
        {
            return base.Channel.GetLatestAccumulatorValueAsync(strSessionID, iApplicationID, iAccumulatorID);
        }
        
        public System.Threading.Tasks.Task SetAccumulatorValueAsync(string strSessionID, int iApplicationID, int iAccumulatorID, double dblValue, System.DateTime dtTimeOfValue)
        {
            return base.Channel.SetAccumulatorValueAsync(strSessionID, iApplicationID, iAccumulatorID, dblValue, dtTimeOfValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DirectorySoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.DirectorySoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DirectorySoap))
            {
                return new System.ServiceModel.EndpointAddress("http://52.43.97.199/GpsGateServer/Services/Directory.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.DirectorySoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://52.43.97.199/GpsGateServer/Services/Directory.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            DirectorySoap,
            
            DirectorySoap12,
        }
    }
}
